-- BP 7.1 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

INSERT INTO SM_ISM
	VALUES ("8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"3e6a8518-fb1a-412c-8bb7-8e3ddaf974d6");
INSERT INTO SM_SM
	VALUES ("8b2464cb-80b7-46e0-a432-e101fd043e3e",
	'',
	0);
INSERT INTO SM_MOORE
	VALUES ("8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_EVTDI
	VALUES ("0658dee2-350a-44c2-9761-bbc93dd339f6",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	'data',
	'',
	"3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	'',
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DT_PROXY
	VALUES ("3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	"00000000-0000-0000-0000-000000000000",
	'TypeContainer',
	'',
	'',
	'../../../Datatypes/Datatypes.xtuml');
INSERT INTO SM_LEVT
	VALUES ("b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	1,
	'run_test',
	0,
	'',
	'CHK1',
	'');
INSERT INTO SM_LEVT
	VALUES ("9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	2,
	'start',
	0,
	'',
	'CHK2',
	'');
INSERT INTO SM_STATE
	VALUES ("f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'Begin',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("39005c20-4fc6-41ed-816c-155401101cd8",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'TestByValCalls',
	3,
	0);
INSERT INTO SM_SEME
	VALUES ("39005c20-4fc6-41ed-816c-155401101cd8",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("39005c20-4fc6-41ed-816c-155401101cd8",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("39005c20-4fc6-41ed-816c-155401101cd8",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("562053ae-1974-4f55-af78-a60944f82df2",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'TestByRefCalls',
	4,
	0);
INSERT INTO SM_SEME
	VALUES ("562053ae-1974-4f55-af78-a60944f82df2",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("562053ae-1974-4f55-af78-a60944f82df2",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("562053ae-1974-4f55-af78-a60944f82df2",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("15f73959-e11e-48a9-8707-a07ded62d154",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'Waiting to start',
	1,
	0);
INSERT INTO SM_CH
	VALUES ("15f73959-e11e-48a9-8707-a07ded62d154",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("15f73959-e11e-48a9-8707-a07ded62d154",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("15f73959-e11e-48a9-8707-a07ded62d154",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("361bf40c-1300-4307-9e5e-e392df8f07a2",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'Misc',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("361bf40c-1300-4307-9e5e-e392df8f07a2",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("361bf40c-1300-4307-9e5e-e392df8f07a2",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("361bf40c-1300-4307-9e5e-e392df8f07a2",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("361bf40c-1300-4307-9e5e-e392df8f07a2",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("90abf85b-4538-42f8-9398-7648cbcd8911",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("90abf85b-4538-42f8-9398-7648cbcd8911",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"39005c20-4fc6-41ed-816c-155401101cd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("5d65cac0-a920-4689-a617-2c80bc036ec9",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"39005c20-4fc6-41ed-816c-155401101cd8",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("5d65cac0-a920-4689-a617-2c80bc036ec9",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"562053ae-1974-4f55-af78-a60944f82df2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9057e3df-0ca5-441e-974a-4c612b435047",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"15f73959-e11e-48a9-8707-a07ded62d154",
	"9fda98ce-d213-419b-9a48-acd9a52bc1bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("9057e3df-0ca5-441e-974a-4c612b435047",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a1eef750-fc7c-4760-b95c-c72578a21404",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"562053ae-1974-4f55-af78-a60944f82df2",
	"b7aab2f6-8ed1-4259-a6db-5aa69298d75a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("a1eef750-fc7c-4760-b95c-c72578a21404",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"361bf40c-1300-4307-9e5e-e392df8f07a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("e036b129-3d7c-4552-8aa3-9cc885fe7274",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"f5146bf7-ab03-499f-9d14-d11b81b2dd74");
INSERT INTO SM_AH
	VALUES ("e036b129-3d7c-4552-8aa3-9cc885fe7274",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("e036b129-3d7c-4552-8aa3-9cc885fe7274",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'// Write SDT data
self.myData.a_integer = 1;
self.myData.a_boolean = true;
self.myData.a_date = TIM::current_date();
self.myData.a_real = 1.0;
self.myData.a_string = "myData";
self.myData.a_timestamp = TIM::current_clock();
self.myData.a_TypeContainer.a_integer = self.myData.a_integer;
self.myData.a_TypeContainer.a_boolean = self.myData.a_boolean;
self.myData.a_TypeContainer.a_date = self.myData.a_date;
self.myData.a_TypeContainer.a_real = self.myData.a_real;
self.myData.a_TypeContainer.a_string = self.myData.a_string;
self.myData.a_TypeContainer.a_timestamp = self.myData.a_timestamp;

// Write SDT data
self.myData2.a_integer = 2;
self.myData2.a_boolean = false;
self.myData2.a_date = TIM::current_date();
self.myData2.a_real = 2.0;
self.myData2.a_string = "myData2";
self.myData2.a_timestamp = TIM::current_clock();
self.myData2.a_TypeContainer.a_integer = self.myData2.a_integer;
self.myData2.a_TypeContainer.a_boolean = self.myData2.a_boolean;
self.myData2.a_TypeContainer.a_date = self.myData2.a_date;
self.myData2.a_TypeContainer.a_real = self.myData2.a_real;
self.myData2.a_TypeContainer.a_string = self.myData2.a_string;
self.myData2.a_TypeContainer.a_timestamp = self.myData2.a_timestamp;


// Read SDT data
if ( self.myData.a_integer == 1 )
  LOG::LogSuccess( message: "Successful read of SDT int member." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT int member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_boolean == true )
  LOG::LogSuccess( message: "Successful read of SDT boolean member." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT boolean member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of SDT date member." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT date member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_real == 1.0 )
  LOG::LogSuccess( message: "Successful read of SDT real member." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT real member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_string == "self.myData" )
  LOG::LogSuccess( message: "Successful read of SDT string member." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT string member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_timestamp < TIM::current_clock() )
  LOG::LogSuccess( message: "Successful read of SDT timestamp member." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT timestamp member." );
  ::failedChecksTest();
end if;

// Read nested SDT data
if ( self.myData.a_integer == self.myData.a_TypeContainer.a_integer 
     and self.myData.a_TypeContainer.a_integer == 1)
  LOG::LogSuccess( message: "Successful read of nested SDT int member." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT int member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_boolean == self.myData.a_TypeContainer.a_boolean 
     and self.myData.a_TypeContainer.a_boolean == true)
  LOG::LogSuccess( message: "Successful read of nested SDT boolean member." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT boolean member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_date == self.myData.a_TypeContainer.a_date 
     and self.myData.a_TypeContainer.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of nested SDT date member." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT date member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_real == self.myData.a_TypeContainer.a_real 
     and self.myData.a_TypeContainer.a_real == 1.0)
  LOG::LogSuccess( message: "Successful read of nested SDT real member." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT real member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_string == self.myData.a_TypeContainer.a_string 
     and self.myData.a_TypeContainer.a_string == "self.myData")
  LOG::LogSuccess( message: "Successful read of nested SDT string member." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT string member." );
  ::failedChecksTest();
end if;
if ( self.myData.a_timestamp == self.myData.a_TypeContainer.a_timestamp 
     and self.myData.a_TypeContainer.a_timestamp < TIM::current_clock())
  LOG::LogSuccess( message: "Successful read of nested SDT timestamp member." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT timestamp member." );
  ::failedChecksTest();
end if;
// Done reading nested SDT Data


generate CHK1:''run_test''( data: self.myData ) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("75dd3a27-0bb5-43ab-91c6-a31450fa898d",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"39005c20-4fc6-41ed-816c-155401101cd8");
INSERT INTO SM_AH
	VALUES ("75dd3a27-0bb5-43ab-91c6-a31450fa898d",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("75dd3a27-0bb5-43ab-91c6-a31450fa898d",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'// Run all the "By Val" calls using the received event parameter
rvalDataOp = self.checkDataOpByVal( data: rcvd_evt.data );

// Check the return value data
if ( rvalDataOp == self.myData )
  LOG::LogSuccess( message: "Successful check of SDT return value." );
else
  LOG::LogFailure( message: "Unsuccessful check of SDT return value." );
  ::failedChecksTest();
end if;

// Run all the "By Val" calls using a temporary
localData = rcvd_evt.data;
rvalDataOp = self.checkDataOpByVal( data: localData );

// Check the return value data
if ( rvalDataOp == self.myData )
  LOG::LogSuccess( message: "Successful check of SDT return value." );
else
  LOG::LogFailure( message: "Unsuccessful check of SDT return value." );
  ::failedChecksTest();
end if;

// Generate run_test event to self to move to the next state
generate CHK1:''run_test''( data: self.myData ) to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("db5f2a84-669a-4bf1-abbd-685fff76ba12",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"562053ae-1974-4f55-af78-a60944f82df2");
INSERT INTO SM_AH
	VALUES ("db5f2a84-669a-4bf1-abbd-685fff76ba12",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("db5f2a84-669a-4bf1-abbd-685fff76ba12",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'// Run all the "By Ref" calls using the received event parameter
foo = rcvd_evt.data;
rvalDataOp = self.checkDataOpByRef( data: foo );

// Check the return value data
if ( rvalDataOp == self.myData )
  LOG::LogSuccess( message: "Successful check of SDT return value." );
else
  LOG::LogFailure( message: "Unsuccessful check of SDT return value." );
  ::failedChecksTest();
end if;

// Run all the "By Ref" calls using a temporary
localData = rcvd_evt.data;
rvalDataOp = self.checkDataOpByRef( data: localData );

// Check the return value data
if ( rvalDataOp == self.myData )
  LOG::LogSuccess( message: "Successful check of SDT return value." );
else
  LOG::LogFailure( message: "Unsuccessful check of SDT return value." );
  ::failedChecksTest();
end if;

// Generate run_test event to self to move to the next state
generate CHK1:''run_test''( data: localData ) to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("55429c28-9993-4943-9afd-b21c44437480",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"15f73959-e11e-48a9-8707-a07ded62d154");
INSERT INTO SM_AH
	VALUES ("55429c28-9993-4943-9afd-b21c44437480",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("55429c28-9993-4943-9afd-b21c44437480",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'',
	'');
INSERT INTO SM_MOAH
	VALUES ("c72f66f0-c3c6-4c9a-8a46-e370b060b25e",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"361bf40c-1300-4307-9e5e-e392df8f07a2");
INSERT INTO SM_AH
	VALUES ("c72f66f0-c3c6-4c9a-8a46-e370b060b25e",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("c72f66f0-c3c6-4c9a-8a46-e370b060b25e",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'// The data that came in on the event should be identical to the myData
// member, because that is what was passed to the generate event call.
if ( self.myData == rcvd_evt.data )
  LOG::LogSuccess( message: "Successful comparison of identical SDTs." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of identical SDTs." );
  ::failedChecksTest();
end if;

// Compare unequal SDTs of same type
if ( self.myData2 != rcvd_evt.data )
  LOG::LogSuccess( message: "Successful comparison of non-identical SDTs." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of non-identical SDTs." );
  ::failedChecksTest();
end if;

// Check the reassigned temporary sdt data
localData = self.myData2;
localData = self.myData;
if ( localData == self.myData )
  LOG::LogSuccess( message: "Successful check of reassigned temporary SDT." );
else
  LOG::LogFailure( message: "Unsuccessful check of reassigned temporary SDT." );
  ::failedChecksTest();
end if;
if ( localData != self.myData2 )
  LOG::LogSuccess( message: "Successful check of reassigned temporary SDT." );
else
  LOG::LogFailure( message: "Unsuccessful check of reassigned temporary SDT." );
  ::failedChecksTest();
end if;

// Check data of a received event SDT
if ( rcvd_evt.data.a_integer == 1 )
  LOG::LogSuccess( message: "Successful read of SDT int member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT int member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_boolean == true )
  LOG::LogSuccess( message: "Successful read of SDT boolean member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT boolean member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of SDT date member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT date member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_real == 1.0 )
  LOG::LogSuccess( message: "Successful read of SDT real member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT real member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_string == "myData" )
  LOG::LogSuccess( message: "Successful read of SDT string member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT string member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_timestamp < TIM::current_clock() )
  LOG::LogSuccess( message: "Successful read of SDT timestamp member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT timestamp member in received event data." );
  ::failedChecksTest();
end if;

/*
if ( rcvd_evt.data.a_integer == rcvd_evt.data.a_TypeContainer.a_integer
     and rcvd_evt.data.a_TypeContainer.a_integer == 1)
  LOG::LogSuccess( message: "Successful read of nested SDT int member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT int member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_boolean == rcvd_evt.data.a_TypeContainer.a_boolean 
     and rcvd_evt.data.a_TypeContainer.a_boolean == true)
  LOG::LogSuccess( message: "Successful read of nested SDT boolean member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT boolean member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_date == rcvd_evt.data.a_TypeContainer.a_date 
     and rcvd_evt.data.a_TypeContainer.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of nested SDT date member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT date member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_real == rcvd_evt.data.a_TypeContainer.a_real 
     and rcvd_evt.data.a_TypeContainer.a_real == 1.0)
  LOG::LogSuccess( message: "Successful read of nested SDT real member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT real member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_string == rcvd_evt.data.a_TypeContainer.a_string 
     and rcvd_evt.data.a_TypeContainer.a_string == "rcvd_evt.data")
  LOG::LogSuccess( message: "Successful read of nested SDT string member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT string member in received event data." );
  ::failedChecksTest();
end if;
if ( rcvd_evt.data.a_timestamp == rcvd_evt.data.a_TypeContainer.a_timestamp 
     and rcvd_evt.data.a_TypeContainer.a_timestamp < TIM::current_clock())
  LOG::LogSuccess( message: "Successful read of nested SDT timestamp member in received event data." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT timestamp member in received event data." );
  ::failedChecksTest();
end if;
*/

// Assign some temporaries from SDT members
myInt = rcvd_evt.data.a_integer;
myReal = rcvd_evt.data.a_real;
if ( myInt == rcvd_evt.data.a_integer )
  LOG::LogSuccess( message: "Successful read of temporary int assigned from SDT member." );
else
  LOG::LogFailure( message: "Unsuccessful read of temporary int assigned from SDT member." );
  ::failedChecksTest();
end if;
if ( myReal == rcvd_evt.data.a_real )
  LOG::LogSuccess( message: "Successful read of temporary real assigned from SDT member." );
else
  LOG::LogFailure( message: "Unsuccessful read of temporary real assigned from SDT member." );
  ::failedChecksTest();
end if;

// Check direct return value access without a local temporary
/* TODO - This functionality is not yet supported.  It will
          be added by issue 2788

if ( 2 == self.checkData2RVal( data: self.myData2).a_integer )
  LOG::LogSuccess( message: "Successful read of returned SDT int member without a local temporary." );
else
  LOG::LogFailure( message: "Unsuccessful read of returned SDT int member without a local temporary" );
  ::failedChecksTest();
end if;
if ( 2.0 == self.checkData2RVal( data: myData2).a_real )
  LOG::LogSuccess( message: "Successful read of returned SDT real member without a local temporary" );
else
  LOG::LogFailure( message: "Unsuccessful read of returned SDT real member without a local temporary" );
  ::failedChecksTest();
end if;*/

// Tell test control we''re done
select any tc from instances of TC;
generate TC2:''completedChecksTest''() to tc;

',
	'');
INSERT INTO SM_TAH
	VALUES ("1ffa4cfe-cbfa-40e6-8d80-8ec97f774367",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"90abf85b-4538-42f8-9398-7648cbcd8911");
INSERT INTO SM_AH
	VALUES ("1ffa4cfe-cbfa-40e6-8d80-8ec97f774367",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("1ffa4cfe-cbfa-40e6-8d80-8ec97f774367",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("fec83e83-096d-4571-aac3-58b99f1a985b",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"5d65cac0-a920-4689-a617-2c80bc036ec9");
INSERT INTO SM_AH
	VALUES ("fec83e83-096d-4571-aac3-58b99f1a985b",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("fec83e83-096d-4571-aac3-58b99f1a985b",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("840a83a1-e578-4d0f-a30b-ed70b6648147",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"9057e3df-0ca5-441e-974a-4c612b435047");
INSERT INTO SM_AH
	VALUES ("840a83a1-e578-4d0f-a30b-ed70b6648147",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("840a83a1-e578-4d0f-a30b-ed70b6648147",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("8c180536-354b-4f31-9f20-9bf65ded8b5b",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	"a1eef750-fc7c-4760-b95c-c72578a21404");
INSERT INTO SM_AH
	VALUES ("8c180536-354b-4f31-9f20-9bf65ded8b5b",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e");
INSERT INTO SM_ACT
	VALUES ("8c180536-354b-4f31-9f20-9bf65ded8b5b",
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	1,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	8,
	"8b2464cb-80b7-46e0-a432-e101fd043e3e",
	40,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	4373,
	3247,
	0,
	0,
	0,
	'',
	'sdt_test::Test::CheckSDTs::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("4a62c687-645f-4687-8b2a-702ef940ccfa",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"f5146bf7-ab03-499f-9d14-d11b81b2dd74",
	41,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::Begin');
INSERT INTO GD_SHP
	VALUES ("4a62c687-645f-4687-8b2a-702ef940ccfa");
INSERT INTO GD_NCS
	VALUES ("4a62c687-645f-4687-8b2a-702ef940ccfa");
INSERT INTO DIM_ND
	VALUES (168.000000,
	96.000000,
	"4a62c687-645f-4687-8b2a-702ef940ccfa");
INSERT INTO DIM_GE
	VALUES (4104.000000,
	3084.000000,
	"4a62c687-645f-4687-8b2a-702ef940ccfa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4a62c687-645f-4687-8b2a-702ef940ccfa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("06f8ccc3-0322-4278-a20d-24f6f3b3005a",
	4272.000000,
	3138.000000,
	"4a62c687-645f-4687-8b2a-702ef940ccfa");
INSERT INTO DIM_CON
	VALUES ("9f6f4b88-201c-4db6-b019-a80ea6ac9c19",
	4182.000000,
	3084.000000,
	"4a62c687-645f-4687-8b2a-702ef940ccfa");
INSERT INTO GD_GE
	VALUES ("ddeeb77e-34b3-4089-b57d-d077ae21923e",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"39005c20-4fc6-41ed-816c-155401101cd8",
	41,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::TestByValCalls');
INSERT INTO GD_SHP
	VALUES ("ddeeb77e-34b3-4089-b57d-d077ae21923e");
INSERT INTO GD_NCS
	VALUES ("ddeeb77e-34b3-4089-b57d-d077ae21923e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"ddeeb77e-34b3-4089-b57d-d077ae21923e");
INSERT INTO DIM_GE
	VALUES (4500.000000,
	3084.000000,
	"ddeeb77e-34b3-4089-b57d-d077ae21923e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ddeeb77e-34b3-4089-b57d-d077ae21923e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("add817a6-d113-440b-b67e-22c7e2f3edba",
	4500.000000,
	3138.000000,
	"ddeeb77e-34b3-4089-b57d-d077ae21923e");
INSERT INTO DIM_CON
	VALUES ("d9438957-793d-42ef-8f07-87730b4279a5",
	4584.000000,
	3180.000000,
	"ddeeb77e-34b3-4089-b57d-d077ae21923e");
INSERT INTO GD_GE
	VALUES ("5264a374-08de-45e0-b37d-627dd7afda5f",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"90abf85b-4538-42f8-9398-7648cbcd8911",
	42,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::Begin::CHK1: run_test');
INSERT INTO GD_CON
	VALUES ("5264a374-08de-45e0-b37d-627dd7afda5f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1248875e-9bb5-4366-bf04-27eb1739e0a0",
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1248875e-9bb5-4366-bf04-27eb1739e0a0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1248875e-9bb5-4366-bf04-27eb1739e0a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1248875e-9bb5-4366-bf04-27eb1739e0a0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0ca9cbc9-202f-447b-8657-9f5f2e1373dc",
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (64.000000,
	38.000000,
	"0ca9cbc9-202f-447b-8657-9f5f2e1373dc");
INSERT INTO DIM_GE
	VALUES (4342.000000,
	3090.000000,
	"0ca9cbc9-202f-447b-8657-9f5f2e1373dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0ca9cbc9-202f-447b-8657-9f5f2e1373dc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("49817b93-5d91-4f82-a847-80f7047352b6",
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"49817b93-5d91-4f82-a847-80f7047352b6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"49817b93-5d91-4f82-a847-80f7047352b6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("49817b93-5d91-4f82-a847-80f7047352b6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fbb6fed0-00ba-4385-9c97-25c05baec2cb",
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	"00000000-0000-0000-0000-000000000000",
	"abcb8c75-1a83-44a6-929d-41ff76e0579b",
	"981f7682-f4d9-4aa1-8f2b-016141b62096");
INSERT INTO DIM_WAY
	VALUES ("abcb8c75-1a83-44a6-929d-41ff76e0579b",
	4272.000000,
	3138.000000,
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("981f7682-f4d9-4aa1-8f2b-016141b62096",
	4500.000000,
	3138.000000,
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	"00000000-0000-0000-0000-000000000000",
	"abcb8c75-1a83-44a6-929d-41ff76e0579b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5264a374-08de-45e0-b37d-627dd7afda5f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5264a374-08de-45e0-b37d-627dd7afda5f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("06f8ccc3-0322-4278-a20d-24f6f3b3005a",
	"add817a6-d113-440b-b67e-22c7e2f3edba",
	"5264a374-08de-45e0-b37d-627dd7afda5f");
INSERT INTO GD_GE
	VALUES ("0a3587ef-413a-411d-bb34-8d16585fe30d",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"562053ae-1974-4f55-af78-a60944f82df2",
	41,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::TestByRefCalls');
INSERT INTO GD_SHP
	VALUES ("0a3587ef-413a-411d-bb34-8d16585fe30d");
INSERT INTO GD_NCS
	VALUES ("0a3587ef-413a-411d-bb34-8d16585fe30d");
INSERT INTO DIM_ND
	VALUES (192.000000,
	84.000000,
	"0a3587ef-413a-411d-bb34-8d16585fe30d");
INSERT INTO DIM_GE
	VALUES (4500.000000,
	3312.000000,
	"0a3587ef-413a-411d-bb34-8d16585fe30d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0a3587ef-413a-411d-bb34-8d16585fe30d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e7a4a1fc-50ee-4091-8b1a-009c24750dd1",
	4584.000000,
	3312.000000,
	"0a3587ef-413a-411d-bb34-8d16585fe30d");
INSERT INTO DIM_CON
	VALUES ("e613cc47-30b6-4d41-8979-da3a10ed29c7",
	4500.000000,
	3360.000000,
	"0a3587ef-413a-411d-bb34-8d16585fe30d");
INSERT INTO GD_GE
	VALUES ("79c78fd4-6504-40f1-a921-ad8d3741ce52",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"5d65cac0-a920-4689-a617-2c80bc036ec9",
	42,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::TestByValCalls::CHK1: run_test');
INSERT INTO GD_CON
	VALUES ("79c78fd4-6504-40f1-a921-ad8d3741ce52",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a0c87e0a-0c39-49db-b8d1-beeb7f9cb63f",
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a0c87e0a-0c39-49db-b8d1-beeb7f9cb63f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a0c87e0a-0c39-49db-b8d1-beeb7f9cb63f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a0c87e0a-0c39-49db-b8d1-beeb7f9cb63f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ae2e237d-d66c-4521-bd75-8d8721dedd08",
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (64.000000,
	38.000000,
	"ae2e237d-d66c-4521-bd75-8d8721dedd08");
INSERT INTO DIM_GE
	VALUES (4481.000000,
	3227.000000,
	"ae2e237d-d66c-4521-bd75-8d8721dedd08",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ae2e237d-d66c-4521-bd75-8d8721dedd08",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b9c605b6-07e6-4588-add5-5e46483750b7",
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b9c605b6-07e6-4588-add5-5e46483750b7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b9c605b6-07e6-4588-add5-5e46483750b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b9c605b6-07e6-4588-add5-5e46483750b7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d4befc61-6367-44d9-ae45-b79f93c03ba5",
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	"00000000-0000-0000-0000-000000000000",
	"892096c4-a073-4554-bcfd-83b598f5cde5",
	"94700cfc-5fc8-4d70-9570-87c65cec1e99");
INSERT INTO DIM_WAY
	VALUES ("892096c4-a073-4554-bcfd-83b598f5cde5",
	4584.000000,
	3180.000000,
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("94700cfc-5fc8-4d70-9570-87c65cec1e99",
	4584.000000,
	3312.000000,
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	"00000000-0000-0000-0000-000000000000",
	"892096c4-a073-4554-bcfd-83b598f5cde5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"79c78fd4-6504-40f1-a921-ad8d3741ce52",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("79c78fd4-6504-40f1-a921-ad8d3741ce52",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d9438957-793d-42ef-8f07-87730b4279a5",
	"e7a4a1fc-50ee-4091-8b1a-009c24750dd1",
	"79c78fd4-6504-40f1-a921-ad8d3741ce52");
INSERT INTO GD_GE
	VALUES ("fde86ef5-2416-4159-b5be-208546861a6a",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"15f73959-e11e-48a9-8707-a07ded62d154",
	41,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::Waiting to start');
INSERT INTO GD_SHP
	VALUES ("fde86ef5-2416-4159-b5be-208546861a6a");
INSERT INTO GD_NCS
	VALUES ("fde86ef5-2416-4159-b5be-208546861a6a");
INSERT INTO DIM_ND
	VALUES (168.000000,
	60.000000,
	"fde86ef5-2416-4159-b5be-208546861a6a");
INSERT INTO DIM_GE
	VALUES (4104.000000,
	2976.000000,
	"fde86ef5-2416-4159-b5be-208546861a6a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fde86ef5-2416-4159-b5be-208546861a6a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b1725469-de40-41b0-9e37-0d35be53e77e",
	4182.000000,
	3036.000000,
	"fde86ef5-2416-4159-b5be-208546861a6a");
INSERT INTO GD_GE
	VALUES ("a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"9057e3df-0ca5-441e-974a-4c612b435047",
	42,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::Waiting to start::CHK2: start');
INSERT INTO GD_CON
	VALUES ("a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f204f344-83a9-4e42-b7e6-b6e2f1d5c5ff",
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f204f344-83a9-4e42-b7e6-b6e2f1d5c5ff");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f204f344-83a9-4e42-b7e6-b6e2f1d5c5ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f204f344-83a9-4e42-b7e6-b6e2f1d5c5ff",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e2eb3871-2ac2-424a-bbb0-7ec0f095344c",
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (61.000000,
	36.000000,
	"e2eb3871-2ac2-424a-bbb0-7ec0f095344c");
INSERT INTO DIM_GE
	VALUES (4111.000000,
	3042.000000,
	"e2eb3871-2ac2-424a-bbb0-7ec0f095344c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e2eb3871-2ac2-424a-bbb0-7ec0f095344c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ceb94eb9-cf14-44a4-b609-3f1e5c6ed216",
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ceb94eb9-cf14-44a4-b609-3f1e5c6ed216");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ceb94eb9-cf14-44a4-b609-3f1e5c6ed216",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ceb94eb9-cf14-44a4-b609-3f1e5c6ed216",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("61b548c8-7f31-4e4a-ad57-8b2804b0253a",
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	"00000000-0000-0000-0000-000000000000",
	"af16a484-4005-4842-8a7c-07912175ef26",
	"57145340-828e-40ea-8794-70fd40a5aa8a");
INSERT INTO DIM_WAY
	VALUES ("af16a484-4005-4842-8a7c-07912175ef26",
	4182.000000,
	3036.000000,
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("57145340-828e-40ea-8794-70fd40a5aa8a",
	4182.000000,
	3084.000000,
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	"00000000-0000-0000-0000-000000000000",
	"af16a484-4005-4842-8a7c-07912175ef26");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a91ffb57-436d-4a17-a25e-e43c59ccc8f4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b1725469-de40-41b0-9e37-0d35be53e77e",
	"9f6f4b88-201c-4db6-b019-a80ea6ac9c19",
	"a91ffb57-436d-4a17-a25e-e43c59ccc8f4");
INSERT INTO GD_GE
	VALUES ("cc778a86-76ed-4fba-b2ef-fc5cd0007034",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"361bf40c-1300-4307-9e5e-e392df8f07a2",
	41,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::Misc');
INSERT INTO GD_SHP
	VALUES ("cc778a86-76ed-4fba-b2ef-fc5cd0007034");
INSERT INTO GD_NCS
	VALUES ("cc778a86-76ed-4fba-b2ef-fc5cd0007034");
INSERT INTO DIM_ND
	VALUES (216.000000,
	84.000000,
	"cc778a86-76ed-4fba-b2ef-fc5cd0007034");
INSERT INTO DIM_GE
	VALUES (4116.000000,
	3312.000000,
	"cc778a86-76ed-4fba-b2ef-fc5cd0007034",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc778a86-76ed-4fba-b2ef-fc5cd0007034",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2d56acee-b588-4512-b4fa-7a3479a3325b",
	4332.000000,
	3360.000000,
	"cc778a86-76ed-4fba-b2ef-fc5cd0007034");
INSERT INTO GD_GE
	VALUES ("0def4b3e-9730-4cce-979b-49f746ce42a6",
	"a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	"a1eef750-fc7c-4760-b95c-c72578a21404",
	42,
	0,
	'sdt_test::Test::CheckSDTs::Instance State Machine::TestByRefCalls::CHK1: run_test');
INSERT INTO GD_CON
	VALUES ("0def4b3e-9730-4cce-979b-49f746ce42a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c48e644a-5479-46c9-90ca-f3a57609d3a3",
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c48e644a-5479-46c9-90ca-f3a57609d3a3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c48e644a-5479-46c9-90ca-f3a57609d3a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c48e644a-5479-46c9-90ca-f3a57609d3a3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3cd77d4b-0ddc-4baf-8ac3-ff8e69e353d2",
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (61.000000,
	36.000000,
	"3cd77d4b-0ddc-4baf-8ac3-ff8e69e353d2");
INSERT INTO DIM_GE
	VALUES (4386.000000,
	3314.000000,
	"3cd77d4b-0ddc-4baf-8ac3-ff8e69e353d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3cd77d4b-0ddc-4baf-8ac3-ff8e69e353d2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8481cdfe-eb1e-4f10-91a6-c7a5425f7e06",
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8481cdfe-eb1e-4f10-91a6-c7a5425f7e06");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8481cdfe-eb1e-4f10-91a6-c7a5425f7e06",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8481cdfe-eb1e-4f10-91a6-c7a5425f7e06",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("6ef33a22-13b2-4ca9-879a-3523927645f4",
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	"00000000-0000-0000-0000-000000000000",
	"af70fb40-6663-44f4-a166-1ce8f89661bd",
	"fb1fbee0-604a-487d-9d9a-57c51931cbe5");
INSERT INTO DIM_WAY
	VALUES ("af70fb40-6663-44f4-a166-1ce8f89661bd",
	4500.000000,
	3360.000000,
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fb1fbee0-604a-487d-9d9a-57c51931cbe5",
	4332.000000,
	3360.000000,
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	"00000000-0000-0000-0000-000000000000",
	"af70fb40-6663-44f4-a166-1ce8f89661bd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0def4b3e-9730-4cce-979b-49f746ce42a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0def4b3e-9730-4cce-979b-49f746ce42a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e613cc47-30b6-4d41-8979-da3a10ed29c7",
	"2d56acee-b588-4512-b4fa-7a3479a3325b",
	"0def4b3e-9730-4cce-979b-49f746ce42a6");
INSERT INTO DIM_DIA
	VALUES ("a2d7419e-5ebe-4a7c-83d6-cb08b40a2b86",
	'',
	1.045058,
	4055.000000,
	2970.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ_PROXY
	VALUES ("3e6a8518-fb1a-412c-8bb7-8e3ddaf974d6",
	'CheckSDTs',
	2,
	'CHK',
	'',
	"00000000-0000-0000-0000-000000000000",
	'../CheckSDTs.xtuml');
