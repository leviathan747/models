-- BP 7.1 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	"06876d18-af65-4104-9393-7601846a6572",
	'Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("720a88c7-6941-4840-935e-f4aed6dffb01",
	112,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'sdt_test::Functions');
INSERT INTO DIM_DIA
	VALUES ("720a88c7-6941-4840-935e-f4aed6dffb01",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("6f3470fc-855f-4dbc-bc34-74710b6bbc62",
	"00000000-0000-0000-0000-000000000000",
	'setup',
	'',
	'//
// Check to see if any instances are already here.
// This would mean that we have restored from NVS
// or that preexisting instances were defined in data.
//

select any p from instances of P;

if( empty p )

  // Initialize
  LOG::LogInfo( message:"Did not find any PEI data, initializing NVS" );
  i = NVS::format();
  if( i != 0 )
    LOG::LogFailure( message:"Error formatting the NVS." );
  end if;
  i = NVS::version( first:1, second:2 );
  i =  NVS::checksum( first:1, second:2 );

  // Parents and their life
  create object instance p1 of P;
  assign p1.family.father = "Calvin''s Dad";
  assign p1.family.mother = "Calvin''s Mom";

  // assign a pet
  assign p1.family.Pets.name = "Garfield";
  assign p1.family.Pets.PetType = PetType::cat;
  assign p1.family.Pets.CareGiver = p1.family.mother;
  
  // Non-themed test class
  create object instance c1 of CHK;

  // Test control
  create object instance t1 of TC;

  // Commit everything
  i = PERSIST::commit();
  if( i != 0 )
    LOG::LogFailure( message:"Error commiting persistence information. Error code:" );
    LOG::LogInteger( message:i );
  end if;
else
  LOG::LogInfo( message:"Found PEI data." );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("6f3470fc-855f-4dbc-bc34-74710b6bbc62",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b2874817-4c7e-4178-b18d-40b06e44fe47",
	"00000000-0000-0000-0000-000000000000",
	'test',
	'',
	'// Kick off the check SDTs test sequence
select any c from instances of CHK;
generate CHK2:''start''() to c;

// Kick off the family test sequence
select any p from instances of P;
HOSP::delivery( current_family: p.family );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b2874817-4c7e-4178-b18d-40b06e44fe47",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dbde9a34-fc52-4ee4-b8de-4def34e0cd47",
	"00000000-0000-0000-0000-000000000000",
	'xit',
	'',
	'// Get rid of all instances, so the NVS is in a consistent state.
select many ps from instances of P;
for each p in ps
  delete object instance p;
end for;

select many cs from instances of CHK;
for each c in cs
  delete object instance c;
end for;

select many tcs from instances of TC;
for each tc in tcs
  delete object instance tc;
end for;

// Shut down.
ARCH::shutdown();',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("dbde9a34-fc52-4ee4-b8de-4def34e0cd47",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0e61067b-3cee-440b-8e37-68d83795920a",
	"00000000-0000-0000-0000-000000000000",
	'updateFamily',
	'',
	'// A constructs that just tests the language, not actually used
new_child = param.newFamily.child_1;

// Here''s the real work.  This select is overkill just to test syntax for SDTs
select any p1 from instances of P where selected.family.child_5 == "";
generate P2:''new_child''( updated_family: param.newFamily ) to p1;


',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7ef2d3cd-a829-4aff-bd3c-d826531fe088",
	"0e61067b-3cee-440b-8e37-68d83795920a",
	'newFamily',
	"2b818a69-890b-4e12-8677-99910eb56f19",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2b818a69-890b-4e12-8677-99910eb56f19",
	"00000000-0000-0000-0000-000000000000",
	'Family',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("0e61067b-3cee-440b-8e37-68d83795920a",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("02c348ad-b276-4acc-8c16-8f4684c7b795",
	"00000000-0000-0000-0000-000000000000",
	'checkDataDFByVal',
	'',
	'// Read SDT data
if ( param.data.a_integer == 1 )
  LOG::LogSuccess( message: "Successful read of SDT int member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT int member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_boolean == true )
  LOG::LogSuccess( message: "Successful read of SDT boolean member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT boolean member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of SDT date member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT date member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_real == 1.0 )
  LOG::LogSuccess( message: "Successful read of SDT real member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT real member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_string == "myData" )
  LOG::LogSuccess( message: "Successful read of SDT string member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT string member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_timestamp < TIM::current_clock() )
  LOG::LogSuccess( message: "Successful read of SDT timestamp member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT timestamp member in pass-by-val domain function." );
  ::failedChecksTest();
end if;

if ( param.data.a_integer == param.data.a_TypeContainer.a_integer
     and param.data.a_TypeContainer.a_integer == 1)
  LOG::LogSuccess( message: "Successful read of nested SDT int member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT int member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_boolean == param.data.a_TypeContainer.a_boolean 
     and param.data.a_TypeContainer.a_boolean == true)
  LOG::LogSuccess( message: "Successful read of nested SDT boolean member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT boolean member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_date == param.data.a_TypeContainer.a_date 
     and param.data.a_TypeContainer.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of nested SDT date member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT date member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_real == param.data.a_TypeContainer.a_real 
     and param.data.a_TypeContainer.a_real == 1.0)
  LOG::LogSuccess( message: "Successful read of nested SDT real member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT real member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_string == param.data.a_TypeContainer.a_string 
     and param.data.a_TypeContainer.a_string == "myData")
  LOG::LogSuccess( message: "Successful read of nested SDT string member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT string member in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_timestamp == param.data.a_TypeContainer.a_timestamp 
     and param.data.a_TypeContainer.a_timestamp < TIM::current_clock())
  LOG::LogSuccess( message: "Successful read of nested SDT timestamp member in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT timestamp member in pass-by-val domain function." );
  ::failedChecksTest();
end if;

localData = param.data;
return localData;',
	"3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("82264969-d237-4ef0-bde5-d461db0e06a9",
	"02c348ad-b276-4acc-8c16-8f4684c7b795",
	'data',
	"3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	"00000000-0000-0000-0000-000000000000",
	'TypeContainer',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("02c348ad-b276-4acc-8c16-8f4684c7b795",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("169bc853-1b5a-46f7-b664-83f091e1db4f",
	"00000000-0000-0000-0000-000000000000",
	'checkDataDFByRef',
	'',
	'// Read SDT data
if ( param.data.a_integer == 1 )
  LOG::LogSuccess( message: "Successful read of SDT int member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT int member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_boolean == true )
  LOG::LogSuccess( message: "Successful read of SDT boolean member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT boolean member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of SDT date member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT date member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_real == 1.0 )
  LOG::LogSuccess( message: "Successful read of SDT real member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT real member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_string == "myData" )
  LOG::LogSuccess( message: "Successful read of SDT string member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT string member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_timestamp < TIM::current_clock() )
  LOG::LogSuccess( message: "Successful read of SDT timestamp member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of SDT timestamp member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;


if ( param.data.a_integer == param.data.a_TypeContainer.a_integer
     and param.data.a_TypeContainer.a_integer == 1 )
  LOG::LogSuccess( message: "Successful read of nested SDT int member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT int member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_boolean == param.data.a_TypeContainer.a_boolean 
     and param.data.a_TypeContainer.a_boolean == true)
  LOG::LogSuccess( message: "Successful read of nested SDT boolean member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT boolean member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_date == param.data.a_TypeContainer.a_date 
     and param.data.a_TypeContainer.a_date == TIM::current_date() )
  LOG::LogSuccess( message: "Successful read of nested SDT date member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT date member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_real == param.data.a_TypeContainer.a_real 
     and param.data.a_TypeContainer.a_real == 1.0)
  LOG::LogSuccess( message: "Successful read of nested SDT real member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT real member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_string == param.data.a_TypeContainer.a_string 
     and param.data.a_TypeContainer.a_string == "myData")
  LOG::LogSuccess( message: "Successful read of nested SDT string member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT string member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data.a_timestamp == param.data.a_TypeContainer.a_timestamp 
     and param.data.a_TypeContainer.a_timestamp < TIM::current_clock())
  LOG::LogSuccess( message: "Successful read of nested SDT timestamp member in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of nested SDT timestamp member in pass-by-ref domain function." );
  ::failedChecksTest();
end if;


localData = param.data;
return localData;',
	"3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("578dad63-bc32-4001-a436-986897c26221",
	"169bc853-1b5a-46f7-b664-83f091e1db4f",
	'data',
	"3eedff8d-6bd5-4281-bbca-b076bc26e7be",
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("169bc853-1b5a-46f7-b664-83f091e1db4f",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f7ff8575-14d8-4ea9-bf72-6c74435ebd99",
	"00000000-0000-0000-0000-000000000000",
	'failedFamilyTest',
	'',
	'LOG::LogFailure( message: "Failed during the family test." );

// Tell test control we''re done
select any tc from instances of TC;
generate TC1:''completedFamilyTest''() to tc;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("f7ff8575-14d8-4ea9-bf72-6c74435ebd99",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4568e63d-0f18-4cdf-8550-6d826d7a6158",
	"00000000-0000-0000-0000-000000000000",
	'failedChecksTest',
	'',
	'LOG::LogFailure( message: "Failed during the checks test." );

// Tell test control we''re done
select any tc from instances of TC;
generate TC2:''completedChecksTest''() to tc;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("4568e63d-0f18-4cdf-8550-6d826d7a6158",
	1,
	"11092482-87cf-4a0f-8bc1-658340b4ad0e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("11092482-87cf-4a0f-8bc1-658340b4ad0e",
	1,
	"10c8da9e-f351-4241-b6a2-e3e488aa489f",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("10c8da9e-f351-4241-b6a2-e3e488aa489f",
	"06876d18-af65-4104-9393-7601846a6572",
	"06876d18-af65-4104-9393-7601846a6572",
	'sdt_test',
	'',
	0,
	'../sdt_test.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("06876d18-af65-4104-9393-7601846a6572",
	'sdt_test',
	1,
	'../../sdt_test.xtuml');
