-- BP 7.1 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

INSERT INTO SM_ISM
	VALUES ("19a5d5b1-f54d-43b3-8325-d356655568bd",
	"cdbdafcb-ee4b-42b1-a518-12477a870f8a");
INSERT INTO SM_SM
	VALUES ("19a5d5b1-f54d-43b3-8325-d356655568bd",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_EVTDI
	VALUES ("1b293950-59e1-410b-8c9a-37a46b32560a",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	'int',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	0,
	'Start',
	0,
	'',
	'D0',
	'');
INSERT INTO SM_LEVT
	VALUES ("dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Next',
	0,
	'',
	'D1',
	'');
INSERT INTO SM_LEVT
	VALUES ("4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Unassigned Parameter Placeholder',
	0,
	'',
	'D2',
	'');
INSERT INTO SM_STATE
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'Test Complete',
	7,
	1);
INSERT INTO SM_EIGN
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'Class Transform',
	3,
	0);
INSERT INTO SM_EIGN
	VALUES ("3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("68a66497-592c-48c6-8154-74dab88f9b5e",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'Instance Transform',
	8,
	0);
INSERT INTO SM_EIGN
	VALUES ("68a66497-592c-48c6-8154-74dab88f9b5e",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("68a66497-592c-48c6-8154-74dab88f9b5e",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("68a66497-592c-48c6-8154-74dab88f9b5e",
	"dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("68a66497-592c-48c6-8154-74dab88f9b5e",
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("68a66497-592c-48c6-8154-74dab88f9b5e",
	"4583f7a4-6bc1-4b8e-a44f-87e8bea425e8",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("92b1c249-ef7e-442f-8c15-c9b9f8cc33c7",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"68a66497-592c-48c6-8154-74dab88f9b5e",
	"dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("92b1c249-ef7e-442f-8c15-c9b9f8cc33c7",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CRTXN
	VALUES ("a456a782-bb30-4c61-825e-3c533b4e5747",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"28ecfa1f-fa8f-4807-a2a9-92c9b7a0b56c",
	"00000000-0000-0000-0000-000000280001");
INSERT INTO SM_TXN
	VALUES ("a456a782-bb30-4c61-825e-3c533b4e5747",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("266231da-f900-4e50-8382-e610cfd5b5c5",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"3240b526-e26f-4f94-a2bd-49d7b68956ee",
	"dd2a3fa1-e378-4f01-994e-66dd545b1e03",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("266231da-f900-4e50-8382-e610cfd5b5c5",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"68a66497-592c-48c6-8154-74dab88f9b5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("7638c56a-ae80-44f5-89ff-b92d4b6e0511",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"b35c1e55-6975-4b10-8f9e-5a04c0306ea7");
INSERT INTO SM_AH
	VALUES ("7638c56a-ae80-44f5-89ff-b92d4b6e0511",
	"19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_ACT
	VALUES ("7638c56a-ae80-44f5-89ff-b92d4b6e0511",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	1,
	'LOG::LogInfo(message:"Test complete");
ARCH::shutdown();',
	'');
INSERT INTO SM_MOAH
	VALUES ("b09e4489-6e6d-4ce9-acaa-ecabd18b3d29",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"3240b526-e26f-4f94-a2bd-49d7b68956ee");
INSERT INTO SM_AH
	VALUES ("b09e4489-6e6d-4ce9-acaa-ecabd18b3d29",
	"19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_ACT
	VALUES ("b09e4489-6e6d-4ce9-acaa-ecabd18b3d29",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	1,
	'LOG::LogInfo(message:"Starting transform tests");

int1 = 12;
int2 = 35;
int3 = INT::r_int(ref:int1, val:int2);
if (int1 == 24) LOG::LogSuccess(message:"Operation INT::int successfully modified ref parameter");
else LOG::LogFailure(message:"Operation INT::int did not successfully modify ref parameter");
end if;
if (int2 == 35) LOG::LogSuccess(message:"Operation INT::int did not modify val parameter");
else LOG::LogFailure(message:"Operation INT::int modified val paramter");
end if;
if (int3 == 35) LOG::LogSuccess(message:"Operation INT::int returned correct value");
else LOG::LogFailure(message:"Operation INT::int did not return correct value");
end if;
int1 = 12;
int2 = 35;
int3 = INT::uInt(ref:int1, val:int2);
if (int1 == 24) LOG::LogSuccess(message:"Operation INT::uInt successfully modified ref parameter");
else LOG::LogFailure(message:"Operation INT::uInt did not successfully modify ref parameter");
end if;
if (int2 == 35) LOG::LogSuccess(message:"Operation INT::uInt did not modify val parameter");
else LOG::LogFailure(message:"Operation INT::uInt modified val paramter");
end if;
if (int3 == 35) LOG::LogSuccess(message:"Operation INT::uInt returned correct value");
else LOG::LogFailure(message:"Operation INT::uInt did not return correct value");
end if;

real1 = 12.4;
real2 = 35.2;
real3 = REAL::r_real(ref:real1, val:real2);
if (real1 == 24.8) LOG::LogSuccess(message:"Operation REAL::real successfully modified ref parameter");
else LOG::LogFailure(message:"Operation REAL::real did not successfully modify ref parameter");
end if;
if (real2 == 35.2) LOG::LogSuccess(message:"Operation REAL::real did not modify val parameter");
else LOG::LogFailure(message:"Operation REAL::real modified val paramter");
end if;
if (real3 == 35.2) LOG::LogSuccess(message:"Operation REAL::real returned correct value");
else LOG::LogFailure(message:"Operation REAL::real did not return correct value");
end if;
real1 = 12.4;
real2 = 35.2;
real3 = REAL::uReal(ref:real1, val:real2);
if (real1 == 24.8) LOG::LogSuccess(message:"Operation REAL::uReal successfully modified ref parameter");
else LOG::LogFailure(message:"Operation REAL::uReal did not successfully modify ref parameter");
end if;
if (real2 == 35.2) LOG::LogSuccess(message:"Operation REAL::uReal did not modify val parameter");
else LOG::LogFailure(message:"Operation REAL::uReal modified val paramter");
end if;
if (real3 == 35.2) LOG::LogSuccess(message:"Operation REAL::uReal returned correct value");
else LOG::LogFailure(message:"Operation REAL::uReal did not return correct value");
end if;

bool1 = true;
bool2 = false;
bool3 = BOOL::r_bool(ref:bool1, val:bool2);
if (bool1 == false) LOG::LogSuccess(message:"Operation BOOL::bool successfully modified ref parameter");
else LOG::LogFailure(message:"Operation BOOL::bool did not successfully modify ref parameter");
end if;
if (bool2 == false) LOG::LogSuccess(message:"Operation BOOL::bool did not modify val parameter");
else LOG::LogFailure(message:"Operation BOOL::bool modified val paramter");
end if;
if (bool3 == false) LOG::LogSuccess(message:"Operation BOOL::bool returned correct value");
else LOG::LogFailure(message:"Operation BOOL::bool did not return correct value");
end if;
bool1 = true;
bool2 = false;
bool3 = BOOL::uBool(ref:bool1, val:bool2);
if (bool1 == false) LOG::LogSuccess(message:"Operation BOOL::uBbool successfully modified ref parameter");
else LOG::LogFailure(message:"Operation BOOL::uBool did not successfully modify ref parameter");
end if;
if (bool2 == false) LOG::LogSuccess(message:"Operation BOOL::uBool did not modify val parameter");
else LOG::LogFailure(message:"Operation BOOL::uBool modified val paramter");
end if;
if (bool3 == false) LOG::LogSuccess(message:"Operation BOOL::uBool returned correct value");
else LOG::LogFailure(message:"Operation BOOL::uBool did not return correct value");
end if;

str1 = "one";
str2 = "two";
str3 = STR::string(ref:str1, val:str2);
if (str1 == "New string") LOG::LogSuccess(message:"Operation STR::string successfully modified ref parameter");
else LOG::LogFailure(message:"Operation STR::string did not successfully modify ref parameter");
end if;
if (str2 == "two") LOG::LogSuccess(message:"Operation STR::string did not modify val parameter");
else LOG::LogFailure(message:"Operation STR::string modified val paramter");
end if;
if (str3 == "two") LOG::LogSuccess(message:"Operation STR::string returned correct value");
else LOG::LogFailure(message:"Operation STR::string did not return correct value");
end if;
str1 = "one";
str2 = "two";
str3 = STR::uString(ref:str1, val:str2);
if (str1 == "New string") LOG::LogSuccess(message:"Operation STR::uString successfully modified ref parameter");
else LOG::LogFailure(message:"Operation STR::uString did not successfully modify ref parameter");
end if;
if (str2 == "two") LOG::LogSuccess(message:"Operation STR::uString did not modify val parameter");
else LOG::LogFailure(message:"Operation STR::uString modified val paramter");
end if;
if (str3 == "two") LOG::LogSuccess(message:"Operation STR::uString returned correct value");
else LOG::LogFailure(message:"Operation STR::uString did not return correct value");
end if;

select any inst from instances of INST;
create event instance e1 of INST1 to inst;
create event instance e2 of INST2(int:65) to inst;
if (e1 == e1)
	inst1 = e1;
	inst2 = e2;
	inst3 = INST::inst(ref:inst1, val:inst2);
	if (inst1 == e2) LOG::LogSuccess(message:"Operation INST::inst successfully modified ref parameter");
	else LOG::LogFailure(message:"Operation INST::inst did not successfully modify ref parameter");
	end if;
	if (inst2 == e2) LOG::LogSuccess(message:"Operation INST::inst did not modify val parameter");
	else LOG::LogFailure(message:"Operation INST::inst modified val paramter");
	end if;
	if (inst3 == e1) LOG::LogSuccess(message:"Operation INST::inst returned correct value");
	else LOG::LogFailure(message:"Operation INST::inst did not return correct value");
	end if;
else
	LOG::LogFailure(message:"Cannot compare events");
end if;

select any iref from instances of IREF;
timer1 = TIM::timer_start(microseconds:10000, event_inst:e1);
timer2 = TIM::timer_start(microseconds:100000000, event_inst:e2);
t = TIM::timer_cancel(timer_inst_ref:iref.one);
iref.one = timer1;
timer_val = timer2;
timer_returned = IREF::inst_ref(ref:iref.one, val:timer_val);
if (timer_returned == timer1) LOG::LogSuccess(message:"Operation IREF::inst_ref returned correct value");
else LOG::LogFailure(message:"Operation IREF::inst_ref returned incorrect value");
end if;
if (iref.one == timer2) LOG::LogSuccess(message:"Operation IREF::inst_ref correctly modified ref variable");
else LOG::LogFailure(message:"Operation IREF:: inst_ref did not correctly modify ref variable");
end if;
if (timer_val == timer2) LOG::LogSuccess(message:"Operation IREF::inst_ref did not modify val variable");
else LOG::LogFailure(message:"Operation IREF::inst_ref modified value of val variable");
end if; 
t = TIM::timer_cancel(timer_inst_ref:timer1);

d1 = TIM::create_date(day:1, month:1, year:2001, second:0, minute:0, hour:12);
d2 = TIM::create_date(day:14, month:8, year:1977, second:1, minute:1, hour:1); 
d3 = TIM::create_date(day:14, month:8, year:1978, second:1, minute:1, hour:1); 
date1 = d1;
date2 = d2;
date3 = DT::date(ref:date1, val:date2);
if (date1 == d3) LOG::LogSuccess(message:"Operation DT::date successfully modified ref parameter");
else LOG::LogFailure(message:"Operation DT::date did not successfully modify ref parameter");
end if;
if (date2 == d2) LOG::LogSuccess(message:"Operation DT::date did not modify val parameter");
else LOG::LogFailure(message:"Operation DT::date modified val paramter");
end if;
if (date3 == d2) LOG::LogSuccess(message:"Operation DT::date returned correct value");
else LOG::LogFailure(message:"Operation DT::date did not return correct value");
end if;

c1 = TIM::current_clock();
c2 = TIM::current_clock();
time1 = c1;
time2 = c2;
time3 = DT::time(ref:time1, val:time2);
if (time1 == c2) LOG::LogSuccess(message:"Operation DT::time successfully modified ref parameter");
else LOG::LogFailure(message:"Operation DT::time did not successfully modify ref parameter");
end if;
if (time2 == c2) LOG::LogSuccess(message:"Operation DT::time did not modify val parameter");
else LOG::LogFailure(message:"Operation DT::time modified val paramter");
end if;
if (time3 == c2) LOG::LogSuccess(message:"Operation DT::time returned correct value");
else LOG::LogFailure(message:"Operation DT::time did not return correct value");
end if;

select any uni from instances of UNI;
uni1 = uni.one;
uni2 = uni.two;
uni3 = UNI::unique(ref:uni1, val:uni2);
if (uni1 == uni.two) LOG::LogSuccess(message:"Operation UNI::unique successfully modified ref parameter");
else LOG::LogFailure(message:"Operation UNI::unique did not successfully modify ref parameter");
end if;
if (uni2 == uni.two) LOG::LogSuccess(message:"Operation UNI::unique did not modify val parameter");
else LOG::LogFailure(message:"Operation UNI::unique modified val paramter");
end if;
if (uni3 == uni.one) LOG::LogSuccess(message:"Operation UNI::unique returned correct value");
else LOG::LogFailure(message:"Operation UNI::unique did not return correct value");
end if;
uni1 = uni.one;
uni2 = uni.two;
uni3 = UNI::uUnique(ref:uni1, val:uni2);
if (uni1 == uni.two) LOG::LogSuccess(message:"Operation UNI::uUnique successfully modified ref parameter");
else LOG::LogFailure(message:"Operation UNI::uUnique did not successfully modify ref parameter");
end if;
if (uni2 == uni.two) LOG::LogSuccess(message:"Operation UNI::uUnique did not modify val parameter");
else LOG::LogFailure(message:"Operation UNI::uUnique modified val paramter");
end if;
if (uni3 == uni.one) LOG::LogSuccess(message:"Operation UNI::uUnique returned correct value");
else LOG::LogFailure(message:"Operation UNI::uUnique did not return correct value");
end if;

color1 = color::green;
color2 = color::purple;
color3 = ENUM::color3(ref:color1, val:color2);
if (color1 == color::purple) LOG::LogSuccess(message:"Operation ENUM::color3 successfully modified ref parameter");
else LOG::LogFailure(message:"Operation ENUM::color3 did not successfully modify ref parameter");
end if;
if (color2 == color::purple) LOG::LogSuccess(message:"Operation ENUM::color3 did not modify val parameter");
else LOG::LogFailure(message:"Operation ENUM::color3 modified val paramter");
end if;
if (color3 == color::green) LOG::LogSuccess(message:"Operation ENUM::color3 returned correct value");
else LOG::LogFailure(message:"Operation ENUM::color3 did not return correct value");
end if;
number1 = number::three;
number2 = number::one;
number3 = ENUM::size3(ref:number1, val:number2);
if (number1 == number::two) LOG::LogSuccess(message:"Operation ENUM::size3 successfully modified ref parameter");
else LOG::LogFailure(message:"Operation ENUM::size3 did not successfully modify ref parameter");
end if;
if (number2 == number::one) LOG::LogSuccess(message:"Operation ENUM::size3 did not modify val parameter");
else LOG::LogFailure(message:"Operation ENUM::size3 modified val paramter");
end if;
if (number3 == number::one) LOG::LogSuccess(message:"Operation ENUM::size3 returned correct value");
else LOG::LogFailure(message:"Operation ENUM::size3 did not return correct value");
end if;

LOG::LogInfo(message:"Transform tests complete");
generate D1 to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("0af3cf3e-2d13-45e5-b919-5d0d32b052ca",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"68a66497-592c-48c6-8154-74dab88f9b5e");
INSERT INTO SM_AH
	VALUES ("0af3cf3e-2d13-45e5-b919-5d0d32b052ca",
	"19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_ACT
	VALUES ("0af3cf3e-2d13-45e5-b919-5d0d32b052ca",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	1,
	'LOG::LogInfo(message:"Starting instance-based transform tests");

select any int from instances of INT where selected.width == 5;
create object instance int_other of INT;  int_other.width = 8;  int_other.length = 3;
int1 = 12;
int2 = 35;
int3 = int.r_int_i(ref:int1, val:int2);
if (int1 == 24) LOG::LogSuccess(message:"Operation INT.int_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation INT.int_i did not successfully modify ref parameter");
end if;
if (int2 == 35) LOG::LogSuccess(message:"Operation INT.int_i did not modify val parameter");
else LOG::LogFailure(message:"Operation INT.int_i modified val paramter");
end if;
if (int3 == 40) LOG::LogSuccess(message:"Operation INT.int_i returned correct value");
else LOG::LogFailure(message:"Operation INT.int_i did not return correct value");
end if;
int1 = 12;
int2 = 35;
int3 = int.uInt_i(ref:int1, val:int2);
if (int1 == 24) LOG::LogSuccess(message:"Operation INT.uInt_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation INT.uInt_i did not successfully modify ref parameter");
end if;
if (int2 == 35) LOG::LogSuccess(message:"Operation INT.uInt_i did not modify val parameter");
else LOG::LogFailure(message:"Operation INT.uInt_i modified val paramter");
end if;
if (int3 == 40) LOG::LogSuccess(message:"Operation INT.uInt_i returned correct value");
else LOG::LogFailure(message:"Operation INT.uInt_i did not return correct value");
end if;

select any real from instances of REAL where selected.width == 1.3;
real1 = 12.4;
real2 = 35.2;
real3 = real.r_real_i(ref:real1, val:real2);
if (real1 == 24.8) LOG::LogSuccess(message:"Operation REAL.real_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation REAL.real_i did not successfully modify ref parameter");
end if;
if (real2 == 35.2) LOG::LogSuccess(message:"Operation REA.real_i did not modify val parameter");
else LOG::LogFailure(message:"Operation REAL.real_i modified val paramter");
end if;
if (real3 == 36.5) LOG::LogSuccess(message:"Operation REAL.real_i returned correct value");
else LOG::LogFailure(message:"Operation REAL.real_i did not return correct value");
end if;
real1 = 12.4;
real2 = 35.2;
real3 = real.uReal_i(ref:real1, val:real2);
if (real1 == 24.8) LOG::LogSuccess(message:"Operation REAL.uReal_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation REAL.uReal_i did not successfully modify ref parameter");
end if;
if (real2 == 35.2) LOG::LogSuccess(message:"Operation REAL.uReal_i did not modify val parameter");
else LOG::LogFailure(message:"Operation REAL.uReal_i modified val paramter");
end if;
if (real3 == 36.5) LOG::LogSuccess(message:"Operation REAL.uReal_i returned correct value");
else LOG::LogFailure(message:"Operation REAL.uReal_i did not return correct value");
end if;

select any bool from instances of BOOL where selected.p == true;
create object instance bool_other of BOOL;  bool_other.p = false; bool_other.q = true;
bool1 = true;
bool2 = false;
bool3 = bool.r_bool_i(ref:bool1, val:bool2);
if (bool1 == false) LOG::LogSuccess(message:"Operation BOOL.bool_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation BOOL.bool_i did not successfully modify ref parameter");
end if;
if (bool2 == false) LOG::LogSuccess(message:"Operation BOOL.bool_i did not modify val parameter");
else LOG::LogFailure(message:"Operation BOOL.bool_i modified val paramter");
end if;
if (bool3 == false) LOG::LogSuccess(message:"Operation BOOL.bool_i returned correct value");
else LOG::LogFailure(message:"Operation BOOL.bool_i did not return correct value");
end if;
bool1 = true;
bool2 = false;
bool3 = bool.uBool_i(ref:bool1, val:bool2);
if (bool1 == false) LOG::LogSuccess(message:"Operation BOOL.uBbool_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation BOOL.uBool_i did not successfully modify ref parameter");
end if;
if (bool2 == false) LOG::LogSuccess(message:"Operation BOOL.uBool_i did not modify val parameter");
else LOG::LogFailure(message:"Operation BOOL.uBool_i modified val paramter");
end if;
if (bool3 == false) LOG::LogSuccess(message:"Operation BOOL.uBool_i returned correct value");
else LOG::LogFailure(message:"Operation BOOL.uBool_i did not return correct value");
end if;

select any string from instances of STR where selected.first == "First";
create object instance str_other of STR;  str_other.first = "FIRST";  str_other.last = "LAST";
str1 = "one";
str2 = "two";
str3 = string.string_i(ref:str1, val:str2);
if (str1 == "New stringFirst") LOG::LogSuccess(message:"Operation STR.string_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation STR.string_i did not successfully modify ref parameter");
end if;
if (str2 == "two") LOG::LogSuccess(message:"Operation STR.string_i did not modify val parameter");
else LOG::LogFailure(message:"Operation STR.string_i modified val paramter");
end if;
if (str3 == "two") LOG::LogSuccess(message:"Operation STR.string_i returned correct value");
else LOG::LogFailure(message:"Operation STR.string_i did not return correct value");
end if;
str1 = "one";
str2 = "two";
str3 = string.uString_i(ref:str1, val:str2);
if (str1 == "New stringFirst") LOG::LogSuccess(message:"Operation STR.uString_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation STR.uString_i did not successfully modify ref parameter");
end if;
if (str2 == "two") LOG::LogSuccess(message:"Operation STR.uString_i did not modify val parameter");
else LOG::LogFailure(message:"Operation STR.uString_i modified val paramter");
end if;
if (str3 == "two") LOG::LogSuccess(message:"Operation STR.uString_i returned correct value");
else LOG::LogFailure(message:"Operation STR.uString_i did not return correct value");
end if;

select any inst from instances of INST;
create event instance e1 of INST1 to inst;
create event instance e2 of INST2(int:65) to inst;
create object instance inst_other of INST;  inst_other.one = e2;  inst_other.two = e1;
if (e1 == e1)
	inst1 = e1;
	inst2 = e2;
	inst3 = inst.inst_i(ref:inst1, val:inst2);
	if (inst1 == e2) LOG::LogSuccess(message:"Operation INST.inst_i successfully modified ref parameter");
	else LOG::LogFailure(message:"Operation INST.inst_i did not successfully modify ref parameter");
	end if;
	if (inst2 == e2) LOG::LogSuccess(message:"Operation INST.inst_i did not modify val parameter");
	else LOG::LogFailure(message:"Operation INST.inst_i modified val paramter");
	end if;
	if (inst3 == inst.one_one) LOG::LogSuccess(message:"Operation INST.inst_i returned correct value");
	else LOG::LogFailure(message:"Operation INST.inst_i did not return correct value");
	end if;
else
	LOG::LogFailure(message:"Cannot compare events");
end if;

select any iref from instances of IREF;
timer1 = TIM::timer_start(microseconds:10000, event_inst:e1);
timer2 = TIM::timer_start(microseconds:100000000, event_inst:e2);
t = TIM::timer_cancel(timer_inst_ref:iref.one_one);
iref.one_one = timer1;
timer_ref = timer1;
timer_val = timer2;
timer_returned = iref.inst_ref_i(ref:timer_ref, val:timer_val);
if (timer_returned == timer1) LOG::LogSuccess(message:"Operation IREF.inst_ref_i returned correct value");
else LOG::LogFailure(message:"Operation IREF.inst_ref_i returned incorrect value");
end if;
if (timer_ref == timer2) LOG::LogSuccess(message:"Operation IREF.inst_ref_i correctly modified ref variable");
else LOG::LogFailure(message:"Operation IREF.inst_ref_i did not correctly modify ref variable");
end if;
if (timer_val == timer2) LOG::LogSuccess(message:"Operation IREF.inst_ref_i did not modify val variable");
else LOG::LogFailure(message:"Operation IREF.inst_ref_i modified value of val variable");
end if; 
t = TIM::timer_cancel(timer_inst_ref:timer1);
t = TIM::timer_cancel(timer_inst_ref:timer2);

select any dt from instances of DT;
d1 = TIM::create_date(day:1, month:1, year:2001, second:0, minute:0, hour:12);
d2 = TIM::create_date(day:14, month:8, year:1977, second:1, minute:1, hour:1); 
d3 = TIM::create_date(day:14, month:8, year:1978, second:0, minute:0, hour:12); 
create object instance dt_other of DT;  dt_other.date = d3;  dt_other.time = TIM::current_clock();
date1 = d1;
date2 = d2;
date3 = dt.date_i(ref:date1, val:date2);
if (date1 == d3) LOG::LogSuccess(message:"Operation DT.date_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation DT.date_i did not successfully modify ref parameter");
end if;
if (date2 == d2) LOG::LogSuccess(message:"Operation DT.date_i did not modify val parameter");
else LOG::LogFailure(message:"Operation DT.date_i modified val paramter");
end if;
if (date3 == d2) LOG::LogSuccess(message:"Operation DT.date_i returned correct value");
else LOG::LogFailure(message:"Operation DT.date_i did not return correct value");
end if;

c1 = TIM::current_clock();
c2 = TIM::current_clock();
time1 = c1;
time2 = c2;
time3 = dt.time_i(ref:time1, val:time2);
if (time1 == c2) LOG::LogSuccess(message:"Operation DT.time_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation DT.time_i did not successfully modify ref parameter");
end if;
if (time2 == c2) LOG::LogSuccess(message:"Operation DT.time_i did not modify val parameter");
else LOG::LogFailure(message:"Operation DT.time_i modified val paramter");
end if;
if (time3 == dt.time) LOG::LogSuccess(message:"Operation DT.time_i returned correct value");
else LOG::LogFailure(message:"Operation DT.time_i did not return correct value");
end if;

select any uni from instances of UNI;
create object instance uni_other of UNI;
uni1 = uni.two;
uni2 = uni.one;
uni3 = uni.unique_i(ref:uni1, val:uni2);
if (uni1 == uni.one) LOG::LogSuccess(message:"Operation UNI.unique_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation UNI.unique_i did not successfully modify ref parameter");
end if;
if (uni2 == uni.one) LOG::LogSuccess(message:"Operation UNI.unique_i did not modify val parameter");
else LOG::LogFailure(message:"Operation UNI.unique_i modified val paramter");
end if;
if (uni3 == uni.one) LOG::LogSuccess(message:"Operation UNI.unique_i returned correct value");
else LOG::LogFailure(message:"Operation UNI.unique_i did not return correct value");
end if;
uni1 = uni.two;
uni2 = uni.one;
uni3 = uni.uUnique_i(ref:uni1, val:uni2);
if (uni1 == uni.one) LOG::LogSuccess(message:"Operation UNI.uUnique_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation UNI.uUnique_i did not successfully modify ref parameter");
end if;
if (uni2 == uni.one) LOG::LogSuccess(message:"Operation UNI.uUnique_i did not modify val parameter");
else LOG::LogFailure(message:"Operation UNI.uUnique_i modified val paramter");
end if;
if (uni3 == uni.two) LOG::LogSuccess(message:"Operation UNI.uUnique_i returned correct value");
else LOG::LogFailure(message:"Operation UNI.uUnique_i did not return correct value");
end if;

//LOG::LogFailure(message:"Cannot return an enum from an instance operation");
select any enum from instances of ENUM;
create object instance enum_other of ENUM;  enum_other.color = color::blue;  enum_other.size = number::five;
color1 = color::green;
color2 = color::red;
color3 = enum.color_i(ref:color1, val:color2);
if (color1 == color::red) LOG::LogSuccess(message:"Operation ENUM.color_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation ENUM.color_i did not successfully modify ref parameter");
end if;
if (color2 == color::red) LOG::LogSuccess(message:"Operation ENUM.color_i did not modify val parameter");
else LOG::LogFailure(message:"Operation ENUM.color_i modified val paramter");
end if;
if (color3 == color::purple) LOG::LogSuccess(message:"Operation ENUM.color_i returned correct value");
else LOG::LogFailure(message:"Operation ENUM.color_i did not return correct value");
end if;
number1 = number::two;
number2 = number::one;
number3 = enum.size_i(ref:number1, val:number2);
if (number1 == number::one) LOG::LogSuccess(message:"Operation ENUM.size_i successfully modified ref parameter");
else LOG::LogFailure(message:"Operation ENUM.size_i did not successfully modify ref parameter");
end if;
if (number2 == number::one) LOG::LogSuccess(message:"Operation ENUM.size_i did not modify val parameter");
else LOG::LogFailure(message:"Operation ENUM.size_i modified val paramter");
end if;
if (number3 == number::three) LOG::LogSuccess(message:"Operation ENUM.size_i returned correct value");
else LOG::LogFailure(message:"Operation ENUM.size_i did not return correct value");
end if;

LOG::LogInfo(message:"Transform tests complete");
generate D1 to self;',
	'');
INSERT INTO SM_TAH
	VALUES ("2341ee82-9b7d-4030-b4eb-28991b22aa73",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"92b1c249-ef7e-442f-8c15-c9b9f8cc33c7");
INSERT INTO SM_AH
	VALUES ("2341ee82-9b7d-4030-b4eb-28991b22aa73",
	"19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_ACT
	VALUES ("2341ee82-9b7d-4030-b4eb-28991b22aa73",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("e45e6492-8559-40ae-9632-a6ea8d2560d9",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"a456a782-bb30-4c61-825e-3c533b4e5747");
INSERT INTO SM_AH
	VALUES ("e45e6492-8559-40ae-9632-a6ea8d2560d9",
	"19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_ACT
	VALUES ("e45e6492-8559-40ae-9632-a6ea8d2560d9",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("6891a9cc-1044-4fc9-9ead-cbea8faae5ef",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	"266231da-f900-4e50-8382-e610cfd5b5c5");
INSERT INTO SM_AH
	VALUES ("6891a9cc-1044-4fc9-9ead-cbea8faae5ef",
	"19a5d5b1-f54d-43b3-8325-d356655568bd");
INSERT INTO SM_ACT
	VALUES ("6891a9cc-1044-4fc9-9ead-cbea8faae5ef",
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	1,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("b339a27d-d400-41dd-8612-00f7cd61bf04",
	8,
	"19a5d5b1-f54d-43b3-8325-d356655568bd",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'trans::Drivers::Driver::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("34d254da-cbba-4c34-a9f5-4fbc50b9f92b",
	"b339a27d-d400-41dd-8612-00f7cd61bf04",
	"b35c1e55-6975-4b10-8f9e-5a04c0306ea7",
	41,
	0,
	'trans::Drivers::Driver::Instance State Machine::Test Complete');
INSERT INTO GD_SHP
	VALUES ("34d254da-cbba-4c34-a9f5-4fbc50b9f92b");
INSERT INTO GD_NCS
	VALUES ("34d254da-cbba-4c34-a9f5-4fbc50b9f92b");
INSERT INTO DIM_ND
	VALUES (512.000000,
	80.000000,
	"34d254da-cbba-4c34-a9f5-4fbc50b9f92b");
INSERT INTO DIM_GE
	VALUES (2368.000000,
	2256.000000,
	"34d254da-cbba-4c34-a9f5-4fbc50b9f92b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34d254da-cbba-4c34-a9f5-4fbc50b9f92b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("726b4307-a5dc-4d7f-ab0f-37c94ab8809f",
	2368.000000,
	2304.000000,
	"34d254da-cbba-4c34-a9f5-4fbc50b9f92b");
INSERT INTO GD_GE
	VALUES ("56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c",
	"b339a27d-d400-41dd-8612-00f7cd61bf04",
	"3240b526-e26f-4f94-a2bd-49d7b68956ee",
	41,
	0,
	'trans::Drivers::Driver::Instance State Machine::Class Transform');
INSERT INTO GD_SHP
	VALUES ("56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c");
INSERT INTO GD_NCS
	VALUES ("56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c");
INSERT INTO DIM_ND
	VALUES (512.000000,
	416.000000,
	"56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c");
INSERT INTO DIM_GE
	VALUES (2369.000000,
	1786.000000,
	"56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f24c0a62-e3b3-4b8d-9a44-e320ba1fe46a",
	2624.000000,
	1786.000000,
	"56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c");
INSERT INTO DIM_CON
	VALUES ("4a66a121-ec5f-4ce0-b855-1d8d40590b02",
	2369.000000,
	2160.000000,
	"56c2109d-8fa8-40a9-9d0e-2d4b7d3e729c");
INSERT INTO GD_GE
	VALUES ("ea86db7e-0fbb-4a53-ac07-6407a326a5e3",
	"b339a27d-d400-41dd-8612-00f7cd61bf04",
	"68a66497-592c-48c6-8154-74dab88f9b5e",
	41,
	0,
	'trans::Drivers::Driver::Instance State Machine::Instance Transform');
INSERT INTO GD_SHP
	VALUES ("ea86db7e-0fbb-4a53-ac07-6407a326a5e3");
INSERT INTO GD_NCS
	VALUES ("ea86db7e-0fbb-4a53-ac07-6407a326a5e3");
INSERT INTO DIM_ND
	VALUES (512.000000,
	416.000000,
	"ea86db7e-0fbb-4a53-ac07-6407a326a5e3");
INSERT INTO DIM_GE
	VALUES (1792.000000,
	2251.000000,
	"ea86db7e-0fbb-4a53-ac07-6407a326a5e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ea86db7e-0fbb-4a53-ac07-6407a326a5e3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e6c0bb96-f11b-4811-96eb-f25ac214277e",
	2304.000000,
	2304.000000,
	"ea86db7e-0fbb-4a53-ac07-6407a326a5e3");
INSERT INTO DIM_CON
	VALUES ("cc67c459-b747-4bda-8127-8c2a4910e754",
	2256.000000,
	2251.000000,
	"ea86db7e-0fbb-4a53-ac07-6407a326a5e3");
INSERT INTO GD_GE
	VALUES ("18d52efd-291c-472f-8df0-34a22cf1565c",
	"b339a27d-d400-41dd-8612-00f7cd61bf04",
	"92b1c249-ef7e-442f-8c15-c9b9f8cc33c7",
	42,
	0,
	'trans::Drivers::Driver::Instance State Machine::Instance Transform::D1: Next');
INSERT INTO GD_CON
	VALUES ("18d52efd-291c-472f-8df0-34a22cf1565c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("544f5e22-0176-4224-b7d7-2e9910d0f94c",
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"544f5e22-0176-4224-b7d7-2e9910d0f94c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"544f5e22-0176-4224-b7d7-2e9910d0f94c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("544f5e22-0176-4224-b7d7-2e9910d0f94c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("02bd8600-1d93-46bc-b30d-ca52680cf226",
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	3,
	-20.000000,
	-26.000000);
INSERT INTO DIM_ND
	VALUES (117.000000,
	18.000000,
	"02bd8600-1d93-46bc-b30d-ca52680cf226");
INSERT INTO DIM_GE
	VALUES (2316.000000,
	2278.000000,
	"02bd8600-1d93-46bc-b30d-ca52680cf226",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("02bd8600-1d93-46bc-b30d-ca52680cf226",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("63ab1a77-f9fc-4fba-b979-0a179c8d20d4",
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"63ab1a77-f9fc-4fba-b979-0a179c8d20d4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"63ab1a77-f9fc-4fba-b979-0a179c8d20d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("63ab1a77-f9fc-4fba-b979-0a179c8d20d4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("03655f16-13d8-46c0-b7de-b88974bcb474",
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	"00000000-0000-0000-0000-000000000000",
	"c5476586-b319-4ee8-927d-b28dad554034",
	"f6b0b464-2512-4387-ad3c-8e1743ff4086");
INSERT INTO DIM_WAY
	VALUES ("c5476586-b319-4ee8-927d-b28dad554034",
	2304.000000,
	2304.000000,
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f6b0b464-2512-4387-ad3c-8e1743ff4086",
	2368.000000,
	2304.000000,
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	"00000000-0000-0000-0000-000000000000",
	"c5476586-b319-4ee8-927d-b28dad554034");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"18d52efd-291c-472f-8df0-34a22cf1565c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18d52efd-291c-472f-8df0-34a22cf1565c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e6c0bb96-f11b-4811-96eb-f25ac214277e",
	"726b4307-a5dc-4d7f-ab0f-37c94ab8809f",
	"18d52efd-291c-472f-8df0-34a22cf1565c");
INSERT INTO GD_GE
	VALUES ("eb03e69a-768a-4595-8f7d-2d3791598e13",
	"b339a27d-d400-41dd-8612-00f7cd61bf04",
	"a456a782-bb30-4c61-825e-3c533b4e5747",
	49,
	0,
	'D0: Start');
INSERT INTO GD_CON
	VALUES ("eb03e69a-768a-4595-8f7d-2d3791598e13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9d566783-9b7c-49c9-bc14-2af115fff32f",
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9d566783-9b7c-49c9-bc14-2af115fff32f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9d566783-9b7c-49c9-bc14-2af115fff32f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9d566783-9b7c-49c9-bc14-2af115fff32f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ff409a7b-9239-4856-a0b0-ba53122e1640",
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	3,
	0.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (127.000000,
	24.000000,
	"ff409a7b-9239-4856-a0b0-ba53122e1640");
INSERT INTO DIM_GE
	VALUES (2491.000000,
	1739.000000,
	"ff409a7b-9239-4856-a0b0-ba53122e1640",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ff409a7b-9239-4856-a0b0-ba53122e1640",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1a0f9336-22a1-4c9b-bbc7-48ef38dc9787",
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1a0f9336-22a1-4c9b-bbc7-48ef38dc9787");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1a0f9336-22a1-4c9b-bbc7-48ef38dc9787",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1a0f9336-22a1-4c9b-bbc7-48ef38dc9787",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2d539a5e-2864-4e9f-bb57-78502ea0c369",
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	"00000000-0000-0000-0000-000000000000",
	"68a8b762-5fa2-4989-af83-dc4811427d8e",
	"d638c66d-612e-4057-91d9-b5199aa2a2bb");
INSERT INTO DIM_WAY
	VALUES ("68a8b762-5fa2-4989-af83-dc4811427d8e",
	2624.000000,
	1786.000000,
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d638c66d-612e-4057-91d9-b5199aa2a2bb",
	2624.000000,
	1728.000000,
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	"00000000-0000-0000-0000-000000000000",
	"68a8b762-5fa2-4989-af83-dc4811427d8e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eb03e69a-768a-4595-8f7d-2d3791598e13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eb03e69a-768a-4595-8f7d-2d3791598e13",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f24c0a62-e3b3-4b8d-9a44-e320ba1fe46a",
	"00000000-0000-0000-0000-000000000000",
	"eb03e69a-768a-4595-8f7d-2d3791598e13");
INSERT INTO GD_GE
	VALUES ("c407c239-1a78-485b-83dd-465891249c59",
	"b339a27d-d400-41dd-8612-00f7cd61bf04",
	"266231da-f900-4e50-8382-e610cfd5b5c5",
	42,
	0,
	'trans::Drivers::Driver::Instance State Machine::Class Transform::D1: Next');
INSERT INTO GD_CON
	VALUES ("c407c239-1a78-485b-83dd-465891249c59",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1599454-43b0-45e0-8429-1873453834e7",
	"c407c239-1a78-485b-83dd-465891249c59",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c1599454-43b0-45e0-8429-1873453834e7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c1599454-43b0-45e0-8429-1873453834e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1599454-43b0-45e0-8429-1873453834e7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6bfd193a-b301-4f37-b76f-575195b68bcc",
	"c407c239-1a78-485b-83dd-465891249c59",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6bfd193a-b301-4f37-b76f-575195b68bcc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6bfd193a-b301-4f37-b76f-575195b68bcc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6bfd193a-b301-4f37-b76f-575195b68bcc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b1aa4369-a004-45a4-b348-5515e594374c",
	"c407c239-1a78-485b-83dd-465891249c59",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b1aa4369-a004-45a4-b348-5515e594374c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b1aa4369-a004-45a4-b348-5515e594374c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b1aa4369-a004-45a4-b348-5515e594374c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("08d80c60-0aef-4086-ab64-f17d1b5cb2a0",
	"c407c239-1a78-485b-83dd-465891249c59",
	"00000000-0000-0000-0000-000000000000",
	"0f30b645-e209-4f00-9074-51a75792b24a",
	"84a2573e-6ecf-4c86-9e83-05c0d6dc9cda");
INSERT INTO GD_LS
	VALUES ("7fc654f9-3f81-41ee-8baa-fa18896fc228",
	"c407c239-1a78-485b-83dd-465891249c59",
	"08d80c60-0aef-4086-ab64-f17d1b5cb2a0",
	"84a2573e-6ecf-4c86-9e83-05c0d6dc9cda",
	"114f9365-c471-4be9-8364-ba74ed313e5f");
INSERT INTO DIM_WAY
	VALUES ("0f30b645-e209-4f00-9074-51a75792b24a",
	2369.000000,
	2160.000000,
	"c407c239-1a78-485b-83dd-465891249c59",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("84a2573e-6ecf-4c86-9e83-05c0d6dc9cda",
	2256.000000,
	2160.000000,
	"c407c239-1a78-485b-83dd-465891249c59",
	"00000000-0000-0000-0000-000000000000",
	"0f30b645-e209-4f00-9074-51a75792b24a");
INSERT INTO DIM_WAY
	VALUES ("114f9365-c471-4be9-8364-ba74ed313e5f",
	2256.000000,
	2251.000000,
	"c407c239-1a78-485b-83dd-465891249c59",
	"00000000-0000-0000-0000-000000000000",
	"84a2573e-6ecf-4c86-9e83-05c0d6dc9cda");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c407c239-1a78-485b-83dd-465891249c59",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c407c239-1a78-485b-83dd-465891249c59",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4a66a121-ec5f-4ce0-b855-1d8d40590b02",
	"cc67c459-b747-4bda-8127-8c2a4910e754",
	"c407c239-1a78-485b-83dd-465891249c59");
INSERT INTO DIM_DIA
	VALUES ("b339a27d-d400-41dd-8612-00f7cd61bf04",
	'',
	0.750000,
	1814.000000,
	1716.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ_PROXY
	VALUES ("cdbdafcb-ee4b-42b1-a518-12477a870f8a",
	'Driver',
	101,
	'D',
	'',
	"00000000-0000-0000-0000-000000000000",
	'../Driver.xtuml');
