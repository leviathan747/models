-- BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

INSERT INTO SM_ISM
	VALUES ("fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"a0ab74c9-305f-47b7-97ed-3e788f7ed107");
INSERT INTO SM_SM
	VALUES ("fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_EVTDI
	VALUES ("5aec4d19-ba38-43f1-b815-6f52c989520e",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d3630e27-32f0-4fc6-b249-edcc595b107f",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"5aec4d19-ba38-43f1-b815-6f52c989520e");
INSERT INTO SM_EVTDI
	VALUES ("ba8c7a2f-e2d5-406c-9ef0-f9d4ff2c0bfa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("545d3111-2a4a-45eb-bd09-b4b146f9ad41",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f1d8a5f9-ce0b-4f82-9c64-29fb69f7ef72",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"d96983d3-4e04-4522-8016-843785981608",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("5421cdd2-cd3d-4a13-912b-952ac4f748d2",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"ba8c7a2f-e2d5-406c-9ef0-f9d4ff2c0bfa");
INSERT INTO SM_EVTDI
	VALUES ("f06c297b-6472-4918-87ab-7a8be3c99edb",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"545d3111-2a4a-45eb-bd09-b4b146f9ad41");
INSERT INTO SM_EVTDI
	VALUES ("ce38cda8-0eb4-45a4-8738-d200700b3da3",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"d96983d3-4e04-4522-8016-843785981608",
	"f1d8a5f9-ce0b-4f82-9c64-29fb69f7ef72");
INSERT INTO SM_LEVT
	VALUES ("5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f01f83f3-2502-426d-9894-0644413df086",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"d96983d3-4e04-4522-8016-843785981608",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0be672d2-1d82-4070-a863-33d80c1b6d9c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"f01f83f3-2502-426d-9894-0644413df086",
	"5a4da15a-3cd9-453b-b032-b3f9d128cd1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("0be672d2-1d82-4070-a863-33d80c1b6d9c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"f01f83f3-2502-426d-9894-0644413df086",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("fc498911-401b-48d0-ba3f-c772b88ad4f0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"24c96f3f-5581-458e-b8f7-5ee21cc9c8aa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("fc498911-401b-48d0-ba3f-c772b88ad4f0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4d097c10-61dd-4542-8daf-7ac4a0f264ad",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"d96983d3-4e04-4522-8016-843785981608",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("4d097c10-61dd-4542-8daf-7ac4a0f264ad",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a033451b-8afc-4d27-88a0-8a7dbd899285",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"f01f83f3-2502-426d-9894-0644413df086",
	"d96983d3-4e04-4522-8016-843785981608",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("a033451b-8afc-4d27-88a0-8a7dbd899285",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("12fbaeb4-3573-4231-a22e-8773c6c2d0db",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("12fbaeb4-3573-4231-a22e-8773c6c2d0db",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"1701141a-faf2-49d9-94b4-eaf525c1bdee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("dfd2f7ca-8dd5-45d2-b2de-e48dbb9cdf41",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"42fcc768-f504-4ac2-9ca9-3ccc19650068",
	"3d59a07e-f41e-456c-b772-51430c4a00e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("dfd2f7ca-8dd5-45d2-b2de-e48dbb9cdf41",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8e9892a5-aca0-4135-a760-571fc8e8117c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"f01f83f3-2502-426d-9894-0644413df086");
INSERT INTO SM_AH
	VALUES ("8e9892a5-aca0-4135-a760-571fc8e8117c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("8e9892a5-aca0-4135-a760-571fc8e8117c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("7f64279f-0a65-4e15-9ba0-a2f501829072",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa");
INSERT INTO SM_AH
	VALUES ("7f64279f-0a65-4e15-9ba0-a2f501829072",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("7f64279f-0a65-4e15-9ba0-a2f501829072",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("1dbbf84a-e3ff-4677-851b-c567e4c7fdf7",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"42fcc768-f504-4ac2-9ca9-3ccc19650068");
INSERT INTO SM_AH
	VALUES ("1dbbf84a-e3ff-4677-851b-c567e4c7fdf7",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("1dbbf84a-e3ff-4677-851b-c567e4c7fdf7",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("75b0b018-eeab-44a3-9806-f8c3cd543f71",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"1701141a-faf2-49d9-94b4-eaf525c1bdee");
INSERT INTO SM_AH
	VALUES ("75b0b018-eeab-44a3-9806-f8c3cd543f71",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("75b0b018-eeab-44a3-9806-f8c3cd543f71",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("882da832-8825-4f23-bc50-83967d81f23c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"8b411ada-6c2c-4cca-b34b-2a8f18f4f130");
INSERT INTO SM_AH
	VALUES ("882da832-8825-4f23-bc50-83967d81f23c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("882da832-8825-4f23-bc50-83967d81f23c",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_MOAH
	VALUES ("3a795ae9-8339-4626-a96d-76db47f2e3b0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"ca18da53-4d17-46f6-a30b-7f599ee2bbca");
INSERT INTO SM_AH
	VALUES ("3a795ae9-8339-4626-a96d-76db47f2e3b0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("3a795ae9-8339-4626-a96d-76db47f2e3b0",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_TAH
	VALUES ("bc7ee35f-5397-4e72-ab75-122e00d6d171",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"0be672d2-1d82-4070-a863-33d80c1b6d9c");
INSERT INTO SM_AH
	VALUES ("bc7ee35f-5397-4e72-ab75-122e00d6d171",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("bc7ee35f-5397-4e72-ab75-122e00d6d171",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("202848f2-1a48-47a6-b5e8-451babc32c48",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"fc498911-401b-48d0-ba3f-c772b88ad4f0");
INSERT INTO SM_AH
	VALUES ("202848f2-1a48-47a6-b5e8-451babc32c48",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("202848f2-1a48-47a6-b5e8-451babc32c48",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("3fc8eb06-4c5e-4632-81a9-98aca145a5fe",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"4d097c10-61dd-4542-8daf-7ac4a0f264ad");
INSERT INTO SM_AH
	VALUES ("3fc8eb06-4c5e-4632-81a9-98aca145a5fe",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("3fc8eb06-4c5e-4632-81a9-98aca145a5fe",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("9951c0d4-7cc0-4fe7-8f3f-3cba52cff196",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"a033451b-8afc-4d27-88a0-8a7dbd899285");
INSERT INTO SM_AH
	VALUES ("9951c0d4-7cc0-4fe7-8f3f-3cba52cff196",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("9951c0d4-7cc0-4fe7-8f3f-3cba52cff196",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("9dede125-4369-4b72-ad47-f21769754fff",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"12fbaeb4-3573-4231-a22e-8773c6c2d0db");
INSERT INTO SM_AH
	VALUES ("9dede125-4369-4b72-ad47-f21769754fff",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("9dede125-4369-4b72-ad47-f21769754fff",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("111cfbc1-bcc5-4edf-93d6-5eb943d7a8a3",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	"dfd2f7ca-8dd5-45d2-b2de-e48dbb9cdf41");
INSERT INTO SM_AH
	VALUES ("111cfbc1-bcc5-4edf-93d6-5eb943d7a8a3",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4");
INSERT INTO SM_ACT
	VALUES ("111cfbc1-bcc5-4edf-93d6-5eb943d7a8a3",
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("a7190820-111d-41f0-85ae-2c5cb324843f",
	8,
	"fae7abb1-ae62-4fc8-8945-8602c9921eb4",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("23911623-1500-477e-838f-b6b2ca81d706",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"f01f83f3-2502-426d-9894-0644413df086",
	41,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("23911623-1500-477e-838f-b6b2ca81d706");
INSERT INTO GD_NCS
	VALUES ("23911623-1500-477e-838f-b6b2ca81d706");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"23911623-1500-477e-838f-b6b2ca81d706");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"23911623-1500-477e-838f-b6b2ca81d706",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("23911623-1500-477e-838f-b6b2ca81d706",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c83b6aba-85fb-4091-afd9-150d07173515",
	2064.000000,
	1312.000000,
	"23911623-1500-477e-838f-b6b2ca81d706");
INSERT INTO DIM_CON
	VALUES ("f33df541-c86d-45fe-8376-7a2275be7f1e",
	1968.000000,
	1280.000000,
	"23911623-1500-477e-838f-b6b2ca81d706");
INSERT INTO DIM_CON
	VALUES ("b074a96e-7d4d-4dfa-b65f-21a4e3f38c59",
	1968.000000,
	1376.000000,
	"23911623-1500-477e-838f-b6b2ca81d706");
INSERT INTO GD_GE
	VALUES ("b0545bf9-73d6-4cc4-a161-7298be17ba9f",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"e2e7e3b7-9907-4ebf-b71c-0b2aabb661fa",
	41,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("b0545bf9-73d6-4cc4-a161-7298be17ba9f");
INSERT INTO GD_NCS
	VALUES ("b0545bf9-73d6-4cc4-a161-7298be17ba9f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"b0545bf9-73d6-4cc4-a161-7298be17ba9f");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"b0545bf9-73d6-4cc4-a161-7298be17ba9f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0545bf9-73d6-4cc4-a161-7298be17ba9f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("74169cf0-0edd-49d7-ac0f-7d3e4f9e672c",
	2064.000000,
	1712.000000,
	"b0545bf9-73d6-4cc4-a161-7298be17ba9f");
INSERT INTO DIM_CON
	VALUES ("6e4e679c-e824-47c0-ad7e-614570e3720b",
	1968.000000,
	1680.000000,
	"b0545bf9-73d6-4cc4-a161-7298be17ba9f");
INSERT INTO GD_GE
	VALUES ("1e03dc79-888c-41d6-aa7e-e95710a79ddd",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"42fcc768-f504-4ac2-9ca9-3ccc19650068",
	41,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("1e03dc79-888c-41d6-aa7e-e95710a79ddd");
INSERT INTO GD_NCS
	VALUES ("1e03dc79-888c-41d6-aa7e-e95710a79ddd");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"1e03dc79-888c-41d6-aa7e-e95710a79ddd");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"1e03dc79-888c-41d6-aa7e-e95710a79ddd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1e03dc79-888c-41d6-aa7e-e95710a79ddd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6e447c55-49cd-45fa-a3b1-715e9267fdb2",
	2320.000000,
	1280.000000,
	"1e03dc79-888c-41d6-aa7e-e95710a79ddd");
INSERT INTO DIM_CON
	VALUES ("ab68a2ba-b77d-4d34-9367-76a904e9883a",
	2320.000000,
	1376.000000,
	"1e03dc79-888c-41d6-aa7e-e95710a79ddd");
INSERT INTO GD_GE
	VALUES ("aaae58b6-3f0c-48bc-be64-f3b9239cb1e2",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"1701141a-faf2-49d9-94b4-eaf525c1bdee",
	41,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("aaae58b6-3f0c-48bc-be64-f3b9239cb1e2");
INSERT INTO GD_NCS
	VALUES ("aaae58b6-3f0c-48bc-be64-f3b9239cb1e2");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"aaae58b6-3f0c-48bc-be64-f3b9239cb1e2");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"aaae58b6-3f0c-48bc-be64-f3b9239cb1e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aaae58b6-3f0c-48bc-be64-f3b9239cb1e2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("34f6e1f3-7ff6-425b-914e-e1dc189368a0",
	2320.000000,
	1680.000000,
	"aaae58b6-3f0c-48bc-be64-f3b9239cb1e2");
INSERT INTO GD_GE
	VALUES ("8d2e389b-85dd-4121-a58f-a7b159d94516",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"8b411ada-6c2c-4cca-b34b-2a8f18f4f130",
	41,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("8d2e389b-85dd-4121-a58f-a7b159d94516");
INSERT INTO GD_NCS
	VALUES ("8d2e389b-85dd-4121-a58f-a7b159d94516");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"8d2e389b-85dd-4121-a58f-a7b159d94516");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"8d2e389b-85dd-4121-a58f-a7b159d94516",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8d2e389b-85dd-4121-a58f-a7b159d94516",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("63bd5148-d5ba-4138-b4cf-e7381bdec58e",
	1968.000000,
	1472.000000,
	"8d2e389b-85dd-4121-a58f-a7b159d94516");
INSERT INTO DIM_CON
	VALUES ("6323cfaf-0bb1-4ef4-bd62-4bc76948f5e8",
	1968.000000,
	1568.000000,
	"8d2e389b-85dd-4121-a58f-a7b159d94516");
INSERT INTO GD_GE
	VALUES ("3a8fd96a-eb69-4529-95b7-5da6a895aad6",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"ca18da53-4d17-46f6-a30b-7f599ee2bbca",
	41,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("3a8fd96a-eb69-4529-95b7-5da6a895aad6");
INSERT INTO GD_NCS
	VALUES ("3a8fd96a-eb69-4529-95b7-5da6a895aad6");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"3a8fd96a-eb69-4529-95b7-5da6a895aad6");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"3a8fd96a-eb69-4529-95b7-5da6a895aad6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a8fd96a-eb69-4529-95b7-5da6a895aad6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fa69e77c-bfb9-463a-9f20-c7ebfdfa1483",
	2320.000000,
	1472.000000,
	"3a8fd96a-eb69-4529-95b7-5da6a895aad6");
INSERT INTO DIM_CON
	VALUES ("612f2830-bf7f-4495-bde7-b1f79399ed17",
	2320.000000,
	1568.000000,
	"3a8fd96a-eb69-4529-95b7-5da6a895aad6");
INSERT INTO GD_GE
	VALUES ("40199618-0e36-403e-a266-d1e2f2468ea8",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"0be672d2-1d82-4070-a863-33d80c1b6d9c",
	42,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c209acfc-ce98-4935-b8d6-320071c3b69d",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c209acfc-ce98-4935-b8d6-320071c3b69d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c209acfc-ce98-4935-b8d6-320071c3b69d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c209acfc-ce98-4935-b8d6-320071c3b69d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("91c4f026-ae9a-408e-b9f0-f52162b3e553",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"91c4f026-ae9a-408e-b9f0-f52162b3e553");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"91c4f026-ae9a-408e-b9f0-f52162b3e553",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91c4f026-ae9a-408e-b9f0-f52162b3e553",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("08a2bf54-1629-4ba5-b8b6-be5570edc563",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"08a2bf54-1629-4ba5-b8b6-be5570edc563");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"08a2bf54-1629-4ba5-b8b6-be5570edc563",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08a2bf54-1629-4ba5-b8b6-be5570edc563",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("79865475-bb1f-4077-9ffa-8930303845ee",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000",
	"04b6f0f5-640c-49df-8301-99442ef52658",
	"6db77665-0cc2-4558-b24d-283b9cf3443c");
INSERT INTO GD_LS
	VALUES ("20abe153-83ca-4289-9d01-26aea4a39903",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"79865475-bb1f-4077-9ffa-8930303845ee",
	"6db77665-0cc2-4558-b24d-283b9cf3443c",
	"e533a63a-e3d0-471f-bbe9-8d77712f168d");
INSERT INTO GD_LS
	VALUES ("a453fe38-f8e8-40ac-8c7c-82bf00f99b28",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"20abe153-83ca-4289-9d01-26aea4a39903",
	"e533a63a-e3d0-471f-bbe9-8d77712f168d",
	"3def61e3-73f5-4c73-bb0f-9f5973c78c33");
INSERT INTO GD_LS
	VALUES ("cfed1bde-41b4-4eb3-9758-d95695b5aee1",
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"a453fe38-f8e8-40ac-8c7c-82bf00f99b28",
	"3def61e3-73f5-4c73-bb0f-9f5973c78c33",
	"6178eb00-4b6a-44bf-bad9-50210c2eab71");
INSERT INTO DIM_WAY
	VALUES ("04b6f0f5-640c-49df-8301-99442ef52658",
	2064.000000,
	1312.000000,
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6db77665-0cc2-4558-b24d-283b9cf3443c",
	2128.000000,
	1312.000000,
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000",
	"04b6f0f5-640c-49df-8301-99442ef52658");
INSERT INTO DIM_WAY
	VALUES ("e533a63a-e3d0-471f-bbe9-8d77712f168d",
	2128.000000,
	1216.000000,
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000",
	"6db77665-0cc2-4558-b24d-283b9cf3443c");
INSERT INTO DIM_WAY
	VALUES ("3def61e3-73f5-4c73-bb0f-9f5973c78c33",
	1968.000000,
	1216.000000,
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000",
	"e533a63a-e3d0-471f-bbe9-8d77712f168d");
INSERT INTO DIM_WAY
	VALUES ("6178eb00-4b6a-44bf-bad9-50210c2eab71",
	1968.000000,
	1280.000000,
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000",
	"3def61e3-73f5-4c73-bb0f-9f5973c78c33");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"40199618-0e36-403e-a266-d1e2f2468ea8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("40199618-0e36-403e-a266-d1e2f2468ea8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c83b6aba-85fb-4091-afd9-150d07173515",
	"f33df541-c86d-45fe-8376-7a2275be7f1e",
	"40199618-0e36-403e-a266-d1e2f2468ea8");
INSERT INTO GD_GE
	VALUES ("4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"fc498911-401b-48d0-ba3f-c772b88ad4f0",
	42,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6f013195-a603-47a9-aceb-8f63c335d080",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6f013195-a603-47a9-aceb-8f63c335d080");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6f013195-a603-47a9-aceb-8f63c335d080",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6f013195-a603-47a9-aceb-8f63c335d080",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a573f2f4-459d-48e8-a9b9-e614aa487e79",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"a573f2f4-459d-48e8-a9b9-e614aa487e79");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"a573f2f4-459d-48e8-a9b9-e614aa487e79",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a573f2f4-459d-48e8-a9b9-e614aa487e79",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("99740486-a3ea-4f9d-b0fd-ec8fc675532c",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"99740486-a3ea-4f9d-b0fd-ec8fc675532c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"99740486-a3ea-4f9d-b0fd-ec8fc675532c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("99740486-a3ea-4f9d-b0fd-ec8fc675532c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("dda28283-619e-405b-b6ec-8744a5160d85",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000",
	"a1cb4ecc-d79e-457f-81fa-9b145dfb49f1",
	"33600c38-3fc9-44b6-abb9-8a85614256d4");
INSERT INTO GD_LS
	VALUES ("5383f85c-caf1-4577-8270-f81d8cd0fd92",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"dda28283-619e-405b-b6ec-8744a5160d85",
	"33600c38-3fc9-44b6-abb9-8a85614256d4",
	"d8f69ff7-1516-4960-86b3-516babfae296");
INSERT INTO GD_LS
	VALUES ("7ae1f19a-0ce9-4ab5-979f-bcaa9e7d5fcf",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"5383f85c-caf1-4577-8270-f81d8cd0fd92",
	"d8f69ff7-1516-4960-86b3-516babfae296",
	"01784f76-a802-4d1f-b96b-cbd9f131c521");
INSERT INTO GD_LS
	VALUES ("e1ecd2f7-0443-45b0-9c3b-d734e266e9a4",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"7ae1f19a-0ce9-4ab5-979f-bcaa9e7d5fcf",
	"01784f76-a802-4d1f-b96b-cbd9f131c521",
	"68e67fc7-ee0b-4a8e-a1bf-5603ec6297be");
INSERT INTO DIM_WAY
	VALUES ("a1cb4ecc-d79e-457f-81fa-9b145dfb49f1",
	2064.000000,
	1712.000000,
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("33600c38-3fc9-44b6-abb9-8a85614256d4",
	2192.000000,
	1712.000000,
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000",
	"a1cb4ecc-d79e-457f-81fa-9b145dfb49f1");
INSERT INTO DIM_WAY
	VALUES ("d8f69ff7-1516-4960-86b3-516babfae296",
	2192.000000,
	1232.000000,
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000",
	"33600c38-3fc9-44b6-abb9-8a85614256d4");
INSERT INTO DIM_WAY
	VALUES ("01784f76-a802-4d1f-b96b-cbd9f131c521",
	2320.000000,
	1232.000000,
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000",
	"d8f69ff7-1516-4960-86b3-516babfae296");
INSERT INTO DIM_WAY
	VALUES ("68e67fc7-ee0b-4a8e-a1bf-5603ec6297be",
	2320.000000,
	1280.000000,
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000",
	"01784f76-a802-4d1f-b96b-cbd9f131c521");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4517167f-4a9f-4c85-90f2-ffa1f600434f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4517167f-4a9f-4c85-90f2-ffa1f600434f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("74169cf0-0edd-49d7-ac0f-7d3e4f9e672c",
	"6e447c55-49cd-45fa-a3b1-715e9267fdb2",
	"4517167f-4a9f-4c85-90f2-ffa1f600434f");
INSERT INTO GD_GE
	VALUES ("d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"a033451b-8afc-4d27-88a0-8a7dbd899285",
	42,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a427bd3c-f66a-4e93-8ed4-504a3beca8af",
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a427bd3c-f66a-4e93-8ed4-504a3beca8af");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a427bd3c-f66a-4e93-8ed4-504a3beca8af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a427bd3c-f66a-4e93-8ed4-504a3beca8af",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a66557f9-4556-4d2d-83ee-4e9dd76b68d9",
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"a66557f9-4556-4d2d-83ee-4e9dd76b68d9");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"a66557f9-4556-4d2d-83ee-4e9dd76b68d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a66557f9-4556-4d2d-83ee-4e9dd76b68d9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2f1d2b93-4918-4370-8177-eed9d3ab6946",
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2f1d2b93-4918-4370-8177-eed9d3ab6946");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2f1d2b93-4918-4370-8177-eed9d3ab6946",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f1d2b93-4918-4370-8177-eed9d3ab6946",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fd0f4b25-4c92-4155-beec-c5a9b59fc346",
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	"00000000-0000-0000-0000-000000000000",
	"8d030a60-b50d-4b45-a0ae-c6388f1ffa51",
	"8fd9cc1f-6d2c-49b0-bb3d-465c47bf3963");
INSERT INTO DIM_WAY
	VALUES ("8d030a60-b50d-4b45-a0ae-c6388f1ffa51",
	1968.000000,
	1376.000000,
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8fd9cc1f-6d2c-49b0-bb3d-465c47bf3963",
	1968.000000,
	1472.000000,
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	"00000000-0000-0000-0000-000000000000",
	"8d030a60-b50d-4b45-a0ae-c6388f1ffa51");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d5782fd3-9d1b-47ba-b8df-94a6a3bddde7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b074a96e-7d4d-4dfa-b65f-21a4e3f38c59",
	"63bd5148-d5ba-4138-b4cf-e7381bdec58e",
	"d5782fd3-9d1b-47ba-b8df-94a6a3bddde7");
INSERT INTO GD_GE
	VALUES ("c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"4d097c10-61dd-4542-8daf-7ac4a0f264ad",
	42,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("edd5282e-801a-4be5-9b4b-1add3ecbd8b2",
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"edd5282e-801a-4be5-9b4b-1add3ecbd8b2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"edd5282e-801a-4be5-9b4b-1add3ecbd8b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("edd5282e-801a-4be5-9b4b-1add3ecbd8b2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ab9d4c45-ce77-49a0-962a-709c890b3401",
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"ab9d4c45-ce77-49a0-962a-709c890b3401");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"ab9d4c45-ce77-49a0-962a-709c890b3401",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ab9d4c45-ce77-49a0-962a-709c890b3401",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c8592231-ba7e-4456-b7e1-9e982fabfc42",
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c8592231-ba7e-4456-b7e1-9e982fabfc42");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c8592231-ba7e-4456-b7e1-9e982fabfc42",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c8592231-ba7e-4456-b7e1-9e982fabfc42",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0f58f021-6307-4822-a526-93757b1cfffc",
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	"00000000-0000-0000-0000-000000000000",
	"250fe243-af40-40d9-9b5e-e31fe6ad50f8",
	"0993bf60-06b8-439d-8ff1-54948dbc29c8");
INSERT INTO DIM_WAY
	VALUES ("250fe243-af40-40d9-9b5e-e31fe6ad50f8",
	1968.000000,
	1568.000000,
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0993bf60-06b8-439d-8ff1-54948dbc29c8",
	1968.000000,
	1680.000000,
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	"00000000-0000-0000-0000-000000000000",
	"250fe243-af40-40d9-9b5e-e31fe6ad50f8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c674ddd9-114c-4f83-a4e8-baaeccec2f9c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6323cfaf-0bb1-4ef4-bd62-4bc76948f5e8",
	"6e4e679c-e824-47c0-ad7e-614570e3720b",
	"c674ddd9-114c-4f83-a4e8-baaeccec2f9c");
INSERT INTO GD_GE
	VALUES ("df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"dfd2f7ca-8dd5-45d2-b2de-e48dbb9cdf41",
	42,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7748d25b-83a4-460e-bca8-930a8605c4ab",
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7748d25b-83a4-460e-bca8-930a8605c4ab");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7748d25b-83a4-460e-bca8-930a8605c4ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7748d25b-83a4-460e-bca8-930a8605c4ab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("91f35c45-f5d0-49b1-af89-f57a4971a5cf",
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"91f35c45-f5d0-49b1-af89-f57a4971a5cf");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"91f35c45-f5d0-49b1-af89-f57a4971a5cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91f35c45-f5d0-49b1-af89-f57a4971a5cf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1e11bea7-21b9-44f9-bf04-9b51efb5f462",
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1e11bea7-21b9-44f9-bf04-9b51efb5f462");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1e11bea7-21b9-44f9-bf04-9b51efb5f462",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1e11bea7-21b9-44f9-bf04-9b51efb5f462",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9db5b230-34e0-4a43-a7aa-32b70cc9d124",
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	"00000000-0000-0000-0000-000000000000",
	"e6b02d2b-d8f7-4929-86d7-b54ef7de2c4a",
	"0a795c99-ad6f-4699-bd91-f1f36721cea9");
INSERT INTO DIM_WAY
	VALUES ("e6b02d2b-d8f7-4929-86d7-b54ef7de2c4a",
	2320.000000,
	1376.000000,
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0a795c99-ad6f-4699-bd91-f1f36721cea9",
	2320.000000,
	1472.000000,
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	"00000000-0000-0000-0000-000000000000",
	"e6b02d2b-d8f7-4929-86d7-b54ef7de2c4a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("df32fdec-6a9b-4b15-88db-d6d9b424fd00",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ab68a2ba-b77d-4d34-9367-76a904e9883a",
	"fa69e77c-bfb9-463a-9f20-c7ebfdfa1483",
	"df32fdec-6a9b-4b15-88db-d6d9b424fd00");
INSERT INTO GD_GE
	VALUES ("f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	"a7190820-111d-41f0-85ae-2c5cb324843f",
	"12fbaeb4-3573-4231-a22e-8773c6c2d0db",
	42,
	0,
	'ex1::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8afd8085-4825-453d-97f3-19ee611f0c68",
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8afd8085-4825-453d-97f3-19ee611f0c68");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8afd8085-4825-453d-97f3-19ee611f0c68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8afd8085-4825-453d-97f3-19ee611f0c68",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b2b54357-ec9b-4a3d-9d3e-4d8e43c7fc61",
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"b2b54357-ec9b-4a3d-9d3e-4d8e43c7fc61");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"b2b54357-ec9b-4a3d-9d3e-4d8e43c7fc61",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b2b54357-ec9b-4a3d-9d3e-4d8e43c7fc61",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("12d3a2bc-030f-4a6e-8706-efb3b6f26886",
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"12d3a2bc-030f-4a6e-8706-efb3b6f26886");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"12d3a2bc-030f-4a6e-8706-efb3b6f26886",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("12d3a2bc-030f-4a6e-8706-efb3b6f26886",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a8d962fe-7a6c-4ea2-942e-fd2b4ae498fe",
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	"00000000-0000-0000-0000-000000000000",
	"6fac3d27-1d71-4756-86b8-070c1b661330",
	"41e81467-0409-46e0-b9f5-97369d14831a");
INSERT INTO DIM_WAY
	VALUES ("6fac3d27-1d71-4756-86b8-070c1b661330",
	2320.000000,
	1568.000000,
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("41e81467-0409-46e0-b9f5-97369d14831a",
	2320.000000,
	1680.000000,
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	"00000000-0000-0000-0000-000000000000",
	"6fac3d27-1d71-4756-86b8-070c1b661330");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f62bf56b-4ca9-45ac-8e03-052f41f5308a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("612f2830-bf7f-4495-bde7-b1f79399ed17",
	"34f6e1f3-7ff6-425b-914e-e1dc189368a0",
	"f62bf56b-4ca9-45ac-8e03-052f41f5308a");
INSERT INTO DIM_DIA
	VALUES ("a7190820-111d-41f0-85ae-2c5cb324843f",
	'',
	1.000000,
	1664.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ_PROXY
	VALUES ("a0ab74c9-305f-47b7-97ed-3e788f7ed107",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000",
	'../Boolean Expression Test.xtuml');
