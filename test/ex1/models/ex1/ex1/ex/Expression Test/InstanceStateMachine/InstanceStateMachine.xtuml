-- BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

INSERT INTO SM_ISM
	VALUES ("5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"63c34aca-7be3-452c-a968-bb91fb35687f");
INSERT INTO SM_SM
	VALUES ("5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_EVTDI
	VALUES ("79f19608-02c2-44b9-b0a1-7514cbb5203d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"a7492218-567b-473f-97ee-c94df89b5c0d");
INSERT INTO SM_EVTDI
	VALUES ("6349631d-d114-43b6-9b3c-e565cccf5b7e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("6c7a4a67-1424-4ac7-8fcf-70eb02023fc8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"79f19608-02c2-44b9-b0a1-7514cbb5203d");
INSERT INTO SM_EVTDI
	VALUES ("a8aad48d-bc5d-4529-9f99-2b3a093ba078",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"6c7a4a67-1424-4ac7-8fcf-70eb02023fc8");
INSERT INTO SM_EVTDI
	VALUES ("f94ecf2e-3cd9-4a44-8922-4eb523717742",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"e4adb60e-0f05-4c5a-a7d9-1b4077835fcf");
INSERT INTO SM_EVTDI
	VALUES ("272fed4f-9214-434e-825e-9b972fba08ac",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"fc160686-067d-4259-b671-3adbb8175338",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d0109883-a274-4bd3-ab78-e4e05b651320",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"fc160686-067d-4259-b671-3adbb8175338",
	"272fed4f-9214-434e-825e-9b972fba08ac");
INSERT INTO SM_EVTDI
	VALUES ("00e3b832-1618-4771-831f-3df72b606a61",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"fc160686-067d-4259-b671-3adbb8175338",
	"d0109883-a274-4bd3-ab78-e4e05b651320");
INSERT INTO SM_EVTDI
	VALUES ("de67ada2-29b7-4a3d-9a61-089f3b9796de",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"fc160686-067d-4259-b671-3adbb8175338",
	"00e3b832-1618-4771-831f-3df72b606a61");
INSERT INTO SM_EVTDI
	VALUES ("00f7c5e3-1393-406b-b14b-b8f763fd4b41",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"fc160686-067d-4259-b671-3adbb8175338",
	"de67ada2-29b7-4a3d-9a61-089f3b9796de");
INSERT INTO SM_EVTDI
	VALUES ("f6c437c8-fe91-49ce-b8ab-8b94088f0631",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"a8aad48d-bc5d-4529-9f99-2b3a093ba078");
INSERT INTO SM_EVTDI
	VALUES ("e4adb60e-0f05-4c5a-a7d9-1b4077835fcf",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"bfc7f455-5a4f-4cde-9b0b-44dd60cc0810");
INSERT INTO SM_EVTDI
	VALUES ("4515c8a1-325f-4fe0-b844-be309e4be739",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("9bb933d9-b2b7-46a2-9341-08440c02ecfd",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"4515c8a1-325f-4fe0-b844-be309e4be739");
INSERT INTO SM_EVTDI
	VALUES ("80c5f237-2979-4aac-97f4-82518e8abba8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"9bb933d9-b2b7-46a2-9341-08440c02ecfd");
INSERT INTO SM_EVTDI
	VALUES ("683a9054-4e3a-47c7-9f97-81ca381c169b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"80c5f237-2979-4aac-97f4-82518e8abba8");
INSERT INTO SM_EVTDI
	VALUES ("6825dc27-12c2-4932-ba0a-a74ce09da7d7",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("bfc7f455-5a4f-4cde-9b0b-44dd60cc0810",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"12791a12-30ba-4afd-8ffd-c75b51c50d71");
INSERT INTO SM_EVTDI
	VALUES ("12791a12-30ba-4afd-8ffd-c75b51c50d71",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"f6c437c8-fe91-49ce-b8ab-8b94088f0631");
INSERT INTO SM_EVTDI
	VALUES ("a7492218-567b-473f-97ee-c94df89b5c0d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"6825dc27-12c2-4932-ba0a-a74ce09da7d7");
INSERT INTO SM_EVTDI
	VALUES ("ed55bab4-8558-4984-bece-f1a6ed0d47b3",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"0f7f4b1c-2649-4ce8-8665-f6a8b0dc02e6");
INSERT INTO SM_EVTDI
	VALUES ("0f7f4b1c-2649-4ce8-8665-f6a8b0dc02e6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("af767ba2-d4b8-4eca-b6d2-371363df249a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"ed55bab4-8558-4984-bece-f1a6ed0d47b3");
INSERT INTO SM_EVTDI
	VALUES ("056f140d-b40c-4485-9b6d-9eba3911849f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"af767ba2-d4b8-4eca-b6d2-371363df249a");
INSERT INTO SM_EVTDI
	VALUES ("33818701-e39f-4423-aa75-e38278be5365",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"056f140d-b40c-4485-9b6d-9eba3911849f");
INSERT INTO SM_EVTDI
	VALUES ("69804bf2-b150-4467-be11-7f37585ce5ab",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d20c749b-872c-4019-b4a3-295ab7815e8b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("a543424e-5b5a-47e5-b4ba-d5f27d676594",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("8a341405-96d4-4bfa-a258-6d5358d26c21",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"69804bf2-b150-4467-be11-7f37585ce5ab");
INSERT INTO SM_EVTDI
	VALUES ("000727c6-0ad2-461d-8e23-e542ca82782d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"d20c749b-872c-4019-b4a3-295ab7815e8b");
INSERT INTO SM_EVTDI
	VALUES ("87beacdb-5d2d-4b34-b941-06f97b3e9b58",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"a543424e-5b5a-47e5-b4ba-d5f27d676594");
INSERT INTO SM_LEVT
	VALUES ("4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dd308986-615b-4f0f-bc66-79cb17a37879",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("315b0949-b32d-4f42-a79c-af668c9cbed0",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6264a386-3d0e-4b27-88fb-982a362e7487",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("dc85e222-b1cb-4587-831c-684d253c5567",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("eba8f1ab-a987-437e-934b-7d1735b281f6",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85176e11-fb31-49c4-a9e7-632e0198386a",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("11d1af5b-773b-4d07-ae0f-35481c233584",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("50406259-07e9-4f99-a2a0-832253094077",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"fcc19faa-2b03-4145-85fd-519acd66c9d6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"fc160686-067d-4259-b671-3adbb8175338",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("69684998-a720-4c79-9500-b9ec0ae32d5c",
	"1eccaf60-f7ef-4ea9-9495-f245327aeae6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f4fbed71-a3a2-4e0a-b979-fd984553ac4c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"315b0949-b32d-4f42-a79c-af668c9cbed0",
	"e1a9298b-c4bc-4240-86cd-5cedc7bf747f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("f4fbed71-a3a2-4e0a-b979-fd984553ac4c",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f27b1ab7-34dc-46b5-b282-8e81f40f1b32",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	"aaf4bb75-09f5-407e-8810-b06b7fec7895",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("f27b1ab7-34dc-46b5-b282-8e81f40f1b32",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d9cbe647-6106-4a89-ad00-ad8c1fce745a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	"3498db71-8a51-4a14-8f78-c428dca9a780",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("d9cbe647-6106-4a89-ad00-ad8c1fce745a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6264a386-3d0e-4b27-88fb-982a362e7487",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b07a36c7-1619-4c83-8751-7ed7d2ed5fdb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6264a386-3d0e-4b27-88fb-982a362e7487",
	"764c2e9e-18da-4529-acc0-8f4ef6602bd8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("b07a36c7-1619-4c83-8751-7ed7d2ed5fdb",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dc85e222-b1cb-4587-831c-684d253c5567",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f4f5f15a-2149-4e9d-b16f-1dfccd545060",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dc85e222-b1cb-4587-831c-684d253c5567",
	"38e3b59b-e3a7-4647-aea8-0a52b1d029c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("f4f5f15a-2149-4e9d-b16f-1dfccd545060",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"eba8f1ab-a987-437e-934b-7d1735b281f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("900f3e38-9201-42c3-95e6-ffe29741545b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"eba8f1ab-a987-437e-934b-7d1735b281f6",
	"fc160686-067d-4259-b671-3adbb8175338",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("900f3e38-9201-42c3-95e6-ffe29741545b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"85176e11-fb31-49c4-a9e7-632e0198386a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f65a4ea3-8bea-4532-95bf-d79c9c1a1558",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"85176e11-fb31-49c4-a9e7-632e0198386a",
	"dbe1d0cc-8b75-4b59-8085-fc0aa6ba111d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("f65a4ea3-8bea-4532-95bf-d79c9c1a1558",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("66707fc8-0447-448f-b178-3bc5cdab93d9",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"11d1af5b-773b-4d07-ae0f-35481c233584",
	"599dc8a5-bd2b-4dc0-8e7a-b162723b9be4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("66707fc8-0447-448f-b178-3bc5cdab93d9",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7d782341-b42c-48ad-a075-0304c93cf130",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	"757479d9-1fab-4cfe-89f1-1844c1487b2e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("7d782341-b42c-48ad-a075-0304c93cf130",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"50406259-07e9-4f99-a2a0-832253094077",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b0984ec2-100d-41d3-929a-8eca2b234b3e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dd308986-615b-4f0f-bc66-79cb17a37879",
	"4707d4bc-74f9-480b-89d9-ff01acd41d3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("b0984ec2-100d-41d3-929a-8eca2b234b3e",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dd308986-615b-4f0f-bc66-79cb17a37879",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("5823e4b0-afba-419b-8069-ae185ec3b1be",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"d1f1a573-28b6-4f09-b9ca-6cf4ca324adb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("5823e4b0-afba-419b-8069-ae185ec3b1be",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"11d1af5b-773b-4d07-ae0f-35481c233584",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("6a221843-5387-4974-a90a-b1baac91c919",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dd308986-615b-4f0f-bc66-79cb17a37879",
	"bc69c4b2-4cb4-406c-bdd3-3271be32796f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("6a221843-5387-4974-a90a-b1baac91c919",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"8e20191e-2e1c-466a-bed8-4db5b96478a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("8765aee0-2d70-4011-b2f4-1d0143ffeadd",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"50406259-07e9-4f99-a2a0-832253094077",
	"ed9773a2-db55-4db7-ad82-225d7da75513",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("8765aee0-2d70-4011-b2f4-1d0143ffeadd",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a5e1305c-9e91-490f-a601-73fdc8273c49",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("a5e1305c-9e91-490f-a601-73fdc8273c49",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("c627ad0b-20b7-4c56-86e6-3ab7e9d5f897",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6cede05b-df9d-4273-abcf-23dbe3205f7f",
	"a96f651c-226f-434d-964d-351a9d2f104c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("c627ad0b-20b7-4c56-86e6-3ab7e9d5f897",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"69684998-a720-4c79-9500-b9ec0ae32d5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("42db9ce2-853a-43f5-9952-13f95c7b2e5b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"69684998-a720-4c79-9500-b9ec0ae32d5c",
	"6d508b63-a760-4299-b72f-14f8e805836f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("42db9ce2-853a-43f5-9952-13f95c7b2e5b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"315b0949-b32d-4f42-a79c-af668c9cbed0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("2e0b7d6c-bad0-4ab4-97ca-bcb26538f5bf",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dd308986-615b-4f0f-bc66-79cb17a37879");
INSERT INTO SM_AH
	VALUES ("2e0b7d6c-bad0-4ab4-97ca-bcb26538f5bf",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("2e0b7d6c-bad0-4ab4-97ca-bcb26538f5bf",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("6dfa2949-334b-4d62-9d49-e7293703fd60",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"315b0949-b32d-4f42-a79c-af668c9cbed0");
INSERT INTO SM_AH
	VALUES ("6dfa2949-334b-4d62-9d49-e7293703fd60",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("6dfa2949-334b-4d62-9d49-e7293703fd60",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("ea5b726e-111d-4f7a-8cf2-14a685278b03",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6fd94b0d-cdef-4e53-b9fe-84c334df6f9b");
INSERT INTO SM_AH
	VALUES ("ea5b726e-111d-4f7a-8cf2-14a685278b03",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("ea5b726e-111d-4f7a-8cf2-14a685278b03",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("fa1484f8-1df3-4398-9f5f-1393089de081",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"4452bebf-d085-458a-a9ba-e5ad1c4ab321");
INSERT INTO SM_AH
	VALUES ("fa1484f8-1df3-4398-9f5f-1393089de081",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("fa1484f8-1df3-4398-9f5f-1393089de081",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("666475e3-6bff-49c3-8e52-4423ff089cd6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"10bd892a-1d8a-4b51-94ff-1e8e2d39d98a");
INSERT INTO SM_AH
	VALUES ("666475e3-6bff-49c3-8e52-4423ff089cd6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("666475e3-6bff-49c3-8e52-4423ff089cd6",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("d38055b0-18b6-4952-bcfa-c1ec6f82d221",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6264a386-3d0e-4b27-88fb-982a362e7487");
INSERT INTO SM_AH
	VALUES ("d38055b0-18b6-4952-bcfa-c1ec6f82d221",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("d38055b0-18b6-4952-bcfa-c1ec6f82d221",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("d232f865-d095-4f18-8411-99951d4cdbea",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"dc85e222-b1cb-4587-831c-684d253c5567");
INSERT INTO SM_AH
	VALUES ("d232f865-d095-4f18-8411-99951d4cdbea",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("d232f865-d095-4f18-8411-99951d4cdbea",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("39c82b9c-8ef4-41e7-b5ca-ba5444740b7b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"eba8f1ab-a987-437e-934b-7d1735b281f6");
INSERT INTO SM_AH
	VALUES ("39c82b9c-8ef4-41e7-b5ca-ba5444740b7b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("39c82b9c-8ef4-41e7-b5ca-ba5444740b7b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("82189991-0ec3-471f-b374-ec2b4b154914",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"85176e11-fb31-49c4-a9e7-632e0198386a");
INSERT INTO SM_AH
	VALUES ("82189991-0ec3-471f-b374-ec2b4b154914",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("82189991-0ec3-471f-b374-ec2b4b154914",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("6eaccd86-fb85-465b-a13b-1e0acf82e927",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"11d1af5b-773b-4d07-ae0f-35481c233584");
INSERT INTO SM_AH
	VALUES ("6eaccd86-fb85-465b-a13b-1e0acf82e927",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("6eaccd86-fb85-465b-a13b-1e0acf82e927",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("d7818c01-b526-4be5-8e62-8cfc8fef7206",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9");
INSERT INTO SM_AH
	VALUES ("d7818c01-b526-4be5-8e62-8cfc8fef7206",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("d7818c01-b526-4be5-8e62-8cfc8fef7206",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("36a9d85b-7f45-4616-ae45-befac652d293",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"50406259-07e9-4f99-a2a0-832253094077");
INSERT INTO SM_AH
	VALUES ("36a9d85b-7f45-4616-ae45-befac652d293",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("36a9d85b-7f45-4616-ae45-befac652d293",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("cc65a5e3-3153-490e-9244-98ea6d88a808",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"8e20191e-2e1c-466a-bed8-4db5b96478a2");
INSERT INTO SM_AH
	VALUES ("cc65a5e3-3153-490e-9244-98ea6d88a808",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("cc65a5e3-3153-490e-9244-98ea6d88a808",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("5522b404-f5af-46ba-aac1-b22c2e34ba6d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a");
INSERT INTO SM_AH
	VALUES ("5522b404-f5af-46ba-aac1-b22c2e34ba6d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("5522b404-f5af-46ba-aac1-b22c2e34ba6d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB where selected.etob_id == 2 ;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1] where selected.etob_id == 2;
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8] where selected.etob_id == 2;
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("5b4084e8-011e-4898-9f03-518a3fd8eaed",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6cede05b-df9d-4273-abcf-23dbe3205f7f");
INSERT INTO SM_AH
	VALUES ("5b4084e8-011e-4898-9f03-518a3fd8eaed",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("5b4084e8-011e-4898-9f03-518a3fd8eaed",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB where ( selected.etob_id == 2 );
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8] where ( selected.etob_id == 2 );
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("d7d418ab-9d13-40f3-a1b2-d7503267ef1a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"69684998-a720-4c79-9500-b9ec0ae32d5c");
INSERT INTO SM_AH
	VALUES ("d7d418ab-9d13-40f3-a1b2-d7503267ef1a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("d7d418ab-9d13-40f3-a1b2-d7503267ef1a",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB where ( selected.etob_id == 2 );
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'');
INSERT INTO SM_TAH
	VALUES ("945b6102-c05c-4af5-9deb-a1e29be3f3f2",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"f4fbed71-a3a2-4e0a-b979-fd984553ac4c");
INSERT INTO SM_AH
	VALUES ("945b6102-c05c-4af5-9deb-a1e29be3f3f2",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("945b6102-c05c-4af5-9deb-a1e29be3f3f2",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("0a4abeff-8989-4b15-a1ec-67c16b5bd938",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"f27b1ab7-34dc-46b5-b282-8e81f40f1b32");
INSERT INTO SM_AH
	VALUES ("0a4abeff-8989-4b15-a1ec-67c16b5bd938",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("0a4abeff-8989-4b15-a1ec-67c16b5bd938",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("efcddff2-33ce-49c1-a9f3-9a8f07976375",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"d9cbe647-6106-4a89-ad00-ad8c1fce745a");
INSERT INTO SM_AH
	VALUES ("efcddff2-33ce-49c1-a9f3-9a8f07976375",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("efcddff2-33ce-49c1-a9f3-9a8f07976375",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("168e4c2a-d1fe-4bf0-ab9a-86ebbfc0174d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"b07a36c7-1619-4c83-8751-7ed7d2ed5fdb");
INSERT INTO SM_AH
	VALUES ("168e4c2a-d1fe-4bf0-ab9a-86ebbfc0174d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("168e4c2a-d1fe-4bf0-ab9a-86ebbfc0174d",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("57ee7f43-2088-45c7-b065-00b35c13977f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"f4f5f15a-2149-4e9d-b16f-1dfccd545060");
INSERT INTO SM_AH
	VALUES ("57ee7f43-2088-45c7-b065-00b35c13977f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("57ee7f43-2088-45c7-b065-00b35c13977f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("02054318-ac17-4076-94aa-0220b524b228",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"900f3e38-9201-42c3-95e6-ffe29741545b");
INSERT INTO SM_AH
	VALUES ("02054318-ac17-4076-94aa-0220b524b228",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("02054318-ac17-4076-94aa-0220b524b228",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("f76ff5d0-18d9-40df-8f68-2c01325fca29",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"f65a4ea3-8bea-4532-95bf-d79c9c1a1558");
INSERT INTO SM_AH
	VALUES ("f76ff5d0-18d9-40df-8f68-2c01325fca29",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("f76ff5d0-18d9-40df-8f68-2c01325fca29",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("89dd969b-8041-4f5d-a288-839faf8d156f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"66707fc8-0447-448f-b178-3bc5cdab93d9");
INSERT INTO SM_AH
	VALUES ("89dd969b-8041-4f5d-a288-839faf8d156f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("89dd969b-8041-4f5d-a288-839faf8d156f",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("408a8331-d20d-4ae4-91c6-4441cce35241",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"7d782341-b42c-48ad-a075-0304c93cf130");
INSERT INTO SM_AH
	VALUES ("408a8331-d20d-4ae4-91c6-4441cce35241",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("408a8331-d20d-4ae4-91c6-4441cce35241",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("f0bec8c7-b636-4ddf-af53-8ea8093c3e52",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"b0984ec2-100d-41d3-929a-8eca2b234b3e");
INSERT INTO SM_AH
	VALUES ("f0bec8c7-b636-4ddf-af53-8ea8093c3e52",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("f0bec8c7-b636-4ddf-af53-8ea8093c3e52",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("186ff1be-4b37-4701-b9a8-dc22e48b06b8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"5823e4b0-afba-419b-8069-ae185ec3b1be");
INSERT INTO SM_AH
	VALUES ("186ff1be-4b37-4701-b9a8-dc22e48b06b8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("186ff1be-4b37-4701-b9a8-dc22e48b06b8",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("4a0d7830-18ed-416b-8efb-987121b9515b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"6a221843-5387-4974-a90a-b1baac91c919");
INSERT INTO SM_AH
	VALUES ("4a0d7830-18ed-416b-8efb-987121b9515b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("4a0d7830-18ed-416b-8efb-987121b9515b",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("99c2bfce-0b3e-4368-a530-e25e3d146168",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"8765aee0-2d70-4011-b2f4-1d0143ffeadd");
INSERT INTO SM_AH
	VALUES ("99c2bfce-0b3e-4368-a530-e25e3d146168",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("99c2bfce-0b3e-4368-a530-e25e3d146168",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("5994a9db-42b8-4f9b-9c73-d43e390e8bb5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"a5e1305c-9e91-490f-a601-73fdc8273c49");
INSERT INTO SM_AH
	VALUES ("5994a9db-42b8-4f9b-9c73-d43e390e8bb5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("5994a9db-42b8-4f9b-9c73-d43e390e8bb5",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("8ed379ff-37cb-4c2d-8f70-9a74c8f7fb92",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"c627ad0b-20b7-4c56-86e6-3ab7e9d5f897");
INSERT INTO SM_AH
	VALUES ("8ed379ff-37cb-4c2d-8f70-9a74c8f7fb92",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("8ed379ff-37cb-4c2d-8f70-9a74c8f7fb92",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("12ac1659-f85a-4d3e-bcaa-69e71f160cab",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	"42db9ce2-853a-43f5-9952-13f95c7b2e5b");
INSERT INTO SM_AH
	VALUES ("12ac1659-f85a-4d3e-bcaa-69e71f160cab",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67");
INSERT INTO SM_ACT
	VALUES ("12ac1659-f85a-4d3e-bcaa-69e71f160cab",
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	3,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("8b550e7c-615a-45cf-8f90-356fdee2f05a",
	8,
	"5dae3f20-f358-4968-a88c-8bf4fb4d2d67",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'ex1::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("3fb865c8-f1ff-44aa-90de-18000d4810a2",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"dd308986-615b-4f0f-bc66-79cb17a37879",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("3fb865c8-f1ff-44aa-90de-18000d4810a2");
INSERT INTO GD_NCS
	VALUES ("3fb865c8-f1ff-44aa-90de-18000d4810a2");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"3fb865c8-f1ff-44aa-90de-18000d4810a2");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"3fb865c8-f1ff-44aa-90de-18000d4810a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3fb865c8-f1ff-44aa-90de-18000d4810a2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("34287d3a-cc70-45b6-a220-52e48584fba4",
	752.000000,
	1408.000000,
	"3fb865c8-f1ff-44aa-90de-18000d4810a2");
INSERT INTO DIM_CON
	VALUES ("ac08bbe7-d45a-43bd-9924-f53f54bad239",
	784.000000,
	1360.000000,
	"3fb865c8-f1ff-44aa-90de-18000d4810a2");
INSERT INTO DIM_CON
	VALUES ("0f127489-91f9-4e4f-9b25-77f290331a6d",
	928.000000,
	1456.000000,
	"3fb865c8-f1ff-44aa-90de-18000d4810a2");
INSERT INTO GD_GE
	VALUES ("1773e82a-a6fd-4723-9702-854e54f03b5c",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"315b0949-b32d-4f42-a79c-af668c9cbed0",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("1773e82a-a6fd-4723-9702-854e54f03b5c");
INSERT INTO GD_NCS
	VALUES ("1773e82a-a6fd-4723-9702-854e54f03b5c");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"1773e82a-a6fd-4723-9702-854e54f03b5c");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"1773e82a-a6fd-4723-9702-854e54f03b5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1773e82a-a6fd-4723-9702-854e54f03b5c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1d78cfb3-48e6-4a94-aad0-92e78c6c4ad5",
	2128.000000,
	1616.000000,
	"1773e82a-a6fd-4723-9702-854e54f03b5c");
INSERT INTO DIM_CON
	VALUES ("5798ec31-5748-48d4-8745-ce2bc5c35fdb",
	1712.000000,
	1568.000000,
	"1773e82a-a6fd-4723-9702-854e54f03b5c");
INSERT INTO GD_GE
	VALUES ("5b7ae74c-9bc1-4713-89a4-2855f6e8bd40",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"6fd94b0d-cdef-4e53-b9fe-84c334df6f9b",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("5b7ae74c-9bc1-4713-89a4-2855f6e8bd40");
INSERT INTO GD_NCS
	VALUES ("5b7ae74c-9bc1-4713-89a4-2855f6e8bd40");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"5b7ae74c-9bc1-4713-89a4-2855f6e8bd40");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"5b7ae74c-9bc1-4713-89a4-2855f6e8bd40",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b7ae74c-9bc1-4713-89a4-2855f6e8bd40",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e5456518-c83b-4bc0-8f6c-f25aa20f662d",
	2128.000000,
	1760.000000,
	"5b7ae74c-9bc1-4713-89a4-2855f6e8bd40");
INSERT INTO DIM_CON
	VALUES ("ada8f8f7-deb9-47a3-a5f4-52ff2b97060e",
	2128.000000,
	1792.000000,
	"5b7ae74c-9bc1-4713-89a4-2855f6e8bd40");
INSERT INTO GD_GE
	VALUES ("04d93c35-f5dc-49d4-8fae-0c1ce2baf17a",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"4452bebf-d085-458a-a9ba-e5ad1c4ab321",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("04d93c35-f5dc-49d4-8fae-0c1ce2baf17a");
INSERT INTO GD_NCS
	VALUES ("04d93c35-f5dc-49d4-8fae-0c1ce2baf17a");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"04d93c35-f5dc-49d4-8fae-0c1ce2baf17a");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"04d93c35-f5dc-49d4-8fae-0c1ce2baf17a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("04d93c35-f5dc-49d4-8fae-0c1ce2baf17a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b27d5193-9b5d-47f1-8ce3-6b0e27f6e5a5",
	2128.000000,
	1920.000000,
	"04d93c35-f5dc-49d4-8fae-0c1ce2baf17a");
INSERT INTO DIM_CON
	VALUES ("828fed09-731b-4f82-822a-72e0370dab96",
	2128.000000,
	1952.000000,
	"04d93c35-f5dc-49d4-8fae-0c1ce2baf17a");
INSERT INTO GD_GE
	VALUES ("847257c4-76b5-4335-87dd-6d8a72b3fe6e",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"10bd892a-1d8a-4b51-94ff-1e8e2d39d98a",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("847257c4-76b5-4335-87dd-6d8a72b3fe6e");
INSERT INTO GD_NCS
	VALUES ("847257c4-76b5-4335-87dd-6d8a72b3fe6e");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"847257c4-76b5-4335-87dd-6d8a72b3fe6e");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"847257c4-76b5-4335-87dd-6d8a72b3fe6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("847257c4-76b5-4335-87dd-6d8a72b3fe6e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("395fe95f-2ca8-40f7-8f49-b2405342cba6",
	2592.000000,
	1632.000000,
	"847257c4-76b5-4335-87dd-6d8a72b3fe6e");
INSERT INTO GD_GE
	VALUES ("9a43e181-08e4-4836-b61c-0135a41a8e8f",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"6264a386-3d0e-4b27-88fb-982a362e7487",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("9a43e181-08e4-4836-b61c-0135a41a8e8f");
INSERT INTO GD_NCS
	VALUES ("9a43e181-08e4-4836-b61c-0135a41a8e8f");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"9a43e181-08e4-4836-b61c-0135a41a8e8f");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"9a43e181-08e4-4836-b61c-0135a41a8e8f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9a43e181-08e4-4836-b61c-0135a41a8e8f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("73b4a8e5-b87b-4174-953f-9d874673a1ef",
	2128.000000,
	2048.000000,
	"9a43e181-08e4-4836-b61c-0135a41a8e8f");
INSERT INTO DIM_CON
	VALUES ("e4e2eb1f-6963-421f-ab06-c1de1ba0d232",
	2128.000000,
	2080.000000,
	"9a43e181-08e4-4836-b61c-0135a41a8e8f");
INSERT INTO GD_GE
	VALUES ("4f0be0fc-0ba1-4e21-b634-14ac24b598d5",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"dc85e222-b1cb-4587-831c-684d253c5567",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("4f0be0fc-0ba1-4e21-b634-14ac24b598d5");
INSERT INTO GD_NCS
	VALUES ("4f0be0fc-0ba1-4e21-b634-14ac24b598d5");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"4f0be0fc-0ba1-4e21-b634-14ac24b598d5");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"4f0be0fc-0ba1-4e21-b634-14ac24b598d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4f0be0fc-0ba1-4e21-b634-14ac24b598d5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3556abe6-e5a9-473b-a371-d5ee53c089fc",
	2400.000000,
	2080.000000,
	"4f0be0fc-0ba1-4e21-b634-14ac24b598d5");
INSERT INTO DIM_CON
	VALUES ("f0af3cc7-c790-427b-aabc-05502891fa28",
	2608.000000,
	2016.000000,
	"4f0be0fc-0ba1-4e21-b634-14ac24b598d5");
INSERT INTO GD_GE
	VALUES ("f48c275c-f7b9-4232-86b1-f25a3f13f2cc",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"eba8f1ab-a987-437e-934b-7d1735b281f6",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("f48c275c-f7b9-4232-86b1-f25a3f13f2cc");
INSERT INTO GD_NCS
	VALUES ("f48c275c-f7b9-4232-86b1-f25a3f13f2cc");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"f48c275c-f7b9-4232-86b1-f25a3f13f2cc");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"f48c275c-f7b9-4232-86b1-f25a3f13f2cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f48c275c-f7b9-4232-86b1-f25a3f13f2cc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a59082f9-f8f3-4e4a-b94a-4230a92b7688",
	2608.000000,
	1968.000000,
	"f48c275c-f7b9-4232-86b1-f25a3f13f2cc");
INSERT INTO DIM_CON
	VALUES ("d8653d77-37eb-4be3-b7da-6fe9ffdc5b8b",
	2608.000000,
	1872.000000,
	"f48c275c-f7b9-4232-86b1-f25a3f13f2cc");
INSERT INTO GD_GE
	VALUES ("f9aa9873-d63f-41fd-b11e-83821e33c06a",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"85176e11-fb31-49c4-a9e7-632e0198386a",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("f9aa9873-d63f-41fd-b11e-83821e33c06a");
INSERT INTO GD_NCS
	VALUES ("f9aa9873-d63f-41fd-b11e-83821e33c06a");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"f9aa9873-d63f-41fd-b11e-83821e33c06a");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"f9aa9873-d63f-41fd-b11e-83821e33c06a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9aa9873-d63f-41fd-b11e-83821e33c06a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10e07b3d-b037-4780-bdc2-d0b804cbadac",
	2608.000000,
	1808.000000,
	"f9aa9873-d63f-41fd-b11e-83821e33c06a");
INSERT INTO DIM_CON
	VALUES ("c6c5c06c-ed19-4a91-af73-737fe3dff77c",
	2592.000000,
	1712.000000,
	"f9aa9873-d63f-41fd-b11e-83821e33c06a");
INSERT INTO GD_GE
	VALUES ("5b37df96-6dea-45c7-882f-b2d5c671bc50",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"11d1af5b-773b-4d07-ae0f-35481c233584",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("5b37df96-6dea-45c7-882f-b2d5c671bc50");
INSERT INTO GD_NCS
	VALUES ("5b37df96-6dea-45c7-882f-b2d5c671bc50");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"5b37df96-6dea-45c7-882f-b2d5c671bc50");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"5b37df96-6dea-45c7-882f-b2d5c671bc50",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b37df96-6dea-45c7-882f-b2d5c671bc50",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6e860294-c692-4b9b-860b-055be1116d06",
	928.000000,
	1776.000000,
	"5b37df96-6dea-45c7-882f-b2d5c671bc50");
INSERT INTO DIM_CON
	VALUES ("58289fa0-187b-400c-8b00-7ea301686ade",
	928.000000,
	1680.000000,
	"5b37df96-6dea-45c7-882f-b2d5c671bc50");
INSERT INTO GD_GE
	VALUES ("3b543c7a-959a-4ef7-9fb1-3fe9095151ac",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"13b3fb7b-60f6-4128-9ca2-2ba3d3607ed9",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("3b543c7a-959a-4ef7-9fb1-3fe9095151ac");
INSERT INTO GD_NCS
	VALUES ("3b543c7a-959a-4ef7-9fb1-3fe9095151ac");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"3b543c7a-959a-4ef7-9fb1-3fe9095151ac");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"3b543c7a-959a-4ef7-9fb1-3fe9095151ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b543c7a-959a-4ef7-9fb1-3fe9095151ac",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fb0a03e2-43c7-4db2-87fe-d066404f07cd",
	928.000000,
	1840.000000,
	"3b543c7a-959a-4ef7-9fb1-3fe9095151ac");
INSERT INTO DIM_CON
	VALUES ("735efee1-9f69-4170-803b-19be231b7444",
	928.000000,
	1936.000000,
	"3b543c7a-959a-4ef7-9fb1-3fe9095151ac");
INSERT INTO GD_GE
	VALUES ("c1fdabea-2c8c-4d2c-88a6-8389dce87b12",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"50406259-07e9-4f99-a2a0-832253094077",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("c1fdabea-2c8c-4d2c-88a6-8389dce87b12");
INSERT INTO GD_NCS
	VALUES ("c1fdabea-2c8c-4d2c-88a6-8389dce87b12");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"c1fdabea-2c8c-4d2c-88a6-8389dce87b12");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"c1fdabea-2c8c-4d2c-88a6-8389dce87b12",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1fdabea-2c8c-4d2c-88a6-8389dce87b12",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1b3b7ad8-e0d7-421e-ad40-f3e91a80d449",
	928.000000,
	2016.000000,
	"c1fdabea-2c8c-4d2c-88a6-8389dce87b12");
INSERT INTO DIM_CON
	VALUES ("2f48587f-0cf6-4505-aa0e-c443185f1ca1",
	1072.000000,
	2080.000000,
	"c1fdabea-2c8c-4d2c-88a6-8389dce87b12");
INSERT INTO GD_GE
	VALUES ("4bd8eda7-ad35-4c9e-a01e-e6702f5cde46",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"8e20191e-2e1c-466a-bed8-4db5b96478a2",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("4bd8eda7-ad35-4c9e-a01e-e6702f5cde46");
INSERT INTO GD_NCS
	VALUES ("4bd8eda7-ad35-4c9e-a01e-e6702f5cde46");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"4bd8eda7-ad35-4c9e-a01e-e6702f5cde46");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"4bd8eda7-ad35-4c9e-a01e-e6702f5cde46",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4bd8eda7-ad35-4c9e-a01e-e6702f5cde46",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("41bd3890-8a37-4324-b1f2-58c83fd9d4da",
	928.000000,
	1616.000000,
	"4bd8eda7-ad35-4c9e-a01e-e6702f5cde46");
INSERT INTO DIM_CON
	VALUES ("a090e89c-e905-4ae8-8e9b-574a70ee112c",
	928.000000,
	1536.000000,
	"4bd8eda7-ad35-4c9e-a01e-e6702f5cde46");
INSERT INTO GD_GE
	VALUES ("91eca3f1-d6fc-4847-987c-12fc15c6102a",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"e9d34dcf-71ac-4dbf-b46b-6b1a0384bb1a",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("91eca3f1-d6fc-4847-987c-12fc15c6102a");
INSERT INTO GD_NCS
	VALUES ("91eca3f1-d6fc-4847-987c-12fc15c6102a");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"91eca3f1-d6fc-4847-987c-12fc15c6102a");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"91eca3f1-d6fc-4847-987c-12fc15c6102a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91eca3f1-d6fc-4847-987c-12fc15c6102a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("dfbc58c4-69a6-4050-b3f7-b18662b72b02",
	1280.000000,
	1376.000000,
	"91eca3f1-d6fc-4847-987c-12fc15c6102a");
INSERT INTO DIM_CON
	VALUES ("af01407b-6e82-4a91-82df-32d30b32d8b3",
	1424.000000,
	1456.000000,
	"91eca3f1-d6fc-4847-987c-12fc15c6102a");
INSERT INTO GD_GE
	VALUES ("76ae1c31-f9a2-44c8-9dd2-d67e2d160465",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"6cede05b-df9d-4273-abcf-23dbe3205f7f",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("76ae1c31-f9a2-44c8-9dd2-d67e2d160465");
INSERT INTO GD_NCS
	VALUES ("76ae1c31-f9a2-44c8-9dd2-d67e2d160465");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"76ae1c31-f9a2-44c8-9dd2-d67e2d160465");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"76ae1c31-f9a2-44c8-9dd2-d67e2d160465",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("76ae1c31-f9a2-44c8-9dd2-d67e2d160465",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("12ed9317-494b-4307-8b2b-3d51993daa15",
	1424.000000,
	1520.000000,
	"76ae1c31-f9a2-44c8-9dd2-d67e2d160465");
INSERT INTO DIM_CON
	VALUES ("b2a22ab1-5dc8-4253-9c2e-f8363c9dd224",
	1456.000000,
	1616.000000,
	"76ae1c31-f9a2-44c8-9dd2-d67e2d160465");
INSERT INTO GD_GE
	VALUES ("d0c34690-c597-4f03-abcd-a221e9657ab2",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"69684998-a720-4c79-9500-b9ec0ae32d5c",
	41,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("d0c34690-c597-4f03-abcd-a221e9657ab2");
INSERT INTO GD_NCS
	VALUES ("d0c34690-c597-4f03-abcd-a221e9657ab2");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"d0c34690-c597-4f03-abcd-a221e9657ab2");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"d0c34690-c597-4f03-abcd-a221e9657ab2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d0c34690-c597-4f03-abcd-a221e9657ab2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ad81e799-efef-4b8c-86c9-506d8f787d0a",
	1456.000000,
	1680.000000,
	"d0c34690-c597-4f03-abcd-a221e9657ab2");
INSERT INTO DIM_CON
	VALUES ("5024d850-3bbf-4cbe-9642-238b345eb1f5",
	1600.000000,
	1728.000000,
	"d0c34690-c597-4f03-abcd-a221e9657ab2");
INSERT INTO GD_GE
	VALUES ("2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"f4fbed71-a3a2-4e0a-b979-fd984553ac4c",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4d145820-3408-4586-8b89-d26787449055",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4d145820-3408-4586-8b89-d26787449055");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4d145820-3408-4586-8b89-d26787449055",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4d145820-3408-4586-8b89-d26787449055",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a7b0c21a-258b-4cba-a4f4-8c272e4bb159",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"a7b0c21a-258b-4cba-a4f4-8c272e4bb159");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"a7b0c21a-258b-4cba-a4f4-8c272e4bb159",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a7b0c21a-258b-4cba-a4f4-8c272e4bb159",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("807387b3-8ac2-4880-9157-e8408a37e9af",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"807387b3-8ac2-4880-9157-e8408a37e9af");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"807387b3-8ac2-4880-9157-e8408a37e9af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("807387b3-8ac2-4880-9157-e8408a37e9af",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("31b8db50-5e9b-4b84-b413-a5cb124da68b",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000",
	"9df01b3a-c854-4d3e-ae13-1e41e434fb97",
	"23af9ea6-f862-454d-9861-380dfdad7478");
INSERT INTO GD_LS
	VALUES ("b0852537-e16c-4aa7-80cc-951fd275750f",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"31b8db50-5e9b-4b84-b413-a5cb124da68b",
	"23af9ea6-f862-454d-9861-380dfdad7478",
	"ea5b5a1d-25f6-4a35-a17c-30ed6f724737");
INSERT INTO GD_LS
	VALUES ("bd34516a-3c1a-4281-b897-e88a5ee6bb70",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"b0852537-e16c-4aa7-80cc-951fd275750f",
	"ea5b5a1d-25f6-4a35-a17c-30ed6f724737",
	"1153cf3a-f851-47a6-8d31-2c53e7f93842");
INSERT INTO DIM_WAY
	VALUES ("9df01b3a-c854-4d3e-ae13-1e41e434fb97",
	2128.000000,
	1616.000000,
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("23af9ea6-f862-454d-9861-380dfdad7478",
	2176.000000,
	1616.000000,
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000",
	"9df01b3a-c854-4d3e-ae13-1e41e434fb97");
INSERT INTO DIM_WAY
	VALUES ("ea5b5a1d-25f6-4a35-a17c-30ed6f724737",
	2176.000000,
	1760.000000,
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000",
	"23af9ea6-f862-454d-9861-380dfdad7478");
INSERT INTO DIM_WAY
	VALUES ("1153cf3a-f851-47a6-8d31-2c53e7f93842",
	2128.000000,
	1760.000000,
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000",
	"ea5b5a1d-25f6-4a35-a17c-30ed6f724737");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ffa96d3-8fc8-4b17-9991-dcee73760c15",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1d78cfb3-48e6-4a94-aad0-92e78c6c4ad5",
	"e5456518-c83b-4bc0-8f6c-f25aa20f662d",
	"2ffa96d3-8fc8-4b17-9991-dcee73760c15");
INSERT INTO GD_GE
	VALUES ("9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"f27b1ab7-34dc-46b5-b282-8e81f40f1b32",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b6cd1491-e95e-4d68-b176-d681def48e14",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b6cd1491-e95e-4d68-b176-d681def48e14");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b6cd1491-e95e-4d68-b176-d681def48e14",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b6cd1491-e95e-4d68-b176-d681def48e14",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("df5cde0d-90cb-47f1-afec-9c66169f26b2",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"df5cde0d-90cb-47f1-afec-9c66169f26b2");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"df5cde0d-90cb-47f1-afec-9c66169f26b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("df5cde0d-90cb-47f1-afec-9c66169f26b2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ddbfb685-7f64-479d-81e8-10c36b1fecc6",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ddbfb685-7f64-479d-81e8-10c36b1fecc6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ddbfb685-7f64-479d-81e8-10c36b1fecc6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ddbfb685-7f64-479d-81e8-10c36b1fecc6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("dd89ab43-131f-4c78-a130-f7b560da6e93",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000",
	"f2a7d7ac-142e-41cd-b394-b4100fb777ab",
	"65f58fb9-0bbd-44be-bd17-03be31ce8c6c");
INSERT INTO GD_LS
	VALUES ("d7973c73-4dd2-4113-aeaa-fd3bbe7b848c",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"dd89ab43-131f-4c78-a130-f7b560da6e93",
	"65f58fb9-0bbd-44be-bd17-03be31ce8c6c",
	"c3dcfa83-6c1a-4c47-a183-b03ae90645e4");
INSERT INTO GD_LS
	VALUES ("7cb4a11e-380f-417d-9edf-f53c37013c06",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"d7973c73-4dd2-4113-aeaa-fd3bbe7b848c",
	"c3dcfa83-6c1a-4c47-a183-b03ae90645e4",
	"314613fd-f186-4518-852f-1c3fe92ca23e");
INSERT INTO DIM_WAY
	VALUES ("f2a7d7ac-142e-41cd-b394-b4100fb777ab",
	2128.000000,
	1792.000000,
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("65f58fb9-0bbd-44be-bd17-03be31ce8c6c",
	2176.000000,
	1792.000000,
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000",
	"f2a7d7ac-142e-41cd-b394-b4100fb777ab");
INSERT INTO DIM_WAY
	VALUES ("c3dcfa83-6c1a-4c47-a183-b03ae90645e4",
	2176.000000,
	1920.000000,
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000",
	"65f58fb9-0bbd-44be-bd17-03be31ce8c6c");
INSERT INTO DIM_WAY
	VALUES ("314613fd-f186-4518-852f-1c3fe92ca23e",
	2128.000000,
	1920.000000,
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000",
	"c3dcfa83-6c1a-4c47-a183-b03ae90645e4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ada8f8f7-deb9-47a3-a5f4-52ff2b97060e",
	"b27d5193-9b5d-47f1-8ce3-6b0e27f6e5a5",
	"9f23a99e-a366-4c9f-ac18-8c1b2e76f1fa");
INSERT INTO GD_GE
	VALUES ("0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"d9cbe647-6106-4a89-ad00-ad8c1fce745a",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1a184d3e-e660-4b3c-a8c3-278bc4d2b6f2",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1a184d3e-e660-4b3c-a8c3-278bc4d2b6f2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1a184d3e-e660-4b3c-a8c3-278bc4d2b6f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1a184d3e-e660-4b3c-a8c3-278bc4d2b6f2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f54bf45d-a4ec-4c94-aef0-72e3c751d5c5",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"f54bf45d-a4ec-4c94-aef0-72e3c751d5c5");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"f54bf45d-a4ec-4c94-aef0-72e3c751d5c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f54bf45d-a4ec-4c94-aef0-72e3c751d5c5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("28de1e9b-74ee-4d12-8caa-e740b4402704",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"28de1e9b-74ee-4d12-8caa-e740b4402704");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"28de1e9b-74ee-4d12-8caa-e740b4402704",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("28de1e9b-74ee-4d12-8caa-e740b4402704",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("543328d3-dc56-4b9a-9e5b-a0dc83067496",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000",
	"eddcacec-ab85-4fda-9daf-6454b729bf57",
	"41efda36-8f9b-4f75-96de-b71f62e2af3e");
INSERT INTO GD_LS
	VALUES ("b7c9df61-3189-438e-bdce-954dce436cc8",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"543328d3-dc56-4b9a-9e5b-a0dc83067496",
	"41efda36-8f9b-4f75-96de-b71f62e2af3e",
	"c6f50cc4-91d8-47a3-bcb9-86880ed30cab");
INSERT INTO GD_LS
	VALUES ("59a6bac9-fbb5-481f-bb61-d1985e3ddb6c",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"b7c9df61-3189-438e-bdce-954dce436cc8",
	"c6f50cc4-91d8-47a3-bcb9-86880ed30cab",
	"197a4d59-7fe8-4814-80ec-bb2dc0b39cee");
INSERT INTO DIM_WAY
	VALUES ("eddcacec-ab85-4fda-9daf-6454b729bf57",
	2128.000000,
	1952.000000,
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("41efda36-8f9b-4f75-96de-b71f62e2af3e",
	2176.000000,
	1952.000000,
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000",
	"eddcacec-ab85-4fda-9daf-6454b729bf57");
INSERT INTO DIM_WAY
	VALUES ("c6f50cc4-91d8-47a3-bcb9-86880ed30cab",
	2176.000000,
	2048.000000,
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000",
	"41efda36-8f9b-4f75-96de-b71f62e2af3e");
INSERT INTO DIM_WAY
	VALUES ("197a4d59-7fe8-4814-80ec-bb2dc0b39cee",
	2128.000000,
	2048.000000,
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000",
	"c6f50cc4-91d8-47a3-bcb9-86880ed30cab");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0cbb42d9-91d3-4ec0-b6d9-f1094f826075",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("828fed09-731b-4f82-822a-72e0370dab96",
	"73b4a8e5-b87b-4174-953f-9d874673a1ef",
	"0cbb42d9-91d3-4ec0-b6d9-f1094f826075");
INSERT INTO GD_GE
	VALUES ("23756560-efb5-46bd-bc48-acf0d54c6254",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"b07a36c7-1619-4c83-8751-7ed7d2ed5fdb",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("23756560-efb5-46bd-bc48-acf0d54c6254",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4d84c9b8-1dfb-437c-84bc-563c1612833b",
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4d84c9b8-1dfb-437c-84bc-563c1612833b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4d84c9b8-1dfb-437c-84bc-563c1612833b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4d84c9b8-1dfb-437c-84bc-563c1612833b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4ecb9e06-1a9a-4aa1-a2a4-e1f500181f98",
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"4ecb9e06-1a9a-4aa1-a2a4-e1f500181f98");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"4ecb9e06-1a9a-4aa1-a2a4-e1f500181f98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ecb9e06-1a9a-4aa1-a2a4-e1f500181f98",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("753be6e2-decf-4a52-acc9-53deaa02abd5",
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"753be6e2-decf-4a52-acc9-53deaa02abd5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"753be6e2-decf-4a52-acc9-53deaa02abd5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("753be6e2-decf-4a52-acc9-53deaa02abd5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("cfa20769-e721-4f33-a595-0f23f2d84129",
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	"00000000-0000-0000-0000-000000000000",
	"1f33b9d7-1638-43ab-ad7e-fda77a826823",
	"08ce79a6-0524-4739-bca7-46fb0d8d7ed2");
INSERT INTO DIM_WAY
	VALUES ("1f33b9d7-1638-43ab-ad7e-fda77a826823",
	2128.000000,
	2080.000000,
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("08ce79a6-0524-4739-bca7-46fb0d8d7ed2",
	2400.000000,
	2080.000000,
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	"00000000-0000-0000-0000-000000000000",
	"1f33b9d7-1638-43ab-ad7e-fda77a826823");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"23756560-efb5-46bd-bc48-acf0d54c6254",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("23756560-efb5-46bd-bc48-acf0d54c6254",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e4e2eb1f-6963-421f-ab06-c1de1ba0d232",
	"3556abe6-e5a9-473b-a371-d5ee53c089fc",
	"23756560-efb5-46bd-bc48-acf0d54c6254");
INSERT INTO GD_GE
	VALUES ("f690e39e-0a89-4495-9477-5a1162d6cb34",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"f4f5f15a-2149-4e9d-b16f-1dfccd545060",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("f690e39e-0a89-4495-9477-5a1162d6cb34",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4c91948f-f003-436d-8116-a96126e39601",
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4c91948f-f003-436d-8116-a96126e39601");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4c91948f-f003-436d-8116-a96126e39601",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4c91948f-f003-436d-8116-a96126e39601",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("67d2c14e-b36d-4aaf-8aab-6e5ab7a6024a",
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"67d2c14e-b36d-4aaf-8aab-6e5ab7a6024a");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"67d2c14e-b36d-4aaf-8aab-6e5ab7a6024a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67d2c14e-b36d-4aaf-8aab-6e5ab7a6024a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c94fdabf-8ac9-463b-9ed6-e801c967e1d2",
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c94fdabf-8ac9-463b-9ed6-e801c967e1d2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c94fdabf-8ac9-463b-9ed6-e801c967e1d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c94fdabf-8ac9-463b-9ed6-e801c967e1d2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9915089a-7f61-49b2-a394-58d2b697cc93",
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	"00000000-0000-0000-0000-000000000000",
	"38276fc3-056c-49bb-826c-7d310e5be448",
	"3383606f-cfd7-44fc-9a16-065f788c95fd");
INSERT INTO DIM_WAY
	VALUES ("38276fc3-056c-49bb-826c-7d310e5be448",
	2608.000000,
	2016.000000,
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3383606f-cfd7-44fc-9a16-065f788c95fd",
	2608.000000,
	1968.000000,
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	"00000000-0000-0000-0000-000000000000",
	"38276fc3-056c-49bb-826c-7d310e5be448");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f690e39e-0a89-4495-9477-5a1162d6cb34",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f690e39e-0a89-4495-9477-5a1162d6cb34",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f0af3cc7-c790-427b-aabc-05502891fa28",
	"a59082f9-f8f3-4e4a-b94a-4230a92b7688",
	"f690e39e-0a89-4495-9477-5a1162d6cb34");
INSERT INTO GD_GE
	VALUES ("0e806253-8cee-4371-8fe6-afdde15c36c6",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"900f3e38-9201-42c3-95e6-ffe29741545b",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("0e806253-8cee-4371-8fe6-afdde15c36c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5c0b512f-9d4a-4bb5-918f-3849bc226d50",
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5c0b512f-9d4a-4bb5-918f-3849bc226d50");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5c0b512f-9d4a-4bb5-918f-3849bc226d50",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5c0b512f-9d4a-4bb5-918f-3849bc226d50",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d69b6ecc-e846-4961-8ce5-5ca9f4d8ffd2",
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"d69b6ecc-e846-4961-8ce5-5ca9f4d8ffd2");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"d69b6ecc-e846-4961-8ce5-5ca9f4d8ffd2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d69b6ecc-e846-4961-8ce5-5ca9f4d8ffd2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b5686787-9462-4f50-af22-47af988261c9",
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b5686787-9462-4f50-af22-47af988261c9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b5686787-9462-4f50-af22-47af988261c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b5686787-9462-4f50-af22-47af988261c9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e37246bb-c2c6-47cc-9475-0a8529088343",
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	"00000000-0000-0000-0000-000000000000",
	"b339eae3-6339-4509-84cd-3cf5419716e7",
	"69abf674-9f10-4112-b825-f6db3ccecb11");
INSERT INTO DIM_WAY
	VALUES ("b339eae3-6339-4509-84cd-3cf5419716e7",
	2608.000000,
	1872.000000,
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("69abf674-9f10-4112-b825-f6db3ccecb11",
	2608.000000,
	1808.000000,
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	"00000000-0000-0000-0000-000000000000",
	"b339eae3-6339-4509-84cd-3cf5419716e7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0e806253-8cee-4371-8fe6-afdde15c36c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0e806253-8cee-4371-8fe6-afdde15c36c6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d8653d77-37eb-4be3-b7da-6fe9ffdc5b8b",
	"10e07b3d-b037-4780-bdc2-d0b804cbadac",
	"0e806253-8cee-4371-8fe6-afdde15c36c6");
INSERT INTO GD_GE
	VALUES ("7c89a712-bdeb-4f27-8b43-86a044bb632b",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"f65a4ea3-8bea-4532-95bf-d79c9c1a1558",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("7c89a712-bdeb-4f27-8b43-86a044bb632b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("440d82d5-9ceb-4780-8e9b-92acec179d63",
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"440d82d5-9ceb-4780-8e9b-92acec179d63");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"440d82d5-9ceb-4780-8e9b-92acec179d63",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("440d82d5-9ceb-4780-8e9b-92acec179d63",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6c06cf34-e692-45ad-9f16-f3cb6ef675a6",
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"6c06cf34-e692-45ad-9f16-f3cb6ef675a6");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"6c06cf34-e692-45ad-9f16-f3cb6ef675a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c06cf34-e692-45ad-9f16-f3cb6ef675a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bc9ec3e8-18d4-4d5e-8766-c96bd1ad73e6",
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bc9ec3e8-18d4-4d5e-8766-c96bd1ad73e6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bc9ec3e8-18d4-4d5e-8766-c96bd1ad73e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bc9ec3e8-18d4-4d5e-8766-c96bd1ad73e6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9c54de5b-7ad3-499a-b52c-c3f93eb70072",
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	"00000000-0000-0000-0000-000000000000",
	"54b0d732-78fd-48b0-859e-6a4a15d0be39",
	"c07f849a-f864-4285-806e-72371ddb759d");
INSERT INTO DIM_WAY
	VALUES ("54b0d732-78fd-48b0-859e-6a4a15d0be39",
	2592.000000,
	1712.000000,
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c07f849a-f864-4285-806e-72371ddb759d",
	2592.000000,
	1632.000000,
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	"00000000-0000-0000-0000-000000000000",
	"54b0d732-78fd-48b0-859e-6a4a15d0be39");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7c89a712-bdeb-4f27-8b43-86a044bb632b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7c89a712-bdeb-4f27-8b43-86a044bb632b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c6c5c06c-ed19-4a91-af73-737fe3dff77c",
	"395fe95f-2ca8-40f7-8f49-b2405342cba6",
	"7c89a712-bdeb-4f27-8b43-86a044bb632b");
INSERT INTO GD_GE
	VALUES ("ccbd6748-411e-4798-83c3-50ba7b5f861a",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"66707fc8-0447-448f-b178-3bc5cdab93d9",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("ccbd6748-411e-4798-83c3-50ba7b5f861a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b5981a35-33e1-4961-bac7-0d4409257d10",
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b5981a35-33e1-4961-bac7-0d4409257d10");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b5981a35-33e1-4961-bac7-0d4409257d10",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b5981a35-33e1-4961-bac7-0d4409257d10",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a4236b57-448c-4092-914e-aae8f9236af1",
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"a4236b57-448c-4092-914e-aae8f9236af1");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"a4236b57-448c-4092-914e-aae8f9236af1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a4236b57-448c-4092-914e-aae8f9236af1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d6f8d855-9764-4698-817a-a1953ef83618",
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d6f8d855-9764-4698-817a-a1953ef83618");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d6f8d855-9764-4698-817a-a1953ef83618",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d6f8d855-9764-4698-817a-a1953ef83618",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("13941d55-cb53-48bc-88bd-e0638c5fb621",
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	"00000000-0000-0000-0000-000000000000",
	"b3bf8646-38ce-4176-a5dd-62d21c51ddac",
	"f4980ada-8913-40ef-87f9-c4eace8f9a9b");
INSERT INTO DIM_WAY
	VALUES ("b3bf8646-38ce-4176-a5dd-62d21c51ddac",
	928.000000,
	1776.000000,
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f4980ada-8913-40ef-87f9-c4eace8f9a9b",
	928.000000,
	1840.000000,
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	"00000000-0000-0000-0000-000000000000",
	"b3bf8646-38ce-4176-a5dd-62d21c51ddac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ccbd6748-411e-4798-83c3-50ba7b5f861a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ccbd6748-411e-4798-83c3-50ba7b5f861a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6e860294-c692-4b9b-860b-055be1116d06",
	"fb0a03e2-43c7-4db2-87fe-d066404f07cd",
	"ccbd6748-411e-4798-83c3-50ba7b5f861a");
INSERT INTO GD_GE
	VALUES ("3039244a-22db-48f4-b590-51d75ee23898",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"7d782341-b42c-48ad-a075-0304c93cf130",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("3039244a-22db-48f4-b590-51d75ee23898",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f7cbac86-9721-473a-bf88-eaadec6a22bc",
	"3039244a-22db-48f4-b590-51d75ee23898",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f7cbac86-9721-473a-bf88-eaadec6a22bc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7cbac86-9721-473a-bf88-eaadec6a22bc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7cbac86-9721-473a-bf88-eaadec6a22bc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("528bbeb9-518f-4924-9e6f-57f66a3c52fd",
	"3039244a-22db-48f4-b590-51d75ee23898",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"528bbeb9-518f-4924-9e6f-57f66a3c52fd");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"528bbeb9-518f-4924-9e6f-57f66a3c52fd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("528bbeb9-518f-4924-9e6f-57f66a3c52fd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2fa77bf1-8890-46fd-9190-70ceeb187a4f",
	"3039244a-22db-48f4-b590-51d75ee23898",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2fa77bf1-8890-46fd-9190-70ceeb187a4f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2fa77bf1-8890-46fd-9190-70ceeb187a4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2fa77bf1-8890-46fd-9190-70ceeb187a4f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("360617d9-f611-446d-944f-f04234d6da32",
	"3039244a-22db-48f4-b590-51d75ee23898",
	"00000000-0000-0000-0000-000000000000",
	"5a0e153d-3145-4650-b00e-6cae2d0fa420",
	"9006b9bb-5dab-439a-8454-3402548f3113");
INSERT INTO DIM_WAY
	VALUES ("5a0e153d-3145-4650-b00e-6cae2d0fa420",
	928.000000,
	1936.000000,
	"3039244a-22db-48f4-b590-51d75ee23898",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9006b9bb-5dab-439a-8454-3402548f3113",
	928.000000,
	2016.000000,
	"3039244a-22db-48f4-b590-51d75ee23898",
	"00000000-0000-0000-0000-000000000000",
	"5a0e153d-3145-4650-b00e-6cae2d0fa420");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3039244a-22db-48f4-b590-51d75ee23898",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3039244a-22db-48f4-b590-51d75ee23898",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("735efee1-9f69-4170-803b-19be231b7444",
	"1b3b7ad8-e0d7-421e-ad40-f3e91a80d449",
	"3039244a-22db-48f4-b590-51d75ee23898");
INSERT INTO GD_GE
	VALUES ("00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"b0984ec2-100d-41d3-929a-8eca2b234b3e",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("03e1c465-3d91-42e9-933c-d1b3b80b4ea2",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"03e1c465-3d91-42e9-933c-d1b3b80b4ea2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"03e1c465-3d91-42e9-933c-d1b3b80b4ea2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03e1c465-3d91-42e9-933c-d1b3b80b4ea2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5b5f81ae-099b-4783-ab65-a530167e7187",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"5b5f81ae-099b-4783-ab65-a530167e7187");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"5b5f81ae-099b-4783-ab65-a530167e7187",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b5f81ae-099b-4783-ab65-a530167e7187",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9afa9b48-2416-404c-a990-feaa4d630d7d",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9afa9b48-2416-404c-a990-feaa4d630d7d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9afa9b48-2416-404c-a990-feaa4d630d7d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9afa9b48-2416-404c-a990-feaa4d630d7d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2c519a89-2de6-49a7-a8dd-31bdbfb213a9",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000",
	"05a59ae5-95cf-4b37-9e98-83172e32242d",
	"94ed9818-605a-46b9-98d2-6976295ae1f7");
INSERT INTO GD_LS
	VALUES ("940da5af-5a08-4719-81e6-65acfdbba27c",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"2c519a89-2de6-49a7-a8dd-31bdbfb213a9",
	"94ed9818-605a-46b9-98d2-6976295ae1f7",
	"39034b1d-2e6b-4523-b8cb-2a6c4395ad57");
INSERT INTO GD_LS
	VALUES ("098f84a4-2c42-46be-badf-998dc08a1f9e",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"940da5af-5a08-4719-81e6-65acfdbba27c",
	"39034b1d-2e6b-4523-b8cb-2a6c4395ad57",
	"aa363a1f-8121-40ec-b927-59d0c580ff0e");
INSERT INTO GD_LS
	VALUES ("39f912c4-83b7-47f8-a884-16ffdf5f60a4",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"098f84a4-2c42-46be-badf-998dc08a1f9e",
	"aa363a1f-8121-40ec-b927-59d0c580ff0e",
	"08182ece-0458-46d6-81fb-8e50eff8a273");
INSERT INTO DIM_WAY
	VALUES ("05a59ae5-95cf-4b37-9e98-83172e32242d",
	752.000000,
	1408.000000,
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("94ed9818-605a-46b9-98d2-6976295ae1f7",
	624.000000,
	1408.000000,
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000",
	"05a59ae5-95cf-4b37-9e98-83172e32242d");
INSERT INTO DIM_WAY
	VALUES ("39034b1d-2e6b-4523-b8cb-2a6c4395ad57",
	624.000000,
	1328.000000,
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000",
	"94ed9818-605a-46b9-98d2-6976295ae1f7");
INSERT INTO DIM_WAY
	VALUES ("aa363a1f-8121-40ec-b927-59d0c580ff0e",
	784.000000,
	1328.000000,
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000",
	"39034b1d-2e6b-4523-b8cb-2a6c4395ad57");
INSERT INTO DIM_WAY
	VALUES ("08182ece-0458-46d6-81fb-8e50eff8a273",
	784.000000,
	1360.000000,
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000",
	"aa363a1f-8121-40ec-b927-59d0c580ff0e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("00b93ac5-bdfa-46a9-9089-5b5cba54afbb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("34287d3a-cc70-45b6-a220-52e48584fba4",
	"ac08bbe7-d45a-43bd-9924-f53f54bad239",
	"00b93ac5-bdfa-46a9-9089-5b5cba54afbb");
INSERT INTO GD_GE
	VALUES ("b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"5823e4b0-afba-419b-8069-ae185ec3b1be",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e6f41767-0fad-4b5b-a72b-95eeb2834f5e",
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e6f41767-0fad-4b5b-a72b-95eeb2834f5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e6f41767-0fad-4b5b-a72b-95eeb2834f5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e6f41767-0fad-4b5b-a72b-95eeb2834f5e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9c205579-446c-4893-a20e-80897a90cbdd",
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"9c205579-446c-4893-a20e-80897a90cbdd");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"9c205579-446c-4893-a20e-80897a90cbdd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c205579-446c-4893-a20e-80897a90cbdd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("25a94d5e-526b-4677-9fa0-457ab0799d5e",
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"25a94d5e-526b-4677-9fa0-457ab0799d5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"25a94d5e-526b-4677-9fa0-457ab0799d5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("25a94d5e-526b-4677-9fa0-457ab0799d5e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("828e3fbb-b370-4d5c-b2ed-240b5109a7b9",
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	"00000000-0000-0000-0000-000000000000",
	"e39b7cdc-590b-456f-bcef-6110fba9096a",
	"44a6ecd3-28be-4853-b5e4-f69d9fe9d576");
INSERT INTO DIM_WAY
	VALUES ("e39b7cdc-590b-456f-bcef-6110fba9096a",
	928.000000,
	1616.000000,
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("44a6ecd3-28be-4853-b5e4-f69d9fe9d576",
	928.000000,
	1680.000000,
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	"00000000-0000-0000-0000-000000000000",
	"e39b7cdc-590b-456f-bcef-6110fba9096a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b7e7659b-cbf1-4af7-844d-70fb861d75ac",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("41bd3890-8a37-4324-b1f2-58c83fd9d4da",
	"58289fa0-187b-400c-8b00-7ea301686ade",
	"b7e7659b-cbf1-4af7-844d-70fb861d75ac");
INSERT INTO GD_GE
	VALUES ("49eb6442-dade-4575-864a-1db880e6ed3b",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"6a221843-5387-4974-a90a-b1baac91c919",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("49eb6442-dade-4575-864a-1db880e6ed3b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6a4e71ac-2e24-498f-8315-730dcd3e1280",
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6a4e71ac-2e24-498f-8315-730dcd3e1280");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6a4e71ac-2e24-498f-8315-730dcd3e1280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6a4e71ac-2e24-498f-8315-730dcd3e1280",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8c2f1413-1f67-435a-846b-603804c71e2a",
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"8c2f1413-1f67-435a-846b-603804c71e2a");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"8c2f1413-1f67-435a-846b-603804c71e2a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8c2f1413-1f67-435a-846b-603804c71e2a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("033032ec-7f1b-40c6-b515-6a4b48599ca1",
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"033032ec-7f1b-40c6-b515-6a4b48599ca1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"033032ec-7f1b-40c6-b515-6a4b48599ca1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("033032ec-7f1b-40c6-b515-6a4b48599ca1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3f38bc87-f35a-4c72-9dbb-3a32a694254b",
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	"00000000-0000-0000-0000-000000000000",
	"89fb4b13-7627-4be8-af66-b2969d72f43e",
	"e438238d-6da4-4da8-b49a-24829e5ada1d");
INSERT INTO DIM_WAY
	VALUES ("89fb4b13-7627-4be8-af66-b2969d72f43e",
	928.000000,
	1456.000000,
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e438238d-6da4-4da8-b49a-24829e5ada1d",
	928.000000,
	1536.000000,
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	"00000000-0000-0000-0000-000000000000",
	"89fb4b13-7627-4be8-af66-b2969d72f43e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"49eb6442-dade-4575-864a-1db880e6ed3b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("49eb6442-dade-4575-864a-1db880e6ed3b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0f127489-91f9-4e4f-9b25-77f290331a6d",
	"a090e89c-e905-4ae8-8e9b-574a70ee112c",
	"49eb6442-dade-4575-864a-1db880e6ed3b");
INSERT INTO GD_GE
	VALUES ("2dcd3926-b053-43a1-ab1d-919311236177",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"8765aee0-2d70-4011-b2f4-1d0143ffeadd",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6d693ac4-315e-4d74-8461-93257d30ae18",
	"2dcd3926-b053-43a1-ab1d-919311236177",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6d693ac4-315e-4d74-8461-93257d30ae18");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6d693ac4-315e-4d74-8461-93257d30ae18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6d693ac4-315e-4d74-8461-93257d30ae18",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2ab03956-cdf4-423f-ae71-384ee1cefd06",
	"2dcd3926-b053-43a1-ab1d-919311236177",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"2ab03956-cdf4-423f-ae71-384ee1cefd06");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"2ab03956-cdf4-423f-ae71-384ee1cefd06",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ab03956-cdf4-423f-ae71-384ee1cefd06",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ddcae2b9-4ca6-4e55-a660-09f28e77f0dd",
	"2dcd3926-b053-43a1-ab1d-919311236177",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ddcae2b9-4ca6-4e55-a660-09f28e77f0dd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ddcae2b9-4ca6-4e55-a660-09f28e77f0dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ddcae2b9-4ca6-4e55-a660-09f28e77f0dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d5861e87-ae63-435a-ac61-74bb67168aaa",
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000",
	"2210732f-8a4b-42c3-82d4-4b28e585d539",
	"676e691f-4885-471c-87a7-a2ff6eb343e1");
INSERT INTO GD_LS
	VALUES ("3656a122-5156-4776-9412-e6228aa8f53c",
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"d5861e87-ae63-435a-ac61-74bb67168aaa",
	"676e691f-4885-471c-87a7-a2ff6eb343e1",
	"a5f8ed55-ab4a-465d-b5a3-f5a55b5ff694");
INSERT INTO GD_LS
	VALUES ("ae01b911-095c-48b6-a934-6f65c8de7a82",
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"3656a122-5156-4776-9412-e6228aa8f53c",
	"a5f8ed55-ab4a-465d-b5a3-f5a55b5ff694",
	"957288e0-617b-4887-a6bb-de3527176a11");
INSERT INTO DIM_WAY
	VALUES ("2210732f-8a4b-42c3-82d4-4b28e585d539",
	1072.000000,
	2080.000000,
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("676e691f-4885-471c-87a7-a2ff6eb343e1",
	1168.000000,
	2080.000000,
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000",
	"2210732f-8a4b-42c3-82d4-4b28e585d539");
INSERT INTO DIM_WAY
	VALUES ("a5f8ed55-ab4a-465d-b5a3-f5a55b5ff694",
	1168.000000,
	1376.000000,
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000",
	"676e691f-4885-471c-87a7-a2ff6eb343e1");
INSERT INTO DIM_WAY
	VALUES ("957288e0-617b-4887-a6bb-de3527176a11",
	1280.000000,
	1376.000000,
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000",
	"a5f8ed55-ab4a-465d-b5a3-f5a55b5ff694");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2dcd3926-b053-43a1-ab1d-919311236177",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2dcd3926-b053-43a1-ab1d-919311236177",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2f48587f-0cf6-4505-aa0e-c443185f1ca1",
	"dfbc58c4-69a6-4050-b3f7-b18662b72b02",
	"2dcd3926-b053-43a1-ab1d-919311236177");
INSERT INTO GD_GE
	VALUES ("7f14554f-ef1c-43eb-a560-554b04b1cd70",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"a5e1305c-9e91-490f-a601-73fdc8273c49",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("7f14554f-ef1c-43eb-a560-554b04b1cd70",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7a40c865-255c-4b62-98a7-4b0f8f6ccc50",
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7a40c865-255c-4b62-98a7-4b0f8f6ccc50");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7a40c865-255c-4b62-98a7-4b0f8f6ccc50",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7a40c865-255c-4b62-98a7-4b0f8f6ccc50",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ad8e7e1c-ed6a-411a-8159-598e2e6da623",
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"ad8e7e1c-ed6a-411a-8159-598e2e6da623");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"ad8e7e1c-ed6a-411a-8159-598e2e6da623",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ad8e7e1c-ed6a-411a-8159-598e2e6da623",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ed073e71-8710-481d-a145-7ed781e4e94b",
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ed073e71-8710-481d-a145-7ed781e4e94b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ed073e71-8710-481d-a145-7ed781e4e94b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed073e71-8710-481d-a145-7ed781e4e94b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("85d28e76-0c01-4c24-9e94-9090ee123908",
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	"00000000-0000-0000-0000-000000000000",
	"4b1617d8-49ee-441b-9fb9-e08c992d1862",
	"1c644886-5d50-4025-a56e-fa4dbf9abe4e");
INSERT INTO DIM_WAY
	VALUES ("4b1617d8-49ee-441b-9fb9-e08c992d1862",
	1424.000000,
	1456.000000,
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1c644886-5d50-4025-a56e-fa4dbf9abe4e",
	1424.000000,
	1520.000000,
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	"00000000-0000-0000-0000-000000000000",
	"4b1617d8-49ee-441b-9fb9-e08c992d1862");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f14554f-ef1c-43eb-a560-554b04b1cd70",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f14554f-ef1c-43eb-a560-554b04b1cd70",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("af01407b-6e82-4a91-82df-32d30b32d8b3",
	"12ed9317-494b-4307-8b2b-3d51993daa15",
	"7f14554f-ef1c-43eb-a560-554b04b1cd70");
INSERT INTO GD_GE
	VALUES ("f8557b7c-7762-4a3b-b0b9-888059587e96",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"c627ad0b-20b7-4c56-86e6-3ab7e9d5f897",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("f8557b7c-7762-4a3b-b0b9-888059587e96",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("164a441f-f55c-482e-89e4-520162bee9d8",
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"164a441f-f55c-482e-89e4-520162bee9d8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"164a441f-f55c-482e-89e4-520162bee9d8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("164a441f-f55c-482e-89e4-520162bee9d8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fe3fb01d-9772-4eaa-a1e7-d973fc0d1481",
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"fe3fb01d-9772-4eaa-a1e7-d973fc0d1481");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"fe3fb01d-9772-4eaa-a1e7-d973fc0d1481",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fe3fb01d-9772-4eaa-a1e7-d973fc0d1481",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("734f118d-da95-472a-b27f-2d8f06c00672",
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"734f118d-da95-472a-b27f-2d8f06c00672");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"734f118d-da95-472a-b27f-2d8f06c00672",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("734f118d-da95-472a-b27f-2d8f06c00672",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0dfcda1d-3f08-45b1-a3bb-30cf7a36f672",
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	"00000000-0000-0000-0000-000000000000",
	"0a87228c-908e-4869-9482-b4805ec509a1",
	"752c98e1-682c-4a9a-beb1-e81d07e08a9d");
INSERT INTO DIM_WAY
	VALUES ("0a87228c-908e-4869-9482-b4805ec509a1",
	1456.000000,
	1616.000000,
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("752c98e1-682c-4a9a-beb1-e81d07e08a9d",
	1456.000000,
	1680.000000,
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	"00000000-0000-0000-0000-000000000000",
	"0a87228c-908e-4869-9482-b4805ec509a1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f8557b7c-7762-4a3b-b0b9-888059587e96",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f8557b7c-7762-4a3b-b0b9-888059587e96",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b2a22ab1-5dc8-4253-9c2e-f8363c9dd224",
	"ad81e799-efef-4b8c-86c9-506d8f787d0a",
	"f8557b7c-7762-4a3b-b0b9-888059587e96");
INSERT INTO GD_GE
	VALUES ("7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"8b550e7c-615a-45cf-8f90-356fdee2f05a",
	"42db9ce2-853a-43f5-9952-13f95c7b2e5b",
	42,
	0,
	'ex1::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8dedcdd1-071d-426b-8606-b593e6fb84fa",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8dedcdd1-071d-426b-8606-b593e6fb84fa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8dedcdd1-071d-426b-8606-b593e6fb84fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8dedcdd1-071d-426b-8606-b593e6fb84fa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b6b61ab5-5942-4591-9380-de45d6477747",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"b6b61ab5-5942-4591-9380-de45d6477747");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"b6b61ab5-5942-4591-9380-de45d6477747",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b6b61ab5-5942-4591-9380-de45d6477747",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("69a0f339-9276-4bc2-963b-476af21c57ae",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"69a0f339-9276-4bc2-963b-476af21c57ae");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"69a0f339-9276-4bc2-963b-476af21c57ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("69a0f339-9276-4bc2-963b-476af21c57ae",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("31b7c07a-b9cd-4104-8a1b-6cb399f826e7",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000",
	"d0936881-3e9d-47d3-a24a-f94002e74811",
	"7d5a90d7-cc59-4e0f-a519-47bb5f3e1f2f");
INSERT INTO GD_LS
	VALUES ("6d60e992-b71b-4606-9c25-a43d71203a90",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"31b7c07a-b9cd-4104-8a1b-6cb399f826e7",
	"7d5a90d7-cc59-4e0f-a519-47bb5f3e1f2f",
	"1ae0e74f-1855-41eb-ad6f-aaf461ee6e5e");
INSERT INTO GD_LS
	VALUES ("082651ea-9fa7-435a-846e-69df4129e0ee",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"6d60e992-b71b-4606-9c25-a43d71203a90",
	"1ae0e74f-1855-41eb-ad6f-aaf461ee6e5e",
	"282d88f6-4732-47fb-af2a-8dd58994dbb3");
INSERT INTO DIM_WAY
	VALUES ("d0936881-3e9d-47d3-a24a-f94002e74811",
	1600.000000,
	1728.000000,
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7d5a90d7-cc59-4e0f-a519-47bb5f3e1f2f",
	1648.000000,
	1728.000000,
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000",
	"d0936881-3e9d-47d3-a24a-f94002e74811");
INSERT INTO DIM_WAY
	VALUES ("1ae0e74f-1855-41eb-ad6f-aaf461ee6e5e",
	1648.000000,
	1568.000000,
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000",
	"7d5a90d7-cc59-4e0f-a519-47bb5f3e1f2f");
INSERT INTO DIM_WAY
	VALUES ("282d88f6-4732-47fb-af2a-8dd58994dbb3",
	1712.000000,
	1568.000000,
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000",
	"1ae0e74f-1855-41eb-ad6f-aaf461ee6e5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7439d76a-e0c3-4f3e-9547-14b3c5d4a964",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5024d850-3bbf-4cbe-9642-238b345eb1f5",
	"5798ec31-5748-48d4-8745-ce2bc5c35fdb",
	"7439d76a-e0c3-4f3e-9547-14b3c5d4a964");
INSERT INTO DIM_DIA
	VALUES ("8b550e7c-615a-45cf-8f90-356fdee2f05a",
	'',
	0.689824,
	805.000000,
	1285.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ_PROXY
	VALUES ("63c34aca-7be3-452c-a968-bb91fb35687f",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000",
	'../Expression Test.xtuml');
