-- BP 7.1 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	"d44b6837-1053-4e93-a92b-63147bc38ed4",
	'Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("9f3d19bb-8bae-4ab6-b746-66df10a61a1f",
	112,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'array_test-1::Functions');
INSERT INTO DIM_DIA
	VALUES ("9f3d19bb-8bae-4ab6-b746-66df10a61a1f",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("da9531c9-8633-4586-a296-18fed6483ab3",
	"00000000-0000-0000-0000-000000000000",
	'setup',
	'',
	'//
// Check to see if any instances are already here.
// This would mean that we have restored from NVS
// or that preexisting instances were defined in data.
//

select any p from instances of P;

if( empty p )

  // Initialize
  LOG::LogInfo( message:"Did not find any PEI data, initializing NVS" );
  i = NVS::format();
  if( i != 0 )
    LOG::LogFailure( message:"Error formatting the NVS." );
  end if;
  i = NVS::version( first:1, second:2 );
  i =  NVS::checksum( first:1, second:2 );

  // Parents and their life
  create object instance p1 of P;
  assign p1.family.father = "Calvin''s Dad";
  assign p1.family.mother = "Calvin''s Mom";

  // assign pets
  assign p1.family.Pets[0].name = "Garfield";
  assign p1.family.Pets[0].PetType = PetType::cat;
  assign p1.family.Pets[0].CareGiver = p1.family.mother;
  assign p1.family.Pets[1].name = "Odie";
  assign p1.family.Pets[1].PetType = PetType::dog;
  assign p1.family.Pets[1].CareGiver = p1.family.father;

  // assign some schools
  assign p1.schools[0] = "Hershey";
  assign p1.schools[1] = "East Tipp";
  assign p1.schools[2] = "Harrison";

  // assign another pet for later comparison use
  assign p1.pet.name = "Garfield";
  assign p1.pet.PetType = PetType::cat;
  assign p1.pet.CareGiver = p1.family.mother;

  // assign some deep nesting
  assign p1.nest[0].deep_nest[0][0].real_numbers[0] = 0.0;
  assign p1.nest[0].deep_nest[0][0].real_numbers[1] = 1.0;
  assign p1.nest[0].deep_nest[0][1].real_numbers[0] = 0.0;
  assign p1.nest[0].deep_nest[0][1].real_numbers[1] = 1.0;
  assign p1.nest[0].deep_nest[1][0].real_numbers[0] = 0.0;
  assign p1.nest[0].deep_nest[1][0].real_numbers[1] = 1.0;
  assign p1.nest[0].deep_nest[1][1].real_numbers[0] = 0.0;
  assign p1.nest[0].deep_nest[1][1].real_numbers[1] = 1.0;

  // do some array syntax checks
  if ( "Hershey" == p1.schools[0] )
    LOG::LogSuccess( message: "Successful read of array element as rVal in setup function." );
  else
    LOG::LogFailure( message: "Unsuccessful read of array element as rVal in setup function." );
    ::failedFamilyTest();
  end if;
  if ( "Odie" == p1.family.Pets[1].name )
    LOG::LogSuccess( message: "Successful read of array element as rVal in setup function." );
  else
    LOG::LogFailure( message: "Unsuccessful read of array element as rVal in setup function." );
    ::failedFamilyTest();
  end if;
  if ( p1.nest[0].deep_nest[0][0].real_numbers[0] == 0.0 )
    LOG::LogSuccess( message: "Successful read of deeply-nested array element as lVal in setup function." );
  else
    LOG::LogFailure( message: "Unsuccessful read of deeply-nested array element as lVal in setup function." );
    ::failedFamilyTest();
  end if;
  if ( 1.0 == p1.nest[0].deep_nest[0][1].real_numbers[1] )
    LOG::LogSuccess( message: "Successful read of deeply-nested array element as rVal in setup function." );
  else
    LOG::LogFailure( message: "Unsuccessful read of deeply-nested array element as rVal in setup function." );
    ::failedFamilyTest();
  end if;

  // Non-themed test class
  create object instance c1 of CHK;
  create object instance c2 of CHKM;

  // Test control
  create object instance t1 of TC;

  // Commit everything
  i = PERSIST::commit();
  if( i != 0 )
    LOG::LogFailure( message:"Error commiting persistence information. Error code:" );
    LOG::LogInteger( message:i );
  end if;
else
  LOG::LogInfo( message:"Found PEI data." );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("da9531c9-8633-4586-a296-18fed6483ab3",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("42c1b187-7309-4c10-8c57-932be2108acd",
	"00000000-0000-0000-0000-000000000000",
	'test',
	'',
	'// Kick off the check arrays test sequence
select any c from instances of CHK;
generate CHK2:''start''() to c;
select any c2 from instances of CHKM;
generate CHKM2:''start''() to c2;

// Kick off the family test sequence
select any p from instances of P;
HOSP::delivery( current_family: p.family );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("42c1b187-7309-4c10-8c57-932be2108acd",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("01fc2bcc-639e-4c57-841b-a6d159d25a4e",
	"00000000-0000-0000-0000-000000000000",
	'xit',
	'',
	'// Get rid of all instances, so the NVS is in a consistent state.
select many ps from instances of P;
for each p in ps
  delete object instance p;
end for;

select many cs from instances of CHK;
for each c in cs
  delete object instance c;
end for;

select many cms from instances of CHKM;
for each cm in cms
  delete object instance cm;
end for;

select many tcs from instances of TC;
for each tc in tcs
  delete object instance tc;
end for;

// Shut down.
ARCH::shutdown();',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("01fc2bcc-639e-4c57-841b-a6d159d25a4e",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a11e4a33-caeb-47c3-8adf-8b810b1c64e6",
	"00000000-0000-0000-0000-000000000000",
	'updateFamily',
	'',
	'// A constructs that just tests the language, not actually used
new_child = param.newFamily.child_1;

// This select is overkill just to test syntax for arrays
select any p1 from instances of P where selected.schools[1] == "East Tipp";
select any p2 from instances of P where "East Tipp" == selected.schools[selected.getNumOne()];
select any p3 from instances of P where selected.family.Pets[1000 - 1000].name == "Garfield";
select any p4 from instances of P where "Garfield" == selected.family.Pets[0].name;
select any p5 from instances of P where selected.family.Pets == p1.family.Pets;
select any p6 from instances of P where p1.family.Pets == selected.family.Pets;
select any p7 from instances of P where selected.nest[0].deep_nest[0][0].real_numbers[0] == 0.0;
select any p8 from instances of P where 1.0 == selected.nest[0].deep_nest[0][1].real_numbers[1];

// Here''s the real work
generate P2:''new_child''( updated_family: param.newFamily ) to p1;


',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7d8ebbb4-4309-4c4a-b88b-f1db3da84f73",
	"a11e4a33-caeb-47c3-8adf-8b810b1c64e6",
	'newFamily',
	"163969b3-35a7-4fd4-a885-ce391734f781",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("163969b3-35a7-4fd4-a885-ce391734f781",
	"00000000-0000-0000-0000-000000000000",
	'Family',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("a11e4a33-caeb-47c3-8adf-8b810b1c64e6",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("28a2a08d-c724-4579-a635-770b5039239e",
	"00000000-0000-0000-0000-000000000000",
	'checkDataDFByVal',
	'',
	'// Read array data
if ( param.data[0] == "myData_0" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( "myData_1" == param.data[1] )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data[2] == "myData_2" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;

// Just some more checks to exercise syntax
tData[2] = "myData_2";
tData[0] = "myData_0";
tData[1] = "myData_1";

select any c from instances of CHK;
if ( param.data == c.myData )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( c.myData != param.data )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
end if;
if ( param.data == tData )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( tData != param.data )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
end if;

localData = param.data;
return localData;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[]');
INSERT INTO S_SPARM
	VALUES ("754b7bd6-ed94-4db4-9d8a-a63bdf19e1c8",
	"28a2a08d-c724-4579-a635-770b5039239e",
	'data',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'[]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"754b7bd6-ed94-4db4-9d8a-a63bdf19e1c8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"43cd2bb2-6054-424b-8e95-9d51778d15cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	0,
	"28a2a08d-c724-4579-a635-770b5039239e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"8f37b419-f25c-4ab0-bd8c-cc44012cdd58",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("28a2a08d-c724-4579-a635-770b5039239e",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4d83140e-df35-4eb4-adab-2b92addf741d",
	"00000000-0000-0000-0000-000000000000",
	'checkDataDFByRef',
	'',
	'// Read array data
if ( param.data[0] == "myData_0" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( "myData_1" == param.data[1] )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data[2] == "myData_2" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;

// Just some more checks to exercise syntax
tData[2] = "myData_2";
tData[0] = "myData_0";
tData[1] = "myData_1";

select any c from instances of CHK;
if ( param.data == c.myData )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( c.myData != param.data )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
end if;
if ( param.data == tData )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( tData != param.data )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
end if;


localData = param.data;
return localData;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[]');
INSERT INTO S_SPARM
	VALUES ("b07ad525-93de-4a3d-a5b4-4cc36555812e",
	"4d83140e-df35-4eb4-adab-2b92addf741d",
	'data',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"b07ad525-93de-4a3d-a5b4-4cc36555812e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"dd4e8476-f373-47f5-9a91-3c1f1a8148ec",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	0,
	"4d83140e-df35-4eb4-adab-2b92addf741d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"8581defc-7656-447b-8280-68ba851c4ce8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("4d83140e-df35-4eb4-adab-2b92addf741d",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b7a9b31a-4b75-4f28-980a-f8feeff46810",
	"00000000-0000-0000-0000-000000000000",
	'failedFamilyTest',
	'',
	'LOG::LogFailure( message: "Failed during the family test." );

// Tell test control we''re done
select any tc from instances of TC;
generate TC1:''completedFamilyTest''() to tc;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b7a9b31a-4b75-4f28-980a-f8feeff46810",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b7063e7a-82e2-4598-812e-3e0f21b8160a",
	"00000000-0000-0000-0000-000000000000",
	'failedChecksTest',
	'',
	'LOG::LogFailure( message: "Failed during the checks test." );

// Tell test control we''re done
select any tc from instances of TC;
generate TC2:''completedChecksTest''() to tc;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b7063e7a-82e2-4598-812e-3e0f21b8160a",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8d32e652-09d3-41fe-ad16-49715771a54f",
	"00000000-0000-0000-0000-000000000000",
	'checkDataDFByRefM',
	'',
	'// Read array data
if ( param.data[0][0] == "myData_0_0" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( "myData_0_1" == param.data[0][1] )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data[1][0] == "myData_1_0" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( param.data[1][1] == "myData_1_1" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-ref domain function." );
  ::failedChecksTest();
end if;

localData = param.data;
if ( param.data == localData )
  LOG::LogSuccess( message: "Successful compare of multi-dim arrays in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful compare of multi-dim arrays in pass-by-ref domain function." );
  ::failedChecksTest();
end if;

// More syntax checks
select any c from instances of CHKM;

if ( param.data == c.myData )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( c.myData != param.data )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
end if;
if ( param.data[0] == c.myData[0] )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
end if;
if ( c.myData[0] != param.data[0] )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-ref domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-ref domain function." );
end if;

return localData;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[][]');
INSERT INTO S_SPARM
	VALUES ("c5bb734e-19b4-4b1a-9879-14cfc6455e9c",
	"8d32e652-09d3-41fe-ad16-49715771a54f",
	'data',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[][]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"c5bb734e-19b4-4b1a-9879-14cfc6455e9c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"5e30850b-f678-4355-9a51-93201b1a49e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	1,
	"00000000-0000-0000-0000-000000000000",
	"c5bb734e-19b4-4b1a-9879-14cfc6455e9c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"29822537-35b0-41e4-bd16-55ae06764dc0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	0,
	"8d32e652-09d3-41fe-ad16-49715771a54f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"1fbc4154-39b4-497e-ab88-182938acdcf7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	1,
	"8d32e652-09d3-41fe-ad16-49715771a54f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"79f1252b-dba0-429b-9215-c8f772939e31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("8d32e652-09d3-41fe-ad16-49715771a54f",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5d8e868e-5627-4bcd-bcea-bb71b58d22e5",
	"00000000-0000-0000-0000-000000000000",
	'checkDataDFByValM',
	'',
	'// Read array data
if ( param.data[0][0] == "myData_0_0" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( "myData_0_1" == param.data[0][1] )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data[1][0] == "myData_1_0" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( param.data[1][1] == "myData_1_1" )
  LOG::LogSuccess( message: "Successful read of array element in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of array element in pass-by-val domain function." );
  ::failedChecksTest();
end if;

localData = param.data;
if ( param.data == localData )
  LOG::LogSuccess( message: "Successful compare of multi-dim arrays in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful compare of multi-dim arrays in pass-by-val domain function." );
  ::failedChecksTest();
end if;

// More syntax checks
select any c from instances of CHKM;

if ( param.data == c.myData )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( c.myData != param.data )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
end if;
if ( param.data[0] == c.myData[0] )
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
end if;
if ( c.myData[0] != param.data[0] )
  LOG::LogFailure( message: "Unsuccessful comparison of arrays in pass-by-val domain function." );
  ::failedChecksTest();
else
  LOG::LogSuccess( message: "Successful comparison of arrays in pass-by-val domain function." );
end if;

return localData;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'[][]');
INSERT INTO S_SPARM
	VALUES ("12e67ef0-c84a-4fea-b78a-808971a76323",
	"5d8e868e-5627-4bcd-bcea-bb71b58d22e5",
	'data',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'[][]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"12e67ef0-c84a-4fea-b78a-808971a76323",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"19937e5b-29a5-415e-bae3-cc7d1247d372",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	1,
	"00000000-0000-0000-0000-000000000000",
	"12e67ef0-c84a-4fea-b78a-808971a76323",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"70583331-5e11-4e57-a955-c476290b08fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	0,
	"5d8e868e-5627-4bcd-bcea-bb71b58d22e5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"169bd8c6-2ab7-4828-974b-f07e9f38c033",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	1,
	"5d8e868e-5627-4bcd-bcea-bb71b58d22e5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"4458f6e9-8444-455c-94eb-b90669c1d260",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("5d8e868e-5627-4bcd-bcea-bb71b58d22e5",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7f1f4594-a606-4f9d-938f-c12b541954bd",
	"00000000-0000-0000-0000-000000000000",
	'failedChecksTestM',
	'',
	'LOG::LogFailure( message: "Failed during the checks test." );

// Tell test control we''re done
select any tc from instances of TC;
generate TC3:''completedChecksMTest''() to tc;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("7f1f4594-a606-4f9d-938f-c12b541954bd",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d2157f63-5c5d-4327-905b-838eb92aaa31",
	"00000000-0000-0000-0000-000000000000",
	'getNumZero',
	'',
	'return 0;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("d2157f63-5c5d-4327-905b-838eb92aaa31",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a1cc18bb-9c0b-49f6-8412-5a616e17b065",
	"00000000-0000-0000-0000-000000000000",
	'checkDeeplyNestedByVal',
	'',
	'// Check some deep nesting
if ( param.data[0].deep_nest[0][0].real_numbers[0] == 0.0 )
  LOG::LogSuccess( message: "Successful read of deeply-nested array element as lVal in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of deeply-nested array element as lVal in pass-by-val domain function." );
  ::failedFamilyTest();
end if;
if ( 1.0 == param.data[0].deep_nest[0][1].real_numbers[1] )
  LOG::LogSuccess( message: "Successful read of deeply-nested array element as rVal in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of deeply-nested array element as rVal in pass-by-val domain function." );
  ::failedFamilyTest();
end if;

someReals = param.data[0].deep_nest[0][0];
if ( param.data[0].deep_nest[0][0] == someReals )
  LOG::LogSuccess( message: "Successful comparison of deeply-nested arrays as lVal in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of deeply-nested arrays as lVal in pass-by-val domain function." );
  ::failedFamilyTest();
end if;
if ( someReals == param.data[0].deep_nest[0][0] )
  LOG::LogSuccess( message: "Successful comparison of deeply-nested array element as rVal in pass-by-val domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of deeply-nested array element as rVal in pass-by-val domain function." );
  ::failedFamilyTest();
end if;

return param.data;',
	"2e8643f8-ad29-4e05-a176-b98908f2c724",
	1,
	'[]');
INSERT INTO S_SPARM
	VALUES ("85b77377-9e27-488b-a6c0-a893029d0e33",
	"a1cc18bb-9c0b-49f6-8412-5a616e17b065",
	'data',
	"2e8643f8-ad29-4e05-a176-b98908f2c724",
	0,
	'[]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"85b77377-9e27-488b-a6c0-a893029d0e33",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"cefa23d0-5941-44b5-9d23-d6ebecfaef45",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DT_PROXY
	VALUES ("2e8643f8-ad29-4e05-a176-b98908f2c724",
	"00000000-0000-0000-0000-000000000000",
	'Nest',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"a1cc18bb-9c0b-49f6-8412-5a616e17b065",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"29e9677f-6c26-4c7d-8379-750843be7c87",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("a1cc18bb-9c0b-49f6-8412-5a616e17b065",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("71cff478-da6f-4c27-a7aa-7149fcf9fa44",
	"00000000-0000-0000-0000-000000000000",
	'checkDeeplyNestedByRef',
	'',
	'// Check some deep nesting
if ( param.data[0].deep_nest[0][0].real_numbers[0] == 0.0 )
  LOG::LogSuccess( message: "Successful read of deeply-nested array element as lVal in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of deeply-nested array element as lVal in pass-by-ref domain function." );
  ::failedFamilyTest();
end if;
if ( 1.0 == param.data[0].deep_nest[0][1].real_numbers[1] )
  LOG::LogSuccess( message: "Successful read of deeply-nested array element as rVal in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful read of deeply-nested array element as rVal in pass-by-ref domain function." );
  ::failedFamilyTest();
end if;

someReals = param.data[0].deep_nest[0][0];
if ( param.data[0].deep_nest[0][0] == someReals )
  LOG::LogSuccess( message: "Successful comparison of deeply-nested arrays as lVal in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of deeply-nested arrays as lVal in pass-by-ref domain function." );
  ::failedFamilyTest();
end if;
if ( someReals == param.data[0].deep_nest[0][0] )
  LOG::LogSuccess( message: "Successful comparison of deeply-nested array element as rVal in pass-by-ref domain function." );
else
  LOG::LogFailure( message: "Unsuccessful comparison of deeply-nested array element as rVal in pass-by-ref domain function." );
  ::failedFamilyTest();
end if;

return param.data;',
	"2e8643f8-ad29-4e05-a176-b98908f2c724",
	1,
	'[]');
INSERT INTO S_SPARM
	VALUES ("f2aceb61-9aba-4762-8322-eb53ed8656cf",
	"71cff478-da6f-4c27-a7aa-7149fcf9fa44",
	'data',
	"2e8643f8-ad29-4e05-a176-b98908f2c724",
	0,
	'[]',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"f2aceb61-9aba-4762-8322-eb53ed8656cf",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"089a0cab-0ea8-479b-bcf0-b5b5c0894c29",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DIM
	VALUES (0,
	0,
	"71cff478-da6f-4c27-a7aa-7149fcf9fa44",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"35e0c840-69ec-44a0-ae93-429067bd9bf4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("71cff478-da6f-4c27-a7aa-7149fcf9fa44",
	1,
	"b67f7512-bebb-41a6-b019-af74d239339d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("b67f7512-bebb-41a6-b019-af74d239339d",
	1,
	"16d1a5c5-9564-4841-87ce-59e7679d45ea",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("16d1a5c5-9564-4841-87ce-59e7679d45ea",
	"d44b6837-1053-4e93-a92b-63147bc38ed4",
	"d44b6837-1053-4e93-a92b-63147bc38ed4",
	'array_test-1',
	'',
	0,
	'../array_test-1.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d44b6837-1053-4e93-a92b-63147bc38ed4",
	'array_test',
	1,
	'../../array_test.xtuml');
