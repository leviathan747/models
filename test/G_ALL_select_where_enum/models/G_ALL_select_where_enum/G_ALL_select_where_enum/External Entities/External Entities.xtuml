-- BP 7.1 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("1a524ed5-a127-443a-b56b-f55ba8aca201",
	"00000000-0000-0000-0000-000000000000",
	"68df64b2-99f2-4b7c-b709-3b39a6e9eb17",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("e0584614-1e7b-477c-b7b0-e9a7b9c3c9d9",
	112,
	"1a524ed5-a127-443a-b56b-f55ba8aca201",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'G_ALL_select_where_enum::External Entities');
INSERT INTO GD_GE
	VALUES ("13b03a0b-0406-4f64-9ef2-aaf40b3e103a",
	"e0584614-1e7b-477c-b7b0-e9a7b9c3c9d9",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	12,
	0,
	'G_ALL_select_where_enum::External Entities::Time');
INSERT INTO GD_SHP
	VALUES ("13b03a0b-0406-4f64-9ef2-aaf40b3e103a");
INSERT INTO GD_NCS
	VALUES ("13b03a0b-0406-4f64-9ef2-aaf40b3e103a");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"13b03a0b-0406-4f64-9ef2-aaf40b3e103a");
INSERT INTO DIM_GE
	VALUES (1936.000000,
	1536.000000,
	"13b03a0b-0406-4f64-9ef2-aaf40b3e103a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13b03a0b-0406-4f64-9ef2-aaf40b3e103a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("cd39e4df-61fb-4948-b3e8-6cf96247b023",
	"e0584614-1e7b-477c-b7b0-e9a7b9c3c9d9",
	"d48abf70-33f2-47d9-8b53-47968df32b88",
	12,
	0,
	'G_ALL_select_where_enum::External Entities::Architecture');
INSERT INTO GD_SHP
	VALUES ("cd39e4df-61fb-4948-b3e8-6cf96247b023");
INSERT INTO GD_NCS
	VALUES ("cd39e4df-61fb-4948-b3e8-6cf96247b023");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"cd39e4df-61fb-4948-b3e8-6cf96247b023");
INSERT INTO DIM_GE
	VALUES (2144.000000,
	1536.000000,
	"cd39e4df-61fb-4948-b3e8-6cf96247b023",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd39e4df-61fb-4948-b3e8-6cf96247b023",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("6125b3f9-a270-4c03-ba79-bdbade3f859d",
	"e0584614-1e7b-477c-b7b0-e9a7b9c3c9d9",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	12,
	0,
	'G_ALL_select_where_enum::External Entities::Logging');
INSERT INTO GD_SHP
	VALUES ("6125b3f9-a270-4c03-ba79-bdbade3f859d");
INSERT INTO GD_NCS
	VALUES ("6125b3f9-a270-4c03-ba79-bdbade3f859d");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"6125b3f9-a270-4c03-ba79-bdbade3f859d");
INSERT INTO DIM_GE
	VALUES (2352.000000,
	1536.000000,
	"6125b3f9-a270-4c03-ba79-bdbade3f859d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6125b3f9-a270-4c03-ba79-bdbade3f859d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("1808e712-1f34-49f0-9c1d-94794971ce94",
	"e0584614-1e7b-477c-b7b0-e9a7b9c3c9d9",
	"8d471b2f-9c90-4f6f-bc58-d137ffee521a",
	12,
	0,
	'G_ALL_select_where_enum::External Entities::Bridge');
INSERT INTO GD_SHP
	VALUES ("1808e712-1f34-49f0-9c1d-94794971ce94");
INSERT INTO GD_NCS
	VALUES ("1808e712-1f34-49f0-9c1d-94794971ce94");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"1808e712-1f34-49f0-9c1d-94794971ce94");
INSERT INTO DIM_GE
	VALUES (1936.000000,
	1392.000000,
	"1808e712-1f34-49f0-9c1d-94794971ce94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1808e712-1f34-49f0-9c1d-94794971ce94",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("e0584614-1e7b-477c-b7b0-e9a7b9c3c9d9",
	'',
	1.000000,
	1823.000000,
	1205.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_EE
	VALUES ("d04a0733-843d-4726-a67e-4a6038e1a031",
	'Time',
	'',
	'TIM',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("6ea0afc0-c146-4a4b-b5d1-b1afc2763a96",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'current_date',
	'Returns the current date.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	0,
	'');
INSERT INTO S_BRG
	VALUES ("1420e190-4700-4a2e-824d-d7c4fff957dc",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'create_date',
	'Creates a date based on input parameters.

Returns a date.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("98fa3aaf-f5fd-4a40-8060-4cf82b39987e",
	"1420e190-4700-4a2e-824d-d7c4fff957dc",
	'second',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"9b3eefe1-5a5e-48b7-a461-5c362e80d3e5",
	'');
INSERT INTO S_BPARM
	VALUES ("f8cb8411-d25e-4cbf-aff6-46e842381a97",
	"1420e190-4700-4a2e-824d-d7c4fff957dc",
	'minute',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a914cdce-1d4b-4173-89b4-d29e1d8bf6ff",
	'');
INSERT INTO S_BPARM
	VALUES ("a914cdce-1d4b-4173-89b4-d29e1d8bf6ff",
	"1420e190-4700-4a2e-824d-d7c4fff957dc",
	'hour',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"db994adf-3fe9-417a-8e84-b3d3b5307f51",
	'');
INSERT INTO S_BPARM
	VALUES ("db994adf-3fe9-417a-8e84-b3d3b5307f51",
	"1420e190-4700-4a2e-824d-d7c4fff957dc",
	'day',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("9b3eefe1-5a5e-48b7-a461-5c362e80d3e5",
	"1420e190-4700-4a2e-824d-d7c4fff957dc",
	'month',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"f8cb8411-d25e-4cbf-aff6-46e842381a97",
	'');
INSERT INTO S_BPARM
	VALUES ("d298eed5-4a54-449c-9f43-89474ee57765",
	"1420e190-4700-4a2e-824d-d7c4fff957dc",
	'year',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"98fa3aaf-f5fd-4a40-8060-4cf82b39987e",
	'');
INSERT INTO S_BRG
	VALUES ("afd9d5e5-deda-4543-8e1c-1e1942c27d56",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'get_second',
	'Returns the second contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("4bc9635e-885f-41bb-b787-5e8b608cc0f0",
	"afd9d5e5-deda-4543-8e1c-1e1942c27d56",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("e96a67a8-3142-4bca-ad5a-01fa2df0a805",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'get_minute',
	'Returns the minute contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("002fc64a-dfa1-451a-b518-55a45901ccd5",
	"e96a67a8-3142-4bca-ad5a-01fa2df0a805",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("9c86a984-081f-494d-b95c-50b667821f80",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'get_hour',
	'Returns the hour contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("c8d352c6-e467-4b01-9280-a0da2a197428",
	"9c86a984-081f-494d-b95c-50b667821f80",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("d4c20dcb-91bc-475b-94c7-95a0d45eaf24",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'get_day',
	'Returns the day contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("b3b6dd57-68d9-4a6e-a90e-7f3d7de98fbf",
	"d4c20dcb-91bc-475b-94c7-95a0d45eaf24",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("364c4a08-9aa7-4df7-a4af-2d33cd70a4ca",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'get_month',
	'Returns the month contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("24a0221a-9b08-445b-b89c-efaed3aa4aaa",
	"364c4a08-9aa7-4df7-a4af-2d33cd70a4ca",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("41ed271e-5150-4ba6-a01e-ed934ab3bb1f",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'get_year',
	'Returns the year contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("ad17fc90-09a0-44e7-ba8f-3ed824cc59b1",
	"41ed271e-5150-4ba6-a01e-ed934ab3bb1f",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("737f1fc4-2380-475d-9b82-1b5f57a0372b",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'current_clock',
	'Returns the current time.',
	1,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	0,
	'');
INSERT INTO S_BRG
	VALUES ("c7c88be4-e5c7-47f3-85de-b50d880612d6",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'timer_start',
	'Starts a (one shot) timer to expire in <microseconds>, sending <event_inst> upon expiration.  Note that upon expiration the timer will be deleted.

Returns the instance handle of the non-recurring timer.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("f5a25e17-e76f-48fc-9077-83e32ed9eae3",
	"c7c88be4-e5c7-47f3-85de-b50d880612d6",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"794cd23b-6b3e-49dc-8b0c-94b4131c215c",
	'');
INSERT INTO S_BPARM
	VALUES ("794cd23b-6b3e-49dc-8b0c-94b4131c215c",
	"c7c88be4-e5c7-47f3-85de-b50d880612d6",
	'event_inst',
	"ba5eda7a-def5-0000-0000-00000000000a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("0865db21-38cf-4d0d-8b03-fe43c9fbd240",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'timer_start_recurring',
	'Starts a (recurring) timer to expire in <microseconds>, sending <event_inst> upon expiration.  Upon expiration, the timer will be restarted and fire again in <microseconds> and (re)generate the event <event_inst>.

Returns the instance handle of the recurring timer.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("55458c8f-d070-47bd-8c54-7717440e0e5a",
	"0865db21-38cf-4d0d-8b03-fe43c9fbd240",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"ffec0801-e5f2-4d2c-9fde-ab073abd7ccb",
	'');
INSERT INTO S_BPARM
	VALUES ("ffec0801-e5f2-4d2c-9fde-ab073abd7ccb",
	"0865db21-38cf-4d0d-8b03-fe43c9fbd240",
	'event_inst',
	"ba5eda7a-def5-0000-0000-00000000000a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("f03286dd-e1c8-4afc-ad3c-b14ca845243b",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'timer_remaining_time',
	'Returns the time remaining (in microseconds) before <timer_inst_ref> expires. If <timer_inst_ref> no longer exists, a zero value will be returned. 

It is important to note that even if it no longer exists, an event may still be in transit (e.g., was generated) from a previous timer expiration.  Respectable OOA must account for this "ships passing" possibility.

Returns the time remaining.
',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("c7c6ec41-d9bf-4c74-ac1a-a284b9e5363e",
	"f03286dd-e1c8-4afc-ad3c-b14ca845243b",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("17f838e5-2fe5-448f-a37b-ca1320cd4668",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'timer_reset_time',
	'This method attempts to set <timer_inst_ref> to expire <microseconds>.

It is important to note that an event may still be in transit (e.g., was already generated) from a previous expiration prior to this method invocation.  Respectable OOA must account for this "ships passing" possibility.

Returns TRUE if the timer exists, otherwise FALSE.',
	1,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("3d101cfa-4a57-4149-8609-e9a1131f2a96",
	"17f838e5-2fe5-448f-a37b-ca1320cd4668",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"0a9a4041-4a92-419c-962f-24513d163163",
	'');
INSERT INTO S_BPARM
	VALUES ("0a9a4041-4a92-419c-962f-24513d163163",
	"17f838e5-2fe5-448f-a37b-ca1320cd4668",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("7d027f7c-7731-45ce-888a-2a34025ac7ba",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'timer_add_time',
	'This method attempts to add <microseconds> to the <timer_inst_ref>. 

It is important to note that an event may still be in transit (e.g., was already generated) from a previous expiration prior to this method invocation.  Respectable OOA must account for this "ships passing" possibility.

Returns TRUE if the timer exists, otherwise FALSE.',
	1,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("ad366d97-0b40-4db5-a0f2-51d250016628",
	"7d027f7c-7731-45ce-888a-2a34025ac7ba",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"d55ca23e-8a37-4a98-b5e4-83c60e2a74b5",
	'');
INSERT INTO S_BPARM
	VALUES ("d55ca23e-8a37-4a98-b5e4-83c60e2a74b5",
	"7d027f7c-7731-45ce-888a-2a34025ac7ba",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("e20280d4-66a7-4823-9dd6-5c9ca55a42e1",
	"d04a0733-843d-4726-a67e-4a6038e1a031",
	'timer_cancel',
	'This method attempts to cancel and delete <timer_inst_ref>.  

It is important to note that an event may still be in transit (e.g., was already generated) from a previous expiration prior to this method invocation.  Respectable OOA must account for this "ships passing" possibility.

Returns TRUE if the timer exists, otherwise FALSE.',
	1,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("1884c359-9b0b-4d13-a5e7-09a3914d1776",
	"e20280d4-66a7-4823-9dd6-5c9ca55a42e1",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d04a0733-843d-4726-a67e-4a6038e1a031",
	1,
	"1a524ed5-a127-443a-b56b-f55ba8aca201",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("d48abf70-33f2-47d9-8b53-47968df32b88",
	'Architecture',
	'This EE provides an interface between the domain and the run time implementation that supports the execution of the domain.',
	'ARCH',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("6385a92a-f749-48f7-a99c-70aab5c370f3",
	"d48abf70-33f2-47d9-8b53-47968df32b88",
	'shutdown',
	'This bridge sends a request to the run time implementation to shut down.',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'control stop;',
	1,
	'');
INSERT INTO PE_PE
	VALUES ("d48abf70-33f2-47d9-8b53-47968df32b88",
	1,
	"1a524ed5-a127-443a-b56b-f55ba8aca201",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("a4571b5a-3455-4afe-9673-fd2f055b9512",
	'Logging',
	'This EE is responsible for logging test data.

The output will be written to a file that may be used for test verification.',
	'LOG',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("56cba493-9196-4517-be38-6302c508a00f",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogFailure',
	'Log a test failure.

Output fomat:

"Log Failure - <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("6bedf804-077d-4280-b334-4dd067f90a75",
	"56cba493-9196-4517-be38-6302c508a00f",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("069bd8ce-8d17-490e-a689-01df739b8073",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogInfo',
	'Log some information.

Output fomat:

"Log Info - <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("bf0a0eda-9208-492e-9441-077696479fd2",
	"069bd8ce-8d17-490e-a689-01df739b8073",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("bbe19508-f0f7-4164-97ee-12d3a47579a1",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogSuccess',
	'Log a test success.

Output fomat:

"Log Success - <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("8ac273c2-a4af-437d-b81d-da6bad0e66ff",
	"bbe19508-f0f7-4164-97ee-12d3a47579a1",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("15df53d1-b0c3-400f-8fa1-98d0d4628727",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogReal',
	'Log a real value with an optional message.

Output fomat:

"Log Real - <real>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("62c84ea0-f0cc-4a6d-b93c-1a65efe00cc3",
	"15df53d1-b0c3-400f-8fa1-98d0d4628727",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("3260d862-55c9-43d5-b9d0-b3da0b0c17ab",
	"15df53d1-b0c3-400f-8fa1-98d0d4628727",
	'real',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"62c84ea0-f0cc-4a6d-b93c-1a65efe00cc3",
	'');
INSERT INTO S_BRG
	VALUES ("eef2fe51-a817-4ccc-b95b-88dbc7f48ebc",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogDate',
	'Log a date value with an optional message.

Output fomat:

"Log Date - <date>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("06b263ce-c8c1-479b-b248-94500d0e4e5e",
	"eef2fe51-a817-4ccc-b95b-88dbc7f48ebc",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8fb01725-933d-412d-a5df-e167ffef6673",
	'');
INSERT INTO S_BPARM
	VALUES ("8fb01725-933d-412d-a5df-e167ffef6673",
	"eef2fe51-a817-4ccc-b95b-88dbc7f48ebc",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("bf81595c-760b-4190-a59e-8b7fdc01886c",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogTime',
	'Log a timestamp value with an optional message.

Output fomat:

"Log Time - <time>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("5871b1b5-9f4a-4763-9ef6-caf66aaa7677",
	"bf81595c-760b-4190-a59e-8b7fdc01886c",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("2bfd417e-78a0-475e-a5d3-1d362395b206",
	"bf81595c-760b-4190-a59e-8b7fdc01886c",
	'time',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"5871b1b5-9f4a-4763-9ef6-caf66aaa7677",
	'');
INSERT INTO S_BRG
	VALUES ("645dafdf-d9de-476e-bbef-ed40c654ee0f",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogInt',
	'Log an integer value with an optional message.

Output fomat:

"Log Int - <int>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("d50ef1d2-ec24-425f-bd71-73ff3f3315d3",
	"645dafdf-d9de-476e-bbef-ed40c654ee0f",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"28be8fc2-b4aa-4098-a1c7-fa1bc8fcd59c",
	'');
INSERT INTO S_BPARM
	VALUES ("28be8fc2-b4aa-4098-a1c7-fa1bc8fcd59c",
	"645dafdf-d9de-476e-bbef-ed40c654ee0f",
	'int',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("9ebac411-6ae0-4183-af5f-6da863fdbc99",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogString',
	'Log a string value with an optional message.

Output fomat:

"Log String - <str>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("8dd5cc23-582f-4c53-920d-ca3e65cdfa81",
	"9ebac411-6ae0-4183-af5f-6da863fdbc99",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("66170a49-25d1-40da-a637-76d24efbd34d",
	"9ebac411-6ae0-4183-af5f-6da863fdbc99",
	'str',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8dd5cc23-582f-4c53-920d-ca3e65cdfa81",
	'');
INSERT INTO S_BRG
	VALUES ("096fcb6a-003b-45f2-b640-3c9f5d27d16b",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogBoolean',
	'Log a boolean value with an optional message.

Output fomat:

"Log Boolean - <bool>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("367e2113-12b6-4714-b13c-b59ee320f49c",
	"096fcb6a-003b-45f2-b640-3c9f5d27d16b",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5ed3bd2f-0de7-4ee7-83d3-1ee21a7b2de5",
	'');
INSERT INTO S_BPARM
	VALUES ("5ed3bd2f-0de7-4ee7-83d3-1ee21a7b2de5",
	"096fcb6a-003b-45f2-b640-3c9f5d27d16b",
	'bool',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("021438d1-37d8-4d51-923e-4345f35dbe17",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogUniqueId',
	'Log a unique_id value with an optional message.

Output fomat:

"Log Unique ID - <uid>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("370e7e66-0326-4941-a33c-5e5ae468b314",
	"021438d1-37d8-4d51-923e-4345f35dbe17",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("e52586a5-550c-453d-9023-0248eef893ff",
	"021438d1-37d8-4d51-923e-4345f35dbe17",
	'uid',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"370e7e66-0326-4941-a33c-5e5ae468b314",
	'');
INSERT INTO S_BRG
	VALUES ("83beef38-3a84-4ac5-a2bc-eecad5f1153a",
	"a4571b5a-3455-4afe-9673-fd2f055b9512",
	'LogArbitraryId',
	'Log an arbitrary_id value with an optional message.

Output fomat:

"Log Arbitrary ID - <aid>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("93cdaf59-d9bc-40e3-b1be-28cdba5838b7",
	"83beef38-3a84-4ac5-a2bc-eecad5f1153a",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"08c7e3c1-8e16-42e3-8103-ca95b568a806",
	'');
INSERT INTO S_BPARM
	VALUES ("08c7e3c1-8e16-42e3-8103-ca95b568a806",
	"83beef38-3a84-4ac5-a2bc-eecad5f1153a",
	'aid',
	"ed66b377-d5c7-4201-bf6b-f59b59ffa54e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ed66b377-d5c7-4201-bf6b-f59b59ffa54e",
	"00000000-0000-0000-0000-000000000000",
	'arbitrary_id',
	'Arbitrary ID with core data type of unique_id.',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("a4571b5a-3455-4afe-9673-fd2f055b9512",
	1,
	"1a524ed5-a127-443a-b56b-f55ba8aca201",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("8d471b2f-9c90-4f6f-bc58-d137ffee521a",
	'Bridge',
	'',
	'B',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("5b0060ca-72d3-43a0-b924-c9e1e75c4536",
	"8d471b2f-9c90-4f6f-bc58-d137ffee521a",
	'compare_enums',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'LOG::LogInfo(message:"In bridge compare_enums.");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Select any.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

select any sel from instances of SEL where selected.sel2_ID == colors::green;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' using literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' using literal.");
end if;

a_color = colors::green;
select any sel from instances of SEL where selected.sel2_ID == a_color;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' using local.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' using local.");
end if;

select any sel2 from instances of SEL2;
select any sel from instances of SEL where selected.sel2_ID == sel2.sel2_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' using base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' using base attribute.");
end if;

select any sel from instances of SEL where selected.sel_ID == colors::yellow;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' using identifier and literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' using identifier and literal.");
end if;

a_color = colors::yellow;
select any sel from instances of SEL where selected.sel_ID == a_color;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' using identifier and local.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' using identifier and local.");
end if;

select any sel1 from instances of SEL;
select any sel from instances of SEL where selected.sel_ID == sel1.sel_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' using identifier and base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' using identifier and base attribute.");
end if;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Select many.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

select many sels from instances of SEL where colors::green == selected.sel2_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instances of ''Select'' using literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instances of ''Select'' using literal.");
end if;

a_color = colors::green;
select many sels from instances of SEL where a_color == selected.sel2_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instances of ''Select'' using local.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instance of ''Select'' using local.");
end if;

select many sels from instances of SEL where sel2.sel2_ID == selected.sel2_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instances of ''Select'' using base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instances of ''Select'' using base attribute.");
end if;

select many sels from instances of SEL where selected.sel_ID == colors::yellow;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instance of ''Select'' using identifier and literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instance of ''Select'' using identifier and literal.");
end if;

a_color = colors::yellow;
select many sels from instances of SEL where selected.sel_ID == a_color;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instance of ''Select'' using identifier and local.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instance of ''Select'' using identifier and local.");
end if;

select any sel1 from instances of SEL;
select many sels from instances of SEL where selected.sel_ID == sel1.sel_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instance of ''Select'' using identifier and base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instance of ''Select'' using identifier and base attribute.");
end if;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Select one related by.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

select any sel_one2 from instances of SEL_ONE2;
select one sel_one related by sel_one2->SEL_ONE[R2] where selected.sel_one2_ID == colors::blue;
if ( not_empty sel_one )
  LOG::LogSuccess(message:"Successfully selected one instance of ''Select One'' using literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select one instance of ''Select One'' using literal.");
end if;

a_color = colors::blue;
select one sel_one related by sel_one2->SEL_ONE[R2] where selected.sel_one2_ID == a_color;
if ( not_empty sel_one )
  LOG::LogSuccess(message:"Successfully selected one instance of ''Select One'' using local.");
else
  LOG::LogFailure(message:"Did NOT successfully select one instance of ''Select One'' using local.");
end if;

select one sel_one related by sel_one2->SEL_ONE[R2] where selected.sel_one2_ID == sel_one2.sel_one2_ID;
if ( not_empty sel_one )
  LOG::LogSuccess(message:"Successfully selected one instance of ''Select One'' using base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select one instance of ''Select One'' using base attribute.");
end if;

select one sel_one related by sel_one2->SEL_ONE[R2] where selected.sel_one_ID == colors::purple;
if ( not_empty sel_one )
  LOG::LogSuccess(message:"Successfully selected one related by ''Select One Two'' using identifier and literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select one relate dby ''Select One Two'' using identifier and literal.");
end if;

a_color = colors::purple;
select one sel_one related by sel_one2->SEL_ONE[R2] where selected.sel_one_ID == a_color;
if ( not_empty sel_one )
  LOG::LogSuccess(message:"Successfully selected one related by ''Select One Two'' using identifier and local.");
else
  LOG::LogFailure(message:"Did NOT successfully select one related by  ''Select One Two'' using identifier and local.");
end if;

select any sel_one1 from instances of SEL_ONE;
select one sel_one related by sel_one2->SEL_ONE[R2] where selected.sel_one_ID == sel_one1.sel_one_ID;
if ( not_empty sel_one )
  LOG::LogSuccess(message:"Successfully selected one related by ''Select One Two'' using identifier and base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select one related by ''Select One Two'' using identifier and base attribute.");
end if;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Select any related by.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

select any sel related by sel2->SEL[R1] where colors::green == selected.sel2_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' related by using literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' related by using literal.");
end if;

a_color = colors::green;
select any sel related by sel2->SEL[R1] where a_color == selected.sel2_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' related by using local.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' related by using local.");
end if;

select any sel related by sel2->SEL[R1] where sel2.sel2_ID == selected.sel2_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any instance of ''Select'' related by using base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select any instance of ''Select'' related by using base attribute.");
end if;

select any sel related by sel2->SEL[R1] where colors::yellow == selected.sel_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any related by ''Select Two'' using identifier and literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select any related by ''Select Two'' using identifier and literal.");
end if;

a_color = colors::yellow;
select any sel related by sel2->SEL[R1] where a_color == selected.sel_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any related by ''Select Two'' using identifier and local.");
else
  LOG::LogFailure(message:"Did NOT successfully select any related by ''Select Two'' using identifier and local.");
end if;

select any sel1 from instances of SEL;
select any sel related by sel2->SEL[R1] where sel1.sel_ID == selected.sel_ID;
if ( not_empty sel )
  LOG::LogSuccess(message:"Successfully selected any related by ''Select Two'' using identifier and base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select any related by ''Select Two'' using identifier and base attribute.");
end if;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Select many related by.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

select many sels related by sel2->SEL[R1] where selected.sel2_ID == colors::green;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instance of ''Select'' related by using literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instance of ''Select'' related by using literal.");
end if;

a_color = colors::green;
select many sels related by sel2->SEL[R1] where selected.sel2_ID == a_color;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many instance of ''Select'' related by using local.");
else
  LOG::LogFailure(message:"Did NOT successfully select many instance of ''Select'' related by using local.");
end if;

select many sels related by sel2->SEL[R1] where selected.sel2_ID == sel2.sel2_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected an instance of ''Select'' related by using base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select an instance of ''Select'' related by using base attribute.");
end if;

select many sels related by sel2->SEL[R1] where colors::yellow == selected.sel_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many related by ''Select Two'' using identifier and literal.");
else
  LOG::LogFailure(message:"Did NOT successfully select many related by ''Select Two'' using identifier and literal.");
end if;

a_color = colors::yellow;
select many sels related by sel2->SEL[R1] where a_color == selected.sel_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many related by ''Select Two'' using identifier and local.");
else
  LOG::LogFailure(message:"Did NOT successfully select many related by ''Select Two'' using identifier and local.");
end if;

select any sel1 from instances of SEL;
select many sels related by sel2->SEL[R1] where sel1.sel_ID == selected.sel_ID;
if ( not_empty sels )
  LOG::LogSuccess(message:"Successfully selected many related by ''Select Two'' using identifier and base attribute.");
else
  LOG::LogFailure(message:"Did NOT successfully select many related by ''Select Two'' using identifier and base attribute.");
end if;
',
	1,
	'');
INSERT INTO PE_PE
	VALUES ("8d471b2f-9c90-4f6f-bc58-d137ffee521a",
	1,
	"1a524ed5-a127-443a-b56b-f55ba8aca201",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO PE_PE
	VALUES ("1a524ed5-a127-443a-b56b-f55ba8aca201",
	1,
	"286f7572-5ac4-4c44-b16d-e4951fe52f4b",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("286f7572-5ac4-4c44-b16d-e4951fe52f4b",
	"68df64b2-99f2-4b7c-b709-3b39a6e9eb17",
	"68df64b2-99f2-4b7c-b709-3b39a6e9eb17",
	'G_ALL_select_where_enum',
	'This test is designed to use an enumerated type, in various "select...where..."
statements.  The test covers selecting one, any, and many instances in functions,
bridges, class operations, instance operations, MDAs, and state action language.

The values that are compared are the class'' identifying attribute as well as the
class'' referential attribute, both of type enumeration, in the following ways:

	- "select any...where..." comparing to a literal enumeration.
	- "select any...where..." comparing to a local enumeration.
	- "select any...where..." comparing to its base attribute.

	- "select many...where..." comparing to a literal enumeration.
	- "select many...where..." comparing to a local enumeration.
	- "select many...where..." comparing to its base attribute.

	- "select one related by...where..." comparing to a literal enumeration.
	- "select one related by...where..." comparing to a local enumeration.
	- "select one related by...where..." comparing to its base attribute.

	- "select any related by...where..." comparing to a literal enumeration.
	- "select any related by...where..." comparing to a local enumeration.
	- "select any related by...where..." comparing to its base attribute.

	- "select many related by...where..." comparing to a literal enumeration.
	- "select many related by...where..." comparing to a local enumeration.
	- "select many related by...where..." comparing to its base attribute.

  
',
	0,
	'../G_ALL_select_where_enum.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("68df64b2-99f2-4b7c-b709-3b39a6e9eb17",
	'G_ALL_select_where_enum',
	1,
	'../../G_ALL_select_where_enum.xtuml');
