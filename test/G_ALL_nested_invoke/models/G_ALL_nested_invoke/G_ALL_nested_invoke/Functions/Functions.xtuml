-- BP 7.1 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	"0d7f30b4-802c-4448-8609-9f80dc325590",
	'Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("28559242-544b-4a4c-81ae-6d6a0d8683ea",
	112,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'G_ALL_nested_invoke::Functions');
INSERT INTO DIM_DIA
	VALUES ("28559242-544b-4a4c-81ae-6d6a0d8683ea",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("cbe8b12a-85d2-4b4b-bf9d-2585d09dbb2b",
	"00000000-0000-0000-0000-000000000000",
	'bool1',
	'',
	'select any tc from instances of TC;

if ( param.date1 == tc.d )
  LOG::LogSuccess( message: "Function bool1 - Date parameter is correct." );
else
  LOG::LogFailure( message: "Function bool1 - Date parameter is incorrect." );
end if;

return tc.b;
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bb86bc1a-e9d5-410f-a3fd-5a6336cb8d56",
	"cbe8b12a-85d2-4b4b-bf9d-2585d09dbb2b",
	'date1',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("cbe8b12a-85d2-4b4b-bf9d-2585d09dbb2b",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("22f2d309-3676-42b8-a301-f1d6bb362338",
	"00000000-0000-0000-0000-000000000000",
	'date1',
	'',
	'select any tc from instances of TC;

if ( param.evt1 == tc.e )
  LOG::LogSuccess( message: "Function date1 - Event parameter is correct." );
else
  LOG::LogFailure( message: "Function date1 - Event parameter is incorrect." );
end if;

return tc.d;',
	"ba5eda7a-def5-0000-0000-00000000000e",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4ab6efd3-f4a2-4de8-adad-4e15ba898315",
	"22f2d309-3676-42b8-a301-f1d6bb362338",
	'evt1',
	"ba5eda7a-def5-0000-0000-00000000000a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("22f2d309-3676-42b8-a301-f1d6bb362338",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1266789c-c4f7-4497-9b47-f187f1508c94",
	"00000000-0000-0000-0000-000000000000",
	'evt1',
	'',
	'select any tc from instances of TC;

if ( param.timer1 == tc.tr )
  LOG::LogSuccess( message: "Function evt1 - Timer parameter is correct." );
else
  LOG::LogFailure( message: "Function evt1 - Timer parameter is incorrect." );
end if;

return tc.e;',
	"ba5eda7a-def5-0000-0000-00000000000a",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5d2ce7a4-ce47-47d6-a03d-fd5442646b3e",
	"1266789c-c4f7-4497-9b47-f187f1508c94",
	'timer1',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("1266789c-c4f7-4497-9b47-f187f1508c94",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("64f58ba8-fa7a-4bca-b06e-2bd76331dc46",
	"00000000-0000-0000-0000-000000000000",
	'timer1',
	'',
	'select any tc from instances of TC;

if ( ( param.int1 == tc.i ) OR ( param.int1 == ( 2 * tc.i ) ) )
  LOG::LogSuccess( message: "Function timer1 - Integer parameter is correct." );
else
  LOG::LogFailure( message: "Function timer1 - Integer parameter is incorrect." );
end if;

return tc.tr;',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ea2f0f3e-f5fc-47a2-bb67-9d0f49e05800",
	"64f58ba8-fa7a-4bca-b06e-2bd76331dc46",
	'int1',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("64f58ba8-fa7a-4bca-b06e-2bd76331dc46",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("88ae024b-9e23-4ba0-963e-c719ea7d04b6",
	"00000000-0000-0000-0000-000000000000",
	'int1',
	'',
	'select any tc from instances of TC;

if ( ( param.real1 == tc.r ) OR ( ( param.real1 == ( 2 * tc.r ) ) OR ( param.real1 == 0  ) ) )
  LOG::LogSuccess( message: "Function int1 - Real parameter is correct." );
else
  LOG::LogFailure( message: "Function int1 - Real parameter is incorrect." );
end if;

return tc.i;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d8187778-f98a-4c61-a836-ab2d54dee231",
	"88ae024b-9e23-4ba0-963e-c719ea7d04b6",
	'real1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("88ae024b-9e23-4ba0-963e-c719ea7d04b6",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1ea326a8-8c0d-4121-adf6-568a3c05d047",
	"00000000-0000-0000-0000-000000000000",
	'real1',
	'',
	'select any tc from instances of TC;

if ( ( param.str1 == tc.s ) OR ( param.str1 == ( tc.s + tc.s ) ) )
  LOG::LogSuccess( message: "Function real1 - String parameter is correct." );
else
  LOG::LogFailure( message: "Function real1 - String parameter is incorrect." );
end if;

return tc.r;',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fa922b47-a3b8-4db5-9cf6-963958b263bf",
	"1ea326a8-8c0d-4121-adf6-568a3c05d047",
	'str1',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("1ea326a8-8c0d-4121-adf6-568a3c05d047",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a4c94014-daf1-4da9-ac82-c349a53659de",
	"00000000-0000-0000-0000-000000000000",
	'time1',
	'',
	'select any tc from instances of TC;

if ( param.id1 == tc.ID )
  LOG::LogSuccess( message: "Function time1 - Unique ID parameter is correct." );
else
  LOG::LogFailure( message: "Function time1 - Unique ID parameter is incorrect." );
end if;

return tc.t;',
	"ba5eda7a-def5-0000-0000-000000000010",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("79fde05b-76db-43cd-94d1-b4dc8ef6715a",
	"a4c94014-daf1-4da9-ac82-c349a53659de",
	'id1',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a4c94014-daf1-4da9-ac82-c349a53659de",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6d53d8ac-8c77-402b-9f0a-be2a745a8236",
	"00000000-0000-0000-0000-000000000000",
	'str1',
	'',
	'select any tc from instances of TC;

if ( param.time1 == tc.t )
  LOG::LogSuccess( message: "Function str1 - Timestamp parameter is correct." );
else
  LOG::LogFailure( message: "Function str1 - Timestamp parameter is incorrect." );
end if;

return tc.s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d24c32f6-b7f6-4b6e-bdf6-46617084bee1",
	"6d53d8ac-8c77-402b-9f0a-be2a745a8236",
	'time1',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("6d53d8ac-8c77-402b-9f0a-be2a745a8236",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e65b410-d90d-4ff2-820f-97acc2a29661",
	"00000000-0000-0000-0000-000000000000",
	'id1',
	'',
	'select any tc from instances of TC;

if ( param.enum1 == tc.en )
  LOG::LogSuccess( message: "Function id1 - Enumeration parameter is correct." );
else
  LOG::LogFailure( message: "Function id1 - Enumeration parameter is incorrect." );
end if;

return tc.ID;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("90798b3f-4256-4955-b5b6-f21bebd820b1",
	"3e65b410-d90d-4ff2-820f-97acc2a29661",
	'enum1',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	"00000000-0000-0000-0000-000000000000",
	'enum',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("3e65b410-d90d-4ff2-820f-97acc2a29661",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7649e17f-b421-4726-90cd-30dcbae34b1d",
	"00000000-0000-0000-0000-000000000000",
	'enum1',
	'',
	'select any tc from instances of TC;

if ( ( param.udt1 == tc.u ) OR ( ( param.udt1 == ( 2 * tc.u ) ) OR ( param.udt1 == 1 ) ) )
  LOG::LogSuccess( message: "Function enum1 - User Data Type parameter is correct." );
else
  LOG::LogFailure( message: "Function enum1 - User Data Type parameter is incorrect." );
end if;

return tc.en;',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("11ed9f67-976c-411e-ba69-3addfa42f626",
	"7649e17f-b421-4726-90cd-30dcbae34b1d",
	'udt1',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("42a729d2-3361-4a77-8752-dce5f2fd5786",
	"00000000-0000-0000-0000-000000000000",
	'udt',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("7649e17f-b421-4726-90cd-30dcbae34b1d",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2716e85a-f426-4af6-aaf6-1fb3237ec766",
	"00000000-0000-0000-0000-000000000000",
	'udt1',
	'',
	'select any tc from instances of TC;

if ( param.bool1 == tc.b )
  LOG::LogSuccess( message: "Function udt1 - Boolean parameter is correct." );
else
  LOG::LogFailure( message: "Function udt1 - Boolean parameter is incorrect." );
end if;

return tc.u;',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a689b9ad-e047-47d6-99de-6dce0b9b03af",
	"2716e85a-f426-4af6-aaf6-1fb3237ec766",
	'bool1',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2716e85a-f426-4af6-aaf6-1fb3237ec766",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("91274710-8323-4907-b163-9e16e53df2cf",
	"00000000-0000-0000-0000-000000000000",
	'single_invoke',
	'',
	'select any tc from instances of TC;

////////////////////////////
// Functions
////////////////////////////
b = ::bool1(date1:tc.d);
d = ::date1(evt1:tc.e);
e = ::evt1(timer1:tc.tr);
tr = ::timer1(int1:tc.i);
i = ::int1(real1:tc.r);
r = ::real1(str1:tc.s);
s = ::str1(time1:tc.t);
t = ::time1(id1:tc.ID);
id = ::id1(enum1:tc.en);
en = ::enum1(udt1:tc.u);
u = ::udt1(bool1:tc.b);

////////////////////////////
// Bridges
////////////////////////////
b2 = EE::bool2(date2:tc.d);
d2 = EE::date2(evt2:tc.e);
e2 =  EE::evt2(timer2:tc.tr);
tr2 =  EE::timer2(int2:tc.i);
i2 =  EE::int2(real2:tc.r);
r2 =  EE::real2(str2:tc.s);
s2 =  EE::str2(time2:tc.t);
t2 =  EE::time2(id2:tc.ID);
id2 =  EE::id2(enum2:tc.en);
en2 = EE::enum2(udt2:tc.u);
u2 = EE::udt2(bool2:tc.b);

////////////////////////////
// Instance Operations
////////////////////////////
b3 = tc.bool3(date3:tc.d);
d3 =  tc.date3(evt3:tc.e);
e3 =  tc.evt3(timer3:tc.tr);
tr3 =  tc.timer3(int3:tc.i);
i3 =  tc.int3(real3:tc.r);
r3 =  tc.real3(str3:tc.s);
s3 =  tc.str3(time3:tc.t);
t3 =  tc.time3(id3:tc.ID);
id3 =  tc.id3(enum3:tc.en);
en3 = tc.enum3(udt3:tc.u);
u3 = tc.udt3(bool3:tc.b);

////////////////////////////
// Class Operations
////////////////////////////
b4 = TC::bool4(date4:tc.d);
d4 = TC::date4(evt4:tc.e);
e4 = TC::evt4(timer4:tc.tr);
tr4 = TC::timer4(int4:tc.i);
i4 = TC::int4(real4:tc.r);
r4 = TC::real4(str4:tc.s);
s4 = TC::str4(time4:tc.t);
t4 = TC::time4(id4:tc.ID);
id4 = TC::id4(enum4:tc.en);
en4 = TC::enum4(udt4:tc.u);
u4 = TC::udt4(bool4:tc.b);

////////////////////////////
// Results
////////////////////////////
if ( b and b2 and b3 and b4 )
  LOG::LogSuccess( message:"Single Invocation - Boolean" );
else
  LOG::LogFailure( message:"Single Invocation - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:b2 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b3 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b4 );
end if;

if ( ( d == d2 ) and ( d3 == d4 ) )
  LOG::LogSuccess( message:"Single Invocation - Date" );
else
  LOG::LogFailure( message:"Single Invocation - Date");
  LOG::LogDate( message:"Function Invocation", date:d );
  LOG::LogDate( message:"Bridge Invocation", date:d2 );
  LOG::LogDate( message:"Instance Operation Invocation", date:d3 );
  LOG::LogDate( message:"Class Operation Invocation", date:d4 );
end if;

if ( ( e == e2 ) and ( e3 == e4 ) )
  LOG::LogSuccess( message:"Single Invocation - Event" );
else
  LOG::LogFailure( message:"Single Invocation - Event");
end if;

if ( ( tr == tr2 ) and ( tr3 == tr4 ) )
  LOG::LogSuccess( message:"Single Invocation - Timer" );
else
  LOG::LogFailure( message:"Single Invocation - Timer");
end if;

if ( ( i == i2 ) and ( i3 == i4 ) )
  LOG::LogSuccess( message:"Single Invocation - Integer" );
else
  LOG::LogFailure( message:"Single Invocation - Integer");
  LOG::LogInt( message:"Function Invocation", int:i );
  LOG::LogInt( message:"Bridge Invocation", int:i2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i3 );
  LOG::LogInt( message:"Class Operation Invocation", int:i4 );
end if;

if ( ( r == r2 ) and ( r3 == r4 ) )
  LOG::LogSuccess( message:"Single Invocation - Real" );
else
  LOG::LogFailure( message:"Single Invocation - Real");
  LOG::LogReal( message:"Function Invocation", real:r );
  LOG::LogReal( message:"Bridge Invocation", real:r2 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r3 );
  LOG::LogReal( message:"Class Operation Invocation", real:r4 );
end if;

if ( ( s == s2 ) and ( s3 == s4 ) )
  LOG::LogSuccess( message:"Single Invocation - String" );
else
  LOG::LogFailure( message:"Single Invocation - String");
  LOG::LogString( message:"Function Invocation", str:s );
  LOG::LogString( message:"Bridge Invocation", str:s2 );
  LOG::LogString( message:"Instance Operation Invocation", str:s3 );
  LOG::LogString( message:"Class Operation Invocation", str:s4 );
end if;

if ( ( t== t2 ) and ( t3 == t4 ) )
  LOG::LogSuccess( message:"Single Invocation - Timestamp" );
else
  LOG::LogFailure( message:"Single Invocation - Timestamp");
  LOG::LogTime( message:"Function Invocation", time:t );
  LOG::LogTime( message:"Bridge Invocation", time:t2 );
  LOG::LogTime( message:"Instance Operation Invocation", time:t3 );
  LOG::LogTime( message:"Class Operation Invocation", time:t4 );
end if;

if ( ( id == id2 ) and ( id3 == id4 ) )
  LOG::LogSuccess( message:"Single Invocation - Unique ID" );
else
  LOG::LogFailure( message:"Single Invocation - Unique ID");
  LOG::LogUniqueId( message:"Function Invocation", uid:id );
  LOG::LogUniqueId( message:"Bridge Invocation", uid:id2 );
  LOG::LogUniqueId( message:"Instance Operation Invocation", uid:id3 );
  LOG::LogUniqueId( message:"Class Operation Invocation", uid:id4 );
end if;

if ( ( en == en2 ) and ( en3 == en4 ) )
  LOG::LogSuccess( message:"Single Invocation - Enumeration" );
else
  LOG::LogFailure( message:"Single Invocation - Enumeration");
end if;

if ( ( u == u2 ) and ( u3 == u4 ) )
  LOG::LogSuccess( message:"Single Invocation - User Data Type" );
else
  LOG::LogFailure( message:"Single Invocation - User Data Type");
  LOG::LogInt( message:"Function Invocation", int:u );
  LOG::LogInt( message:"Bridge Invocation", int:u2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u3 );
  LOG::LogInt( message:"Class Operation Invocation", int:u4 );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("91274710-8323-4907-b163-9e16e53df2cf",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("94c5c44d-e7dd-4fb2-b6d6-c8ed1c4180e5",
	"00000000-0000-0000-0000-000000000000",
	'multiple_invoke',
	'',
	'select any tc from instances of TC;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Functions
////////////////////////////
b = ::bool1(date1: ::date1(evt1:tc.e));
d = ::date1(evt1:EE::evt2(timer2:tc.tr));
e = ::evt1(timer1: tc.timer3(int3:tc.i));
tr = ::timer1(int1:TC::int4(real4:tc.r));
i = ::int1(real1: ::real1(str1:tc.s));
r = ::real1(str1:  EE::str2(time2:tc.t));
s = ::str1(time1: tc.time3(id3:tc.ID));
t = ::time1(id1: TC::id4(enum4:tc.en));
id = ::id1(enum1: ::enum1(udt1:tc.u));
en = ::enum1(udt1:EE::udt2(bool2:tc.b));
u = ::udt1(bool1: tc.bool3(date3:tc.d));

////////////////////////////
// Bridges
////////////////////////////
b2 = EE::bool2(date2: ::date1(evt1:tc.e));
d2 = EE::date2(evt2:  EE::evt2(timer2:tc.tr));
e2 =  EE::evt2(timer2: tc.timer3(int3:tc.i));
tr2 =  EE::timer2(int2: TC::int4(real4:tc.r));
i2 =  EE::int2(real2: ::real1(str1:tc.s));
r2 =  EE::real2(str2:  EE::str2(time2:tc.t));
s2 =  EE::str2(time2: tc.time3(id3:tc.ID));
t2 =  EE::time2(id2: TC::id4(enum4:tc.en));
id2 =  EE::id2(enum2: ::enum1(udt1:tc.u));
en2 = EE::enum2(udt2: EE::udt2(bool2:tc.b));
u2 = EE::udt2(bool2: tc.bool3(date3:tc.d));

////////////////////////////
// Instance Operations
////////////////////////////
b3 = tc.bool3(date3: ::date1(evt1:tc.e));
d3 =  tc.date3(evt3: EE::evt2(timer2:tc.tr));
e3 =  tc.evt3(timer3:  tc.timer3(int3:tc.i));
tr3 =  tc.timer3(int3:TC::int4(real4:tc.r));
i3 =  tc.int3(real3: ::real1(str1:tc.s));
r3 =  tc.real3(str3: EE::str2(time2:tc.t));
s3 =  tc.str3(time3: tc.time3(id3:tc.ID));
t3 =  tc.time3(id3: TC::id4(enum4:tc.en));
id3 =  tc.id3(enum3: ::enum1(udt1:tc.u));
en3 = tc.enum3(udt3: EE::udt2(bool2:tc.b));
u3 = tc.udt3(bool3: tc.bool3(date3:tc.d));

////////////////////////////
// Class Operations
////////////////////////////
b4 = TC::bool4(date4: ::date1(evt1:tc.e));
d4 = TC::date4(evt4: EE::evt2(timer2:tc.tr));
e4 = TC::evt4(timer4: tc.timer3(int3:tc.i));
tr4 = TC::timer4(int4:TC::int4(real4:tc.r));
i4 = TC::int4(real4: ::real1(str1:tc.s));
r4 = TC::real4(str4: EE::str2(time2:tc.t));
s4 = TC::str4(time4:tc.time3(id3:tc.ID));
t4 = TC::time4(id4:TC::id4(enum4:tc.en));
id4 = TC::id4(enum4: ::enum1(udt1:tc.u));
en4 = TC::enum4(udt4:EE::udt2(bool2:tc.b));
u4 = TC::udt4(bool4: tc.bool3(date3:tc.d));

////////////////////////////
// Results
////////////////////////////
if ( b and b2 and b3 and b4 )
  LOG::LogSuccess( message:"Multiple Invocation - Boolean" );
else
  LOG::LogFailure( message:"Multiple Invocation - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:b2 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b3 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b4 );
end if;

if ( ( d == d2 ) and ( d3 == d4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Date" );
else
  LOG::LogFailure( message:"Multiple Invocation - Date");
  LOG::LogDate( message:"Function Invocation", date:d );
  LOG::LogDate( message:"Bridge Invocation", date:d2 );
  LOG::LogDate( message:"Instance Operation Invocation", date:d3 );
  LOG::LogDate( message:"Class Operation Invocation", date:d4 );
end if;

if ( ( e == e2 ) and ( e3 == e4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Event" );
else
  LOG::LogFailure( message:"Multiple Invocation - Event");
end if;

if ( ( tr == tr2 ) and ( tr3 == tr4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Timer" );
else
  LOG::LogFailure( message:"Multiple Invocation - Timer");
end if;

if ( ( i == i2 ) and ( i3 == i4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Integer" );
else
  LOG::LogFailure( message:"Multiple Invocation - Integer");
  LOG::LogInt( message:"Function Invocation", int:i );
  LOG::LogInt( message:"Bridge Invocation", int:i2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i3 );
  LOG::LogInt( message:"Class Operation Invocation", int:i4 );
end if;

if ( ( r == r2 ) and ( r3 == r4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Real" );
else
  LOG::LogFailure( message:"Multiple Invocation - Real");
  LOG::LogReal( message:"Function Invocation", real:r );
  LOG::LogReal( message:"Bridge Invocation", real:r2 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r3 );
  LOG::LogReal( message:"Class Operation Invocation", real:r4 );
end if;

if ( ( s == s2 ) and ( s3 == s4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - String" );
else
  LOG::LogFailure( message:"Multiple Invocation - String");
  LOG::LogString( message:"Function Invocation", str:s );
  LOG::LogString( message:"Bridge Invocation", str:s2 );
  LOG::LogString( message:"Instance Operation Invocation", str:s3 );
  LOG::LogString( message:"Class Operation Invocation", str:s4 );
end if;

if ( ( t== t2 ) and ( t3 == t4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Timestamp" );
else
  LOG::LogFailure( message:"Multiple Invocation - Timestamp");
  LOG::LogTime( message:"Function Invocation", time:t );
  LOG::LogTime( message:"Bridge Invocation", time:t2 );
  LOG::LogTime( message:"Instance Operation Invocation", time:t3 );
  LOG::LogTime( message:"Class Operation Invocation", time:t4 );
end if;

if ( ( id == id2 ) and ( id3 == id4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Unique ID" );
else
  LOG::LogFailure( message:"Multiple Invocation - Unique ID");
  LOG::LogUniqueId( message:"Function Invocation", uid:id );
  LOG::LogUniqueId( message:"Bridge Invocation", uid:id2 );
  LOG::LogUniqueId( message:"Instance Operation Invocation", uid:id3 );
  LOG::LogUniqueId( message:"Class Operation Invocation", uid:id4 );
end if;

if ( ( en == en2 ) and ( en3 == en4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Enumeration" );
else
  LOG::LogFailure( message:"Multiple Invocation - Enumeration");
end if;

if ( ( u == u2 ) and ( u3 == u4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - User Data Type" );
else
  LOG::LogFailure( message:"Multiple Invocation - User Data Type");
  LOG::LogInt( message:"Function Invocation", int:u );
  LOG::LogInt( message:"Bridge Invocation", int:u2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u3 );
  LOG::LogInt( message:"Class Operation Invocation", int:u4 );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("94c5c44d-e7dd-4fb2-b6d6-c8ed1c4180e5",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fe9a85a6-62a3-4148-a250-61528b1c8e05",
	"00000000-0000-0000-0000-000000000000",
	'multiple_invoke_w_expressions',
	'',
	'select any tc from instances of TC;

select any tc4 from instances of TC4;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Functions
////////////////////////////
b = ::bool1( date1: ::date1( evt1:tc.e ) ) and REE::bool5(date5: tc.date3( evt3:tc.e ) );
tr = ::timer1( int1:TC::int4( real4:tc.r )      +    ::int1( real1: tc.real3( str3:tc.s ) ) );
i = ::int1(real1: ::real1(str1:tc.s)               -   EE::real2( str2: tc.str3( time3:tc.t ) ) );
r = ::real1(str1: EE::str2(time2:tc.t)          +    tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s = ::str1( time1: EE::time2( id2: tc.ID ) )  +    tc.str3( time3: TC::time4( id4: tc.ID ) );
en = ::enum1(udt1:EE::udt2(bool2:tc.b)   /    tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
u = ::udt1(bool1: tc.bool3(date3:tc.d)    and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Bridges
////////////////////////////
b2 = EE::bool2(date2: ::date1(evt1:tc.e))  and EE::bool2(date2: tc.date3( evt3:tc.e ) );
tr2 =  EE::timer2(int2: TC::int4(real4:tc.r)     +   ::int1( real1: tc.real3( str3:tc.s ) ) );
i2 =  EE::int2(real2: ::real1(str1:tc.s)            *  REE::real5( str5: tc.str3( time3:tc.t ) ) );
r2 =  EE::real2(str2:  EE::str2(time2:tc.t)      +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s2 =  EE::str2(time2: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
en2 = EE::enum2(udt2: REE::udt5(bool5:tc.b) /  ::udt1( bool1: TC::bool4( date4:tc.d ) ) );
u2 = EE::udt2(bool2: tc4.bool6(date6:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Instance Operations
////////////////////////////
b3 = tc.bool3(date3: ::date1(evt1:tc.e))   or EE::bool2(date2: tc.date3( evt3:tc.e ) );
tr3 =  tc.timer3(int3:TC4::int7(real7:tc.r)       +   REE::int5( real5: tc.real3( str3:tc.s ) ) );
i3 =  tc.int3(real3: TC::real4(str4:tc.s)            -  REE::real5( str5: tc.str3( time3:tc.t ) ) );
r3 =  tc4.real6(str6: EE::str2(time2:tc.t)        +   tc4.str6( time6: TC::time4( id4:tc.ID ) ) );
s3 =  tc.str3(time3: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
en3 = tc4.enum6(udt6: TC4::udt7(bool7:tc.b) -  tc4.udt6( bool6: TC::bool4( date4:tc.d ) ) );
u3 = tc.udt3(bool3: tc.bool3(date3:tc.d)   or  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Class Operations
////////////////////////////
b4 = TC::bool4(date4: ::date1(evt1:tc.e))   or REE::bool5(date5: tc.date3( evt3:tc.e ) );
tr4 = TC::timer4(int4:TC::int4(real4:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
i4 = TC::int4(real4: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
r4 = TC::real4(str4: REE::str5(time5:tc.t)        +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s4 = TC::str4(time4: ::time1(id1:tc.ID))       +  tc4.str6( time6: TC::time4( id4: tc.ID ) );
en4 = TC::enum4(udt4:EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
u4 = TC::udt4(bool4: tc4.bool6(date6:tc.d)   or  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Results
////////////////////////////
if ( b and b2 and b3 and b4 )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Boolean" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:b2 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b3 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b4 );
end if;

if ( ( tr == tr2 ) and ( tr3 == tr4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Timer" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Timer");
end if;

if ( ( i == i2 ) and ( i3 == i4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Integer" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Integer");
  LOG::LogInt( message:"Function Invocation", int:i );
  LOG::LogInt( message:"Bridge Invocation", int:i2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i3 );
  LOG::LogInt( message:"Class Operation Invocation", int:i4 );
end if;

if ( ( r == r2 ) and ( r3 == r4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Real" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Real");
  LOG::LogReal( message:"Function Invocation", real:r );
  LOG::LogReal( message:"Bridge Invocation", real:r2 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r3 );
  LOG::LogReal( message:"Class Operation Invocation", real:r4 );
end if;

if ( ( s == s2 ) and ( s3 == s4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - String" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - String");
  LOG::LogString( message:"Function Invocation", str:s );
  LOG::LogString( message:"Bridge Invocation", str:s2 );
  LOG::LogString( message:"Instance Operation Invocation", str:s3 );
  LOG::LogString( message:"Class Operation Invocation", str:s4 );
end if;

if ( ( en == en2 ) and ( en3 == en4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Enumeration" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Enumeration");
end if;

if ( ( u == u2 ) and ( u3 == u4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - User Data Type" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - User Data Type");
  LOG::LogInt( message:"Function Invocation", int:u );
  LOG::LogInt( message:"Bridge Invocation", int:u2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u3 );
  LOG::LogInt( message:"Class Operation Invocation", int:u4 );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("fe9a85a6-62a3-4148-a250-61528b1c8e05",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b1b37140-e0ca-4c3b-ab0a-5650eb3d6445",
	"00000000-0000-0000-0000-000000000000",
	'ret1',
	'',
	'select any tc from instances of TC;

return ::bool1( date1: EE::date2( evt2: tc.evt3( timer3: TC::timer4( int4: ::int1( real1: tc.r + EE::real2( str2: tc.s ) ) + tc.int3( real3: TC::real4( str4: tc.s ) ) ) ) ) ) and ( ( EE::bool2( date2:tc.d ) or ( tc.bool3( date3:tc.d ) ) and TC::bool4( date4:tc.d ) ) );',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b1b37140-e0ca-4c3b-ab0a-5650eb3d6445",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	"00000000-0000-0000-0000-000000000000",
	'mod_params1',
	'',
	'//////////////////////////////
// Param Assign
//////////////////////////////

select any tc from instances of TC;
select any tc_4 from instances of TC4;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Functions
////////////////////////////
param.b = ::bool1( date1: ::date1( evt1:tc.e ) ) and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr = ::timer1( int1:TC::int4( real4:tc.r )      +    ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i = ::int1(real1: ::real1(str1:tc.s)               +   EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r = ::real1(str1: EE::str2(time2:tc.t)          +    tc.str3( time3: TC::time4( id4:tc.ID ) ) );
param.s = ::str1( time1: EE::time2( id2: tc.ID ) )  +    tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en = ::enum1(udt1:EE::udt2(bool2:tc.b)   +    tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u = ::udt1(bool1: tc.bool3(date3:tc.d)    and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Bridges
////////////////////////////
param.b2 = EE::bool2(date2: ::date1(evt1:tc.e))  and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr2 =  EE::timer2(int2: TC::int4(real4:tc.r)     +   ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i2 =  REE::int5(real5: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r2 =  EE::real2(str2:  EE::str2(time2:tc.t)      +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
param.s2 =  REE::str5(time5: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en2 = EE::enum2(udt2: EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u2 = EE::udt2(bool2: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Instance Operations
////////////////////////////
param.b3 = tc.bool3(date3: ::date1(evt1:tc.e))   and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr3 =  tc.timer3(int3:TC::int4(real4:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i3 =  tc.int3(real3: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r3 =  tc_4.real6(str6: EE::str2(time2:tc.t)        +   tc_4.str6( time6: TC::time4( id4:tc.ID ) ) );
param.s3 =  tc_4.str6(time6: ::time1(id1:tc.ID))       +  tc_4.str6( time6: TC::time4( id4: tc.ID ) );
param.en3 = tc.enum3(udt3: EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u3 = tc.udt3(bool3: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Class Operations
////////////////////////////
param.b4 = TC::bool4(date4: ::date1(evt1:tc.e))   and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr4 = TC::timer4(int4:TC::int4(real4:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i4 = TC4::int7(real7: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r4 = TC4::real7(str7: EE::str2(time2:tc.t)        +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
param.s4 = TC::str4(time4:tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en4 = TC::enum4(udt4:EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u4 = TC::udt4(bool4: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Results
////////////////////////////
if ( param.b and param.b2 and param.b3 and param.b4 )
  LOG::LogSuccess( message:"Assign Param - Boolean" );
else
  LOG::LogFailure( message:"Assign Param - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:param.b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:param.b );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:param.b );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:param.b );
end if;

if ( ( param.tr ==  param.tr2 ) and (  param.tr3 ==  param.tr4 ) )
  LOG::LogSuccess( message:"Assign Param - Timer" );
else
  LOG::LogFailure( message:"Assign Param - Timer");
end if;

if ( ( param.i ==  param.i2 ) and (  param.i3 ==  param.i4 ) )
  LOG::LogSuccess( message:"Assign Param - Integer" );
else
  LOG::LogFailure( message:"Assign Param - Integer");
  LOG::LogInt( message:"Function Invocation", int: param.i );
  LOG::LogInt( message:"Bridge Invocation", int: param.i );
  LOG::LogInt( message:"Instance Operation Invocation", int: param.i );
  LOG::LogInt( message:"Class Operation Invocation", int: param.i );
end if;

if ( (  param.r ==  param.r2 ) and (  param.r3 ==  param.r4 ) )
  LOG::LogSuccess( message:"Assign Param - Real" );
else
  LOG::LogFailure( message:"Assign Param - Real");
  LOG::LogReal( message:"Function Invocation", real: param.r );
  LOG::LogReal( message:"Bridge Invocation", real: param.r );
  LOG::LogReal( message:"Instance Operation Invocation", real: param.r );
  LOG::LogReal( message:"Class Operation Invocation", real: param.r );
end if;

if ( (  param.s ==  param.s2 ) and (  param.s3 ==  param.s4 ) )
  LOG::LogSuccess( message:"Assign Param - String" );
else
  LOG::LogFailure( message:"Assign Param - String");
  LOG::LogString( message:"Function Invocation", str: param.s );
  LOG::LogString( message:"Bridge Invocation", str: param.s );
  LOG::LogString( message:"Instance Operation Invocation", str: param.s );
  LOG::LogString( message:"Class Operation Invocation", str: param.s );
end if;

if ( (  param.en ==  param.en2 ) and (  param.en3 ==  param.en4 ) )
  LOG::LogSuccess( message:"Assign Param - Enumeration" );
else
  LOG::LogFailure( message:"Assign Param - Enumeration");
end if;

if ( (  param.u ==  param.u2 ) and (  param.u3 ==  param.u4 ) )
  LOG::LogSuccess( message:"Assign Param - User Data Type" );
else
  LOG::LogFailure( message:"Assign Param - User Data Type");
  LOG::LogInt( message:"Function Invocation", int: param.u );
  LOG::LogInt( message:"Bridge Invocation", int: param.u );
  LOG::LogInt( message:"Instance Operation Invocation", int: param.u );
  LOG::LogInt( message:"Class Operation Invocation", int: param.u );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("282dbf54-0f98-4a5b-8ec7-f92abf1c9957",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6d3c1bb6-b572-4a4e-b098-2a8b31863952",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'en',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"ad7665fd-29d1-4c68-bcd1-3f94f23186a6",
	'');
INSERT INTO S_SPARM
	VALUES ("29ad0881-b985-4fd7-a3de-f555c4ffe432",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'tr',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"efee93df-294c-4eba-8e1c-20aa13a57e4a",
	'');
INSERT INTO S_SPARM
	VALUES ("cd09996c-d5a8-4bc6-81d5-c0ba8b590681",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"2535851a-ad16-43d1-ab33-1f0959a86893",
	'');
INSERT INTO S_SPARM
	VALUES ("97365b6c-6b7c-4705-a2a3-3c84bf227f68",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"c437ee1d-a675-42cb-94a6-b82b8b3d96b3",
	'');
INSERT INTO S_SPARM
	VALUES ("64b66eb8-da22-4a58-b76a-881558101b15",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"5f7ba314-e4c3-472d-8887-3da731580c82",
	'');
INSERT INTO S_SPARM
	VALUES ("13ada3d2-9436-4491-99d9-af8103525988",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'u',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"6f070454-5b7a-49d7-a87f-cc6e445bb71b",
	'');
INSERT INTO S_SPARM
	VALUES ("c32e98d3-dfdc-4777-abde-1523ac26f0f2",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'b2',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"282dbf54-0f98-4a5b-8ec7-f92abf1c9957",
	'');
INSERT INTO S_SPARM
	VALUES ("22b66060-1e58-4398-acb7-4d254a83aa68",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'tr2',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"29ad0881-b985-4fd7-a3de-f555c4ffe432",
	'');
INSERT INTO S_SPARM
	VALUES ("18e4be70-9246-433c-a3fd-2b8490f3761a",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'i2',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"cd09996c-d5a8-4bc6-81d5-c0ba8b590681",
	'');
INSERT INTO S_SPARM
	VALUES ("b467ad07-c5c5-4954-82f6-1b908d91aa93",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'r2',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"97365b6c-6b7c-4705-a2a3-3c84bf227f68",
	'');
INSERT INTO S_SPARM
	VALUES ("dc074673-89bf-4827-aa18-05a126423c7c",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	's2',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"64b66eb8-da22-4a58-b76a-881558101b15",
	'');
INSERT INTO S_SPARM
	VALUES ("9244c4e2-befe-4e58-9f10-77440cc24875",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'en2',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"6d3c1bb6-b572-4a4e-b098-2a8b31863952",
	'');
INSERT INTO S_SPARM
	VALUES ("31229e47-c643-4e3f-8b48-7ca3324839bb",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'u2',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"13ada3d2-9436-4491-99d9-af8103525988",
	'');
INSERT INTO S_SPARM
	VALUES ("51d770af-d206-4a98-93d9-13720c7bcb1d",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'b3',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"c32e98d3-dfdc-4777-abde-1523ac26f0f2",
	'');
INSERT INTO S_SPARM
	VALUES ("7370c56e-29c0-461d-9a18-e1b7bde94a8b",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'tr3',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"22b66060-1e58-4398-acb7-4d254a83aa68",
	'');
INSERT INTO S_SPARM
	VALUES ("65a1a1ed-d0a4-4a1e-8093-b09efa2bc797",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'i3',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"18e4be70-9246-433c-a3fd-2b8490f3761a",
	'');
INSERT INTO S_SPARM
	VALUES ("632962f6-8acd-4073-bb0a-76b8dd0a5587",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'r3',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"b467ad07-c5c5-4954-82f6-1b908d91aa93",
	'');
INSERT INTO S_SPARM
	VALUES ("47f91229-4063-405a-b535-568ff1a4a5e6",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	's3',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"dc074673-89bf-4827-aa18-05a126423c7c",
	'');
INSERT INTO S_SPARM
	VALUES ("84704340-74a3-40ab-a09a-de91e71620be",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'en3',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"9244c4e2-befe-4e58-9f10-77440cc24875",
	'');
INSERT INTO S_SPARM
	VALUES ("d5d91f98-93dc-4a45-93b0-e69184204206",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'u3',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"31229e47-c643-4e3f-8b48-7ca3324839bb",
	'');
INSERT INTO S_SPARM
	VALUES ("ad7665fd-29d1-4c68-bcd1-3f94f23186a6",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'b4',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"51d770af-d206-4a98-93d9-13720c7bcb1d",
	'');
INSERT INTO S_SPARM
	VALUES ("6f070454-5b7a-49d7-a87f-cc6e445bb71b",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'tr4',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"7370c56e-29c0-461d-9a18-e1b7bde94a8b",
	'');
INSERT INTO S_SPARM
	VALUES ("c437ee1d-a675-42cb-94a6-b82b8b3d96b3",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'i4',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"65a1a1ed-d0a4-4a1e-8093-b09efa2bc797",
	'');
INSERT INTO S_SPARM
	VALUES ("5f7ba314-e4c3-472d-8887-3da731580c82",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'r4',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"632962f6-8acd-4073-bb0a-76b8dd0a5587",
	'');
INSERT INTO S_SPARM
	VALUES ("efee93df-294c-4eba-8e1c-20aa13a57e4a",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	's4',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"47f91229-4063-405a-b535-568ff1a4a5e6",
	'');
INSERT INTO S_SPARM
	VALUES ("2535851a-ad16-43d1-ab33-1f0959a86893",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'en4',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"84704340-74a3-40ab-a09a-de91e71620be",
	'');
INSERT INTO S_SPARM
	VALUES ("46a4efed-c28e-40e6-b25e-27e0d83ca527",
	"6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	'u4',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"d5d91f98-93dc-4a45-93b0-e69184204206",
	'');
INSERT INTO PE_PE
	VALUES ("6de4912c-9483-4a98-b3e5-067ee0ff2afd",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06a77404-84f3-45fd-852d-fadf28a42764",
	"00000000-0000-0000-0000-000000000000",
	'real_invoke1',
	'',
	'select any tc from instances of TC;

select any tc7 from instances of TC4;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Bridges
////////////////////////////
b5 = REE::bool5(date5: ::date1(evt1:tc.e))  and REE::bool5(date5: tc.date3( evt3:tc.e ) );
i5 =  REE::int5(real5: ::real1(str1:tc.s)            +  EE::real2( str2: REE::str5( time5:tc.t ) ) );
r5 =  REE::real5(str5:  REE::str5(time5:tc.t)      +   tc7.str6( time6: TC::time4( id4:tc.ID ) ) );
s5 =  REE::str5(time5: tc.time3(id3:tc.ID))       +  tc7.str6( time6: TC::time4( id4: tc.ID ) );
en5 = REE::enum5(udt5: REE::udt5(bool5:tc.b) +  tc7.udt6( bool6: TC4::bool7( date7:tc.d ) ) );
u5 = REE::udt5(bool5: tc7.bool6(date6:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Instance Operations
////////////////////////////
b6 = tc7.bool6(date6: ::date1(evt1:tc.e))   and REE::bool5(date5: TC::date4( evt4:tc.e ) );
i6 =  tc7.int6(real6: ::real1(str1:tc.s)            +  REE::real5( str5: tc7.str6( time6:tc.t ) ) );
r6 =  tc7.real6(str6: REE::str5(time5:tc.t)        +   tc7.str6( time6: TC::time4( id4:tc.ID ) ) );
s6 =  tc7.str6(time6: TC::time4(id4:tc.ID))       +  tc7.str6( time6: TC::time4( id4: tc.ID ) );
en6 = tc7.enum6(udt6: REE::udt5(bool5:tc.b) +  tc7.udt6( bool6: REE::bool5( date5:tc.d ) ) );
u6 = tc7.udt6(bool6: tc7.bool6(date6:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Class Operations
////////////////////////////
b7 = TC4::bool7(date7: ::date1(evt1:tc.e))   and REE::bool5(date5: tc.date3( evt3:tc.e ) );
i7 = TC4::int7(real7: ::real1(str1:tc.s)            +  REE::real5( str5: tc7.str6( time6:tc.t ) ) );
r7 = TC4::real7(str7: REE::str5(time5:tc.t)        +   tc7.str6( time6: TC::time4( id4:tc.ID ) ) );
s7 = TC4::str7(time7:tc.time3(id3:tc.ID))       +  TC::str4( time4: TC::time4( id4: tc.ID ) );
en7 = TC4::enum7(udt7:REE::udt5(bool5:tc.b) +  tc7.udt6( bool6: TC4::bool7( date7:tc.d ) ) );
u7 = TC4::udt7(bool7: tc7.bool6(date6:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Results
////////////////////////////
if ( b5 and b6 and b7 )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Boolean" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Boolean");
  LOG::LogBoolean( message:"Bridge Invocation", bool:b5 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b6 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b7 );
end if;

if ( ( i5 == i6 ) and ( i6 == i7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Integer" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Integer");
  LOG::LogInt( message:"Bridge Invocation", int:i5 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i6 );
  LOG::LogInt( message:"Class Operation Invocation", int:i7 );
end if;

if ( ( r5 == r6 ) and ( r6 == r7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Real" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Real");
  LOG::LogReal( message:"Bridge Invocation", real:r5 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r6 );
  LOG::LogReal( message:"Class Operation Invocation", real:r7 );
end if;

if ( ( s5 == s6 ) and ( s6 == s7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - String" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - String");
  LOG::LogString( message:"Bridge Invocation", str:s5 );
  LOG::LogString( message:"Instance Operation Invocation", str:s6 );
  LOG::LogString( message:"Class Operation Invocation", str:s7 );
end if;

if ( ( en5 == en6 ) and ( en6 == en7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Enumeration" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Enumeration");
end if;

if ( ( u5 == u6 ) and ( u6 == u7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - User Data Type" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - User Data Type");
  LOG::LogInt( message:"Bridge Invocation", int:u5 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u6 );
  LOG::LogInt( message:"Class Operation Invocation", int:u7 );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("06a77404-84f3-45fd-852d-fadf28a42764",
	1,
	"d476e70b-1d7e-41eb-ad69-895977d633a8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("d476e70b-1d7e-41eb-ad69-895977d633a8",
	1,
	"ccb6afe9-aa88-442b-b8ad-fd49a9b35abf",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("ccb6afe9-aa88-442b-b8ad-fd49a9b35abf",
	"0d7f30b4-802c-4448-8609-9f80dc325590",
	"0d7f30b4-802c-4448-8609-9f80dc325590",
	'G_ALL_nested_invoke',
	'This test is designed to exercise the use of invocations of functions, bridges, instance operations, and class operations as rvals.  Specifically as parameters, in assignments, as return values, in where statements, in if, elif, for, and while. Also, multiple invocations, i.e. an invocation as a parameter to another invocation, or two invocations added together with one having an invocation as a parameter, etc.

For test coverage see MC-2020_coverage.xls.',
	0,
	'../G_ALL_nested_invoke.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("0d7f30b4-802c-4448-8609-9f80dc325590",
	'G_ALL_nested_invoke',
	1,
	'../../G_ALL_nested_invoke.xtuml');
