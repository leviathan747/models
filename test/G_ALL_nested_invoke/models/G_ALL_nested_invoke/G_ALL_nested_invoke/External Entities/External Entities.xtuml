-- BP 7.1 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("b973d9db-1897-4355-9843-43412096d944",
	"00000000-0000-0000-0000-000000000000",
	"0d7f30b4-802c-4448-8609-9f80dc325590",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("e9a5a3bd-4779-4e06-a812-85b482b54181",
	112,
	"b973d9db-1897-4355-9843-43412096d944",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'G_ALL_nested_invoke::External Entities');
INSERT INTO GD_GE
	VALUES ("b99970a2-8ab8-4495-a6e9-80166e2fb1c7",
	"e9a5a3bd-4779-4e06-a812-85b482b54181",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	12,
	0,
	'G_ALL_nested_invoke::External Entities::Time');
INSERT INTO GD_SHP
	VALUES ("b99970a2-8ab8-4495-a6e9-80166e2fb1c7");
INSERT INTO GD_NCS
	VALUES ("b99970a2-8ab8-4495-a6e9-80166e2fb1c7");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"b99970a2-8ab8-4495-a6e9-80166e2fb1c7");
INSERT INTO DIM_GE
	VALUES (1936.000000,
	1536.000000,
	"b99970a2-8ab8-4495-a6e9-80166e2fb1c7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b99970a2-8ab8-4495-a6e9-80166e2fb1c7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("7bb19785-d5f3-43dc-b31a-e1fb4130415c",
	"e9a5a3bd-4779-4e06-a812-85b482b54181",
	"6fe3c5f2-31ae-476a-83b3-264e27b8ae70",
	12,
	0,
	'G_ALL_nested_invoke::External Entities::Architecture');
INSERT INTO GD_SHP
	VALUES ("7bb19785-d5f3-43dc-b31a-e1fb4130415c");
INSERT INTO GD_NCS
	VALUES ("7bb19785-d5f3-43dc-b31a-e1fb4130415c");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"7bb19785-d5f3-43dc-b31a-e1fb4130415c");
INSERT INTO DIM_GE
	VALUES (2144.000000,
	1536.000000,
	"7bb19785-d5f3-43dc-b31a-e1fb4130415c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7bb19785-d5f3-43dc-b31a-e1fb4130415c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("477a4e1d-2dcd-4820-a1fd-764fb5d8bdb3",
	"e9a5a3bd-4779-4e06-a812-85b482b54181",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	12,
	0,
	'G_ALL_nested_invoke::External Entities::Logging');
INSERT INTO GD_SHP
	VALUES ("477a4e1d-2dcd-4820-a1fd-764fb5d8bdb3");
INSERT INTO GD_NCS
	VALUES ("477a4e1d-2dcd-4820-a1fd-764fb5d8bdb3");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"477a4e1d-2dcd-4820-a1fd-764fb5d8bdb3");
INSERT INTO DIM_GE
	VALUES (2352.000000,
	1536.000000,
	"477a4e1d-2dcd-4820-a1fd-764fb5d8bdb3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("477a4e1d-2dcd-4820-a1fd-764fb5d8bdb3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("0968ecac-b854-48c6-9888-327443886c7a",
	"e9a5a3bd-4779-4e06-a812-85b482b54181",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	12,
	0,
	'G_ALL_nested_invoke::External Entities::EE');
INSERT INTO GD_SHP
	VALUES ("0968ecac-b854-48c6-9888-327443886c7a");
INSERT INTO GD_NCS
	VALUES ("0968ecac-b854-48c6-9888-327443886c7a");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"0968ecac-b854-48c6-9888-327443886c7a");
INSERT INTO DIM_GE
	VALUES (1936.000000,
	1392.000000,
	"0968ecac-b854-48c6-9888-327443886c7a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0968ecac-b854-48c6-9888-327443886c7a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("40142933-0ac0-43f7-94ad-724a9c0fd3e2",
	"e9a5a3bd-4779-4e06-a812-85b482b54181",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	12,
	0,
	'G_ALL_nested_invoke::External Entities::Realized EE');
INSERT INTO GD_SHP
	VALUES ("40142933-0ac0-43f7-94ad-724a9c0fd3e2");
INSERT INTO GD_NCS
	VALUES ("40142933-0ac0-43f7-94ad-724a9c0fd3e2");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"40142933-0ac0-43f7-94ad-724a9c0fd3e2");
INSERT INTO DIM_GE
	VALUES (2352.000000,
	1392.000000,
	"40142933-0ac0-43f7-94ad-724a9c0fd3e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("40142933-0ac0-43f7-94ad-724a9c0fd3e2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("e9a5a3bd-4779-4e06-a812-85b482b54181",
	'',
	1.000000,
	1823.000000,
	1205.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_EE
	VALUES ("f65d643d-d257-4118-87a9-702a6cce8243",
	'Time',
	'',
	'TIM',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("38be7d92-6cc7-40ba-97ab-8a3821968e54",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'current_date',
	'Returns the current date.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	0,
	'');
INSERT INTO S_BRG
	VALUES ("c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'create_date',
	'Creates a date based on input parameters.

Returns a date.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("eaf7c8b7-9dda-4707-a477-2f23c98f7d0d",
	"c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	'second',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"28595930-db7c-476f-a40a-b9edef9794bf",
	'');
INSERT INTO S_BPARM
	VALUES ("a991639b-8d71-40c4-bf5c-49633b8da253",
	"c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	'minute',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7727208b-d0ec-4bb6-b8ad-9f99a98f2a01",
	'');
INSERT INTO S_BPARM
	VALUES ("7727208b-d0ec-4bb6-b8ad-9f99a98f2a01",
	"c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	'hour',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b2de9cf5-c416-40d9-a10c-e51020c0a004",
	'');
INSERT INTO S_BPARM
	VALUES ("b2de9cf5-c416-40d9-a10c-e51020c0a004",
	"c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	'day',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("28595930-db7c-476f-a40a-b9edef9794bf",
	"c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	'month',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a991639b-8d71-40c4-bf5c-49633b8da253",
	'');
INSERT INTO S_BPARM
	VALUES ("2c88f5a3-1f92-4097-a0fe-a049114fd10d",
	"c29e8b79-44d2-4389-bea0-603b68cfa7c9",
	'year',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"eaf7c8b7-9dda-4707-a477-2f23c98f7d0d",
	'');
INSERT INTO S_BRG
	VALUES ("8ed4247a-604e-4c22-ac71-14711704c009",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'get_second',
	'Returns the second contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("d34b8aad-dd97-4406-ba2a-9112845bd098",
	"8ed4247a-604e-4c22-ac71-14711704c009",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("fe8a3e94-bb67-407d-959c-076e5e12ec7d",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'get_minute',
	'Returns the minute contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("ea49b667-5e0f-4f31-a0d7-0c2af66f0d25",
	"fe8a3e94-bb67-407d-959c-076e5e12ec7d",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("de3ef62d-6176-4021-b69f-9d8d22ca951c",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'get_hour',
	'Returns the hour contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("0df835d5-7783-47f7-86d4-9edee3fc7028",
	"de3ef62d-6176-4021-b69f-9d8d22ca951c",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("8231f117-4c4e-4735-8d21-4699f302e3b8",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'get_day',
	'Returns the day contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("359cdd9a-2755-4123-b729-cff16bfd7950",
	"8231f117-4c4e-4735-8d21-4699f302e3b8",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("c3c5e739-e756-4666-a10b-a82d3b1f7707",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'get_month',
	'Returns the month contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("ca37c9bb-3b5f-4c8e-81d3-87191557029a",
	"c3c5e739-e756-4666-a10b-a82d3b1f7707",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("3be9f238-f585-4e9c-b1d3-03f5e9599b0c",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'get_year',
	'Returns the year contained in <date>.',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("085e2943-6c8d-48ea-9626-111f3f4fada4",
	"3be9f238-f585-4e9c-b1d3-03f5e9599b0c",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("1ed11ee2-7cd0-4b4d-8dea-da2e2d15cacb",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'current_clock',
	'Returns the current time.',
	1,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	0,
	'');
INSERT INTO S_BRG
	VALUES ("93fe5fe0-3934-436f-a07d-9731006ab726",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'timer_start',
	'Starts a (one shot) timer to expire in <microseconds>, sending <event_inst> upon expiration.  Note that upon expiration the timer will be deleted.

Returns the instance handle of the non-recurring timer.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("d4d4d666-0482-4645-ae98-a2553e6b1cd0",
	"93fe5fe0-3934-436f-a07d-9731006ab726",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b9c6bfdf-8c5e-403e-8c83-e978cb528bb7",
	'');
INSERT INTO S_BPARM
	VALUES ("b9c6bfdf-8c5e-403e-8c83-e978cb528bb7",
	"93fe5fe0-3934-436f-a07d-9731006ab726",
	'event_inst',
	"ba5eda7a-def5-0000-0000-00000000000a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("0464370f-616a-43b5-986d-b2127133de12",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'timer_start_recurring',
	'Starts a (recurring) timer to expire in <microseconds>, sending <event_inst> upon expiration.  Upon expiration, the timer will be restarted and fire again in <microseconds> and (re)generate the event <event_inst>.

Returns the instance handle of the recurring timer.',
	1,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("47bd228f-c26a-4f06-a9c0-7256848893ea",
	"0464370f-616a-43b5-986d-b2127133de12",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"ac5bcff4-9115-4185-8399-64a7d34f6904",
	'');
INSERT INTO S_BPARM
	VALUES ("ac5bcff4-9115-4185-8399-64a7d34f6904",
	"0464370f-616a-43b5-986d-b2127133de12",
	'event_inst',
	"ba5eda7a-def5-0000-0000-00000000000a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("b0262808-3fe0-4bf4-9a8a-840cbf23983c",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'timer_remaining_time',
	'Returns the time remaining (in microseconds) before <timer_inst_ref> expires. If <timer_inst_ref> no longer exists, a zero value will be returned. 

It is important to note that even if it no longer exists, an event may still be in transit (e.g., was generated) from a previous timer expiration.  Respectable OOA must account for this "ships passing" possibility.

Returns the time remaining.
',
	1,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("ae84061c-8afa-4ad6-988e-b09625dc0430",
	"b0262808-3fe0-4bf4-9a8a-840cbf23983c",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("94e99c08-d2cc-49bf-8b56-ab1b1d434557",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'timer_reset_time',
	'This method attempts to set <timer_inst_ref> to expire <microseconds>.

It is important to note that an event may still be in transit (e.g., was already generated) from a previous expiration prior to this method invocation.  Respectable OOA must account for this "ships passing" possibility.

Returns TRUE if the timer exists, otherwise FALSE.',
	1,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("bb13c1fd-79aa-4a1b-a0f1-1541c6370e4c",
	"94e99c08-d2cc-49bf-8b56-ab1b1d434557",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"4fe2096e-1045-416d-b785-3e1d8c4e4a38",
	'');
INSERT INTO S_BPARM
	VALUES ("4fe2096e-1045-416d-b785-3e1d8c4e4a38",
	"94e99c08-d2cc-49bf-8b56-ab1b1d434557",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("5fc5f115-b37c-420b-87cd-13680f3d0b01",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'timer_add_time',
	'This method attempts to add <microseconds> to the <timer_inst_ref>. 

It is important to note that an event may still be in transit (e.g., was already generated) from a previous expiration prior to this method invocation.  Respectable OOA must account for this "ships passing" possibility.

Returns TRUE if the timer exists, otherwise FALSE.',
	1,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("696247fb-6017-46ba-9079-49e00dcb3ac7",
	"5fc5f115-b37c-420b-87cd-13680f3d0b01",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"efa299ad-b418-44ca-aa9d-ed9bf58c037d",
	'');
INSERT INTO S_BPARM
	VALUES ("efa299ad-b418-44ca-aa9d-ed9bf58c037d",
	"5fc5f115-b37c-420b-87cd-13680f3d0b01",
	'microseconds',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("0c4b6c23-ad62-4138-a050-205871e564f7",
	"f65d643d-d257-4118-87a9-702a6cce8243",
	'timer_cancel',
	'This method attempts to cancel and delete <timer_inst_ref>.  

It is important to note that an event may still be in transit (e.g., was already generated) from a previous expiration prior to this method invocation.  Respectable OOA must account for this "ships passing" possibility.

Returns TRUE if the timer exists, otherwise FALSE.',
	1,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	0,
	'');
INSERT INTO S_BPARM
	VALUES ("419e9394-8d40-46b2-8996-4a5ab97c9dee",
	"0c4b6c23-ad62-4138-a050-205871e564f7",
	'timer_inst_ref',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f65d643d-d257-4118-87a9-702a6cce8243",
	1,
	"b973d9db-1897-4355-9843-43412096d944",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("6fe3c5f2-31ae-476a-83b3-264e27b8ae70",
	'Architecture',
	'This EE provides an interface between the domain and the run time implementation that supports the execution of the domain.',
	'ARCH',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("38c99470-aa0a-43d7-94cf-856170a98116",
	"6fe3c5f2-31ae-476a-83b3-264e27b8ae70",
	'shutdown',
	'This bridge sends a request to the run time implementation to shut down.',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'control stop;',
	1,
	'');
INSERT INTO PE_PE
	VALUES ("6fe3c5f2-31ae-476a-83b3-264e27b8ae70",
	1,
	"b973d9db-1897-4355-9843-43412096d944",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'Logging',
	'This EE is responsible for logging test data.

The output will be written to a file that may be used for test verification.',
	'LOG',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("aa8f79cb-6122-4671-93ff-879e06a997be",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogFailure',
	'Log a test failure.

Output fomat:

"Log Failure - <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("37a1cd69-0ecf-4064-a842-34291ac50102",
	"aa8f79cb-6122-4671-93ff-879e06a997be",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("02a793a8-4294-4de3-8d13-5792559e9567",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogInfo',
	'Log some information.

Output fomat:

"Log Info - <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("72365859-570e-4e3f-b75e-8b43b8a926ce",
	"02a793a8-4294-4de3-8d13-5792559e9567",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("76525b31-68cd-4445-933b-f13f2a430feb",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogSuccess',
	'Log a test success.

Output fomat:

"Log Success - <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("5362f2ee-e394-4cd1-8462-7dd59dca9183",
	"76525b31-68cd-4445-933b-f13f2a430feb",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("d25804f5-07f8-4e2c-8d36-5803b398ee4b",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogReal',
	'Log a real value with an optional message.

Output fomat:

"Log Real - <real>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("dc7eea45-60b7-40a4-8348-cd94518dd33e",
	"d25804f5-07f8-4e2c-8d36-5803b398ee4b",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("e6e14e49-9ad1-48ed-91b7-0d08549ac3b0",
	"d25804f5-07f8-4e2c-8d36-5803b398ee4b",
	'real',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"dc7eea45-60b7-40a4-8348-cd94518dd33e",
	'');
INSERT INTO S_BRG
	VALUES ("b612c934-d061-43da-986f-07668b0f1f84",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogDate',
	'Log a date value with an optional message.

Output fomat:

"Log Date - <date>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("8c849aaa-0f09-4176-8a12-6efb64731b39",
	"b612c934-d061-43da-986f-07668b0f1f84",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6144ce1d-e7f9-4e13-8e19-5fd7cc7556c0",
	'');
INSERT INTO S_BPARM
	VALUES ("6144ce1d-e7f9-4e13-8e19-5fd7cc7556c0",
	"b612c934-d061-43da-986f-07668b0f1f84",
	'date',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("ca62be46-56bc-46d3-903a-ff9f34687818",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogTime',
	'Log a timestamp value with an optional message.

Output fomat:

"Log Time - <time>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("5c93f4f6-a850-4fba-a45f-aa46912ab64a",
	"ca62be46-56bc-46d3-903a-ff9f34687818",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("41a588ac-943c-4a57-a785-d19f1db74f6f",
	"ca62be46-56bc-46d3-903a-ff9f34687818",
	'time',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"5c93f4f6-a850-4fba-a45f-aa46912ab64a",
	'');
INSERT INTO S_BRG
	VALUES ("91d9b974-86a7-4703-9340-3fa4d4dc811b",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogInt',
	'Log an integer value with an optional message.

Output fomat:

"Log Int - <int>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("5c371c54-7667-4409-b7a5-a6b2a3e15e2f",
	"91d9b974-86a7-4703-9340-3fa4d4dc811b",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4501caa4-0424-4098-a467-9fadf5062fee",
	'');
INSERT INTO S_BPARM
	VALUES ("4501caa4-0424-4098-a467-9fadf5062fee",
	"91d9b974-86a7-4703-9340-3fa4d4dc811b",
	'int',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("75c1b04a-8bb2-4d0e-91d3-1fabd4af2e05",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogString',
	'Log a string value with an optional message.

Output fomat:

"Log String - <str>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("f3a70bb7-facf-4fc8-aa0c-fdd64d36cc5d",
	"75c1b04a-8bb2-4d0e-91d3-1fabd4af2e05",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("8519fba6-7c64-4ffd-8cdd-043e7eda2f2b",
	"75c1b04a-8bb2-4d0e-91d3-1fabd4af2e05",
	'str',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f3a70bb7-facf-4fc8-aa0c-fdd64d36cc5d",
	'');
INSERT INTO S_BRG
	VALUES ("ef4521fd-e56f-419c-9838-07e7d3928384",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogBoolean',
	'Log a boolean value with an optional message.

Output fomat:

"Log Boolean - <bool>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("c7d4789b-92bb-4556-a3ab-678d793df866",
	"ef4521fd-e56f-419c-9838-07e7d3928384",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c45aa4a9-f446-47b4-b750-27f8693e2812",
	'');
INSERT INTO S_BPARM
	VALUES ("c45aa4a9-f446-47b4-b750-27f8693e2812",
	"ef4521fd-e56f-419c-9838-07e7d3928384",
	'bool',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("6e7a3c7b-ae0c-4997-8c33-b3fb64b7a5fe",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogUniqueId',
	'Log a unique_id value with an optional message.

Output fomat:

"Log Unique ID - <uid>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("e02a0cc5-24c7-48e9-9e80-0f56d5a2338a",
	"6e7a3c7b-ae0c-4997-8c33-b3fb64b7a5fe",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("79b2df89-6659-4b9b-b97a-71dc372e085d",
	"6e7a3c7b-ae0c-4997-8c33-b3fb64b7a5fe",
	'uid',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"e02a0cc5-24c7-48e9-9e80-0f56d5a2338a",
	'');
INSERT INTO S_BRG
	VALUES ("2e179ee7-a2ad-4fff-a1d8-c78ea2dfbef0",
	"6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	'LogArbitraryId',
	'Log an arbitrary_id value with an optional message.

Output fomat:

"Log Arbitrary ID - <aid>: <message>"',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("27207f42-f793-4b8b-9c2f-bf11122ee55d",
	"2e179ee7-a2ad-4fff-a1d8-c78ea2dfbef0",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"15203b16-6a4c-42bb-818c-d0d8037dcf43",
	'');
INSERT INTO S_BPARM
	VALUES ("15203b16-6a4c-42bb-818c-d0d8037dcf43",
	"2e179ee7-a2ad-4fff-a1d8-c78ea2dfbef0",
	'aid',
	"56798fcc-a2de-4370-9e66-43eb5b5341ac",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("56798fcc-a2de-4370-9e66-43eb5b5341ac",
	"00000000-0000-0000-0000-000000000000",
	'arbitrary_id',
	'Arbitrary ID with core data type of unique_id.',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("6b63aafb-bc16-4ed6-adb8-a33a1cad3f4e",
	1,
	"b973d9db-1897-4355-9843-43412096d944",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'EE',
	'',
	'EE',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("722cba88-b380-44a2-ba60-3cd0b3bf5d25",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'bool2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'select any tc from instances of TC;

if ( param.date2 == tc.d )
  LOG::LogSuccess( message: "EE Bridge bool2 - Date parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge bool2 - Date parameter is incorrect." );
end if;

return tc.b;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("93e80845-a6c2-4047-8b39-7ec98d67d392",
	"722cba88-b380-44a2-ba60-3cd0b3bf5d25",
	'date2',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("9e8f074d-21c8-4363-b8f7-46172c729737",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'date2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'select any tc from instances of TC;

if ( param.evt2 == tc.e )
  LOG::LogSuccess( message: "EE Bridge date2 - Event parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge date2 - Event parameter is incorrect." );
end if;

return tc.d;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("02118c48-802c-4ea4-a395-83fd2fe4b0d6",
	"9e8f074d-21c8-4363-b8f7-46172c729737",
	'evt2',
	"ba5eda7a-def5-0000-0000-00000000000a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("edd7e411-e6f0-4211-b864-956c4333aa2e",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'evt2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'select any tc from instances of TC;

if ( param.timer2 == tc.tr )
  LOG::LogSuccess( message: "EE Bridge evt2 - Timer parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge evt2 - Timer parameter is incorrect." );
end if;

return tc.e;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("afddfb44-1fae-45c8-859f-f49be1a7a3b0",
	"edd7e411-e6f0-4211-b864-956c4333aa2e",
	'timer2',
	"ba5eda7a-def5-0000-0000-00000000000f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("704fc14b-4f9b-4846-942d-d7f23f7e51c5",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'timer2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'select any tc from instances of TC;

if ( ( param.int2 == tc.i ) OR ( param.int2 == ( 2 * tc.i ) ) )
  LOG::LogSuccess( message: "EE Bridge timer2 - Integer parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge timer2 - Integer parameter is incorrect." );
end if;

return tc.tr;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("86df6e9b-aa38-4d4c-93df-5288a05a7388",
	"704fc14b-4f9b-4846-942d-d7f23f7e51c5",
	'int2',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("38d4d3e8-b93b-4bfd-973e-82fbb558b249",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'int2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'select any tc from instances of TC;

if ( ( param.real2 == tc.r ) OR ( ( param.real2 == ( 2 * tc.r ) ) OR ( param.real2 == ( tc.r * tc.r ) ) ) )
  LOG::LogSuccess( message: "EE Bridge int2 - Real parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge int2 - Real parameter is incorrect." );
end if;

return tc.i;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("77c54f74-ddec-4155-8d81-619d28ce1f1b",
	"38d4d3e8-b93b-4bfd-973e-82fbb558b249",
	'real2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("6ffd616f-a65e-499d-b654-8ea6b745c2b1",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'real2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'select any tc from instances of TC;

if ( ( param.str2 == tc.s ) OR ( param.str2 == ( tc.s + tc.s ) ) )
  LOG::LogSuccess( message: "EE Bridge real2 - String parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge real2 - String parameter is incorrect." );
end if;

return tc.r;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("d3699615-806c-4061-8eba-7a939f05314c",
	"6ffd616f-a65e-499d-b654-8ea6b745c2b1",
	'str2',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("aa11088d-1d3a-4ad2-aeb0-abab0b0da7cd",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'str2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'select any tc from instances of TC;

if ( param.time2 == tc.t )
  LOG::LogSuccess( message: "EE Bridge str2 - Timestamp parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge str2 - Timestamp parameter is incorrect." );
end if;

return tc.s;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("b661c94c-f84d-4bc3-8921-dc1e4171c25c",
	"aa11088d-1d3a-4ad2-aeb0-abab0b0da7cd",
	'time2',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("23acf964-5437-4902-b670-3c541cbcbe3d",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'time2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'select any tc from instances of TC;

if ( param.id2 == tc.ID )
  LOG::LogSuccess( message: "EE Bridge time2 - Unique ID parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge time2 - Unique ID parameter is incorrect." );
end if;

return tc.t;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("c65b6651-1a38-43df-9a59-3273efd6f4f4",
	"23acf964-5437-4902-b670-3c541cbcbe3d",
	'id2',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("1b5bb6e2-f9b0-47fe-abbe-33cf19510b1c",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'id2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'select any tc from instances of TC;

if ( param.enum2 == tc.en )
  LOG::LogSuccess( message: "EE Bridge id2 - Enumeration parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge id2 - Enumeration parameter is incorrect." );
end if;

return tc.ID;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("61e24f86-a2ef-4b47-b7c7-8732db758332",
	"1b5bb6e2-f9b0-47fe-abbe-33cf19510b1c",
	'enum2',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	"00000000-0000-0000-0000-000000000000",
	'enum',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO S_BRG
	VALUES ("3ac1cc63-685a-46a6-8803-b8cbc43279d5",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'enum2',
	'',
	0,
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	'select any tc from instances of TC;

if ( ( param.udt2 == tc.u ) OR ( ( param.udt2 == ( 2 * tc.u ) ) OR ( param.udt2 == 1 ) ) )
  LOG::LogSuccess( message: "EE Bridge enum2 - User Data Type parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge enum2 - User Data Type parameter is incorrect." );
end if;

return tc.en;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("210f0fc1-edf4-4353-bec4-45ac6c9ccfbc",
	"3ac1cc63-685a-46a6-8803-b8cbc43279d5",
	'udt2',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("42a729d2-3361-4a77-8752-dce5f2fd5786",
	"00000000-0000-0000-0000-000000000000",
	'udt',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO S_BRG
	VALUES ("9a4aadec-cd8d-4fa0-b1ba-f73f025f8d46",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'udt2',
	'',
	0,
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	'select any tc from instances of TC;

if ( param.bool2 == tc.b )
  LOG::LogSuccess( message: "EE Bridge udt2 - Boolean parameter is correct." );
else
  LOG::LogFailure( message: "EE Bridge udt2 - Boolean parameter is incorrect." );
end if;

return tc.u;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("74cacf5e-b4be-4853-b8bd-a4059a9163e2",
	"9a4aadec-cd8d-4fa0-b1ba-f73f025f8d46",
	'bool2',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("175dfb5c-2eb8-4f46-a67a-75c216634218",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'single_invoke',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'select any tc from instances of TC;

////////////////////////////
// Functions
////////////////////////////
b = ::bool1(date1:tc.d);
d = ::date1(evt1:tc.e);
e = ::evt1(timer1:tc.tr);
tr = ::timer1(int1:tc.i);
i = ::int1(real1:tc.r);
r = ::real1(str1:tc.s);
s = ::str1(time1:tc.t);
t = ::time1(id1:tc.ID);
id = ::id1(enum1:tc.en);
en = ::enum1(udt1:tc.u);
u = ::udt1(bool1:tc.b);

////////////////////////////
// Bridges
////////////////////////////
b2 = EE::bool2(date2:tc.d);
d2 = EE::date2(evt2:tc.e);
e2 =  EE::evt2(timer2:tc.tr);
tr2 =  EE::timer2(int2:tc.i);
i2 =  EE::int2(real2:tc.r);
r2 =  EE::real2(str2:tc.s);
s2 =  EE::str2(time2:tc.t);
t2 =  EE::time2(id2:tc.ID);
id2 =  EE::id2(enum2:tc.en);
en2 = EE::enum2(udt2:tc.u);
u2 = EE::udt2(bool2:tc.b);

////////////////////////////
// Instance Operations
////////////////////////////
b3 = tc.bool3(date3:tc.d);
d3 =  tc.date3(evt3:tc.e);
e3 =  tc.evt3(timer3:tc.tr);
tr3 =  tc.timer3(int3:tc.i);
i3 =  tc.int3(real3:tc.r);
r3 =  tc.real3(str3:tc.s);
s3 =  tc.str3(time3:tc.t);
t3 =  tc.time3(id3:tc.ID);
id3 =  tc.id3(enum3:tc.en);
en3 = tc.enum3(udt3:tc.u);
u3 = tc.udt3(bool3:tc.b);

////////////////////////////
// Class Operations
////////////////////////////
b4 = TC::bool4(date4:tc.d);
d4 = TC::date4(evt4:tc.e);
e4 = TC::evt4(timer4:tc.tr);
tr4 = TC::timer4(int4:tc.i);
i4 = TC::int4(real4:tc.r);
r4 = TC::real4(str4:tc.s);
s4 = TC::str4(time4:tc.t);
t4 = TC::time4(id4:tc.ID);
id4 = TC::id4(enum4:tc.en);
en4 = TC::enum4(udt4:tc.u);
u4 = TC::udt4(bool4:tc.b);

////////////////////////////
// Results
////////////////////////////
if ( b and b2 and b3 and b4 )
  LOG::LogSuccess( message:"Single Invocation - Boolean" );
else
  LOG::LogFailure( message:"Single Invocation - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:b2 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b3 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b4 );
end if;

if ( ( d == d2 ) and ( d3 == d4 ) )
  LOG::LogSuccess( message:"Single Invocation - Date" );
else
  LOG::LogFailure( message:"Single Invocation - Date");
  LOG::LogDate( message:"Function Invocation", date:d );
  LOG::LogDate( message:"Bridge Invocation", date:d2 );
  LOG::LogDate( message:"Instance Operation Invocation", date:d3 );
  LOG::LogDate( message:"Class Operation Invocation", date:d4 );
end if;

if ( ( e == e2 ) and ( e3 == e4 ) )
  LOG::LogSuccess( message:"Single Invocation - Event" );
else
  LOG::LogFailure( message:"Single Invocation - Event");
end if;

if ( ( tr == tr2 ) and ( tr3 == tr4 ) )
  LOG::LogSuccess( message:"Single Invocation - Timer" );
else
  LOG::LogFailure( message:"Single Invocation - Timer");
end if;

if ( ( i == i2 ) and ( i3 == i4 ) )
  LOG::LogSuccess( message:"Single Invocation - Integer" );
else
  LOG::LogFailure( message:"Single Invocation - Integer");
  LOG::LogInt( message:"Function Invocation", int:i );
  LOG::LogInt( message:"Bridge Invocation", int:i2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i3 );
  LOG::LogInt( message:"Class Operation Invocation", int:i4 );
end if;

if ( ( r == r2 ) and ( r3 == r4 ) )
  LOG::LogSuccess( message:"Single Invocation - Real" );
else
  LOG::LogFailure( message:"Single Invocation - Real");
  LOG::LogReal( message:"Function Invocation", real:r );
  LOG::LogReal( message:"Bridge Invocation", real:r2 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r3 );
  LOG::LogReal( message:"Class Operation Invocation", real:r4 );
end if;

if ( ( s == s2 ) and ( s3 == s4 ) )
  LOG::LogSuccess( message:"Single Invocation - String" );
else
  LOG::LogFailure( message:"Single Invocation - String");
  LOG::LogString( message:"Function Invocation", str:s );
  LOG::LogString( message:"Bridge Invocation", str:s2 );
  LOG::LogString( message:"Instance Operation Invocation", str:s3 );
  LOG::LogString( message:"Class Operation Invocation", str:s4 );
end if;

if ( ( t== t2 ) and ( t3 == t4 ) )
  LOG::LogSuccess( message:"Single Invocation - Timestamp" );
else
  LOG::LogFailure( message:"Single Invocation - Timestamp");
  LOG::LogTime( message:"Function Invocation", time:t );
  LOG::LogTime( message:"Bridge Invocation", time:t2 );
  LOG::LogTime( message:"Instance Operation Invocation", time:t3 );
  LOG::LogTime( message:"Class Operation Invocation", time:t4 );
end if;

if ( ( id == id2 ) and ( id3 == id4 ) )
  LOG::LogSuccess( message:"Single Invocation - Unique ID" );
else
  LOG::LogFailure( message:"Single Invocation - Unique ID");
  LOG::LogUniqueId( message:"Function Invocation", uid:id );
  LOG::LogUniqueId( message:"Bridge Invocation", uid:id2 );
  LOG::LogUniqueId( message:"Instance Operation Invocation", uid:id3 );
  LOG::LogUniqueId( message:"Class Operation Invocation", uid:id4 );
end if;

if ( ( en == en2 ) and ( en3 == en4 ) )
  LOG::LogSuccess( message:"Single Invocation - Enumeration" );
else
  LOG::LogFailure( message:"Single Invocation - Enumeration");
end if;

if ( ( u == u2 ) and ( u3 == u4 ) )
  LOG::LogSuccess( message:"Single Invocation - User Data Type" );
else
  LOG::LogFailure( message:"Single Invocation - User Data Type");
  LOG::LogInt( message:"Function Invocation", int:u );
  LOG::LogInt( message:"Bridge Invocation", int:u2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u3 );
  LOG::LogInt( message:"Class Operation Invocation", int:u4 );
end if;',
	1,
	'');
INSERT INTO S_BRG
	VALUES ("e0965a3a-910d-4ff2-9bbe-6d39a8839f61",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'multiple_invoke',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'select any tc from instances of TC;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Functions
////////////////////////////
b = ::bool1(date1: ::date1(evt1:tc.e));
d = ::date1(evt1:EE::evt2(timer2:tc.tr));
e = ::evt1(timer1: tc.timer3(int3:tc.i));
tr = ::timer1(int1:TC::int4(real4:tc.r));
i = ::int1(real1: ::real1(str1:tc.s));
r = ::real1(str1:  EE::str2(time2:tc.t));
s = ::str1(time1: tc.time3(id3:tc.ID));
t = ::time1(id1: TC::id4(enum4:tc.en));
id = ::id1(enum1: ::enum1(udt1:tc.u));
en = ::enum1(udt1:EE::udt2(bool2:tc.b));
u = ::udt1(bool1: tc.bool3(date3:tc.d));

////////////////////////////
// Bridges
////////////////////////////
b2 = EE::bool2(date2: ::date1(evt1:tc.e));
d2 = EE::date2(evt2:  EE::evt2(timer2:tc.tr));
e2 =  EE::evt2(timer2: tc.timer3(int3:tc.i));
tr2 =  EE::timer2(int2: TC::int4(real4:tc.r));
i2 =  EE::int2(real2: ::real1(str1:tc.s));
r2 =  EE::real2(str2:  EE::str2(time2:tc.t));
s2 =  EE::str2(time2: tc.time3(id3:tc.ID));
t2 =  EE::time2(id2: TC::id4(enum4:tc.en));
id2 =  EE::id2(enum2: ::enum1(udt1:tc.u));
en2 = EE::enum2(udt2: EE::udt2(bool2:tc.b));
u2 = EE::udt2(bool2: tc.bool3(date3:tc.d));

////////////////////////////
// Instance Operations
////////////////////////////
b3 = tc.bool3(date3: ::date1(evt1:tc.e));
d3 =  tc.date3(evt3: EE::evt2(timer2:tc.tr));
e3 =  tc.evt3(timer3:  tc.timer3(int3:tc.i));
tr3 =  tc.timer3(int3:TC::int4(real4:tc.r));
i3 =  tc.int3(real3: ::real1(str1:tc.s));
r3 =  tc.real3(str3: EE::str2(time2:tc.t));
s3 =  tc.str3(time3: tc.time3(id3:tc.ID));
t3 =  tc.time3(id3: TC::id4(enum4:tc.en));
id3 =  tc.id3(enum3: ::enum1(udt1:tc.u));
en3 = tc.enum3(udt3: EE::udt2(bool2:tc.b));
u3 = tc.udt3(bool3: tc.bool3(date3:tc.d));

////////////////////////////
// Class Operations
////////////////////////////
b4 = TC::bool4(date4: ::date1(evt1:tc.e));
d4 = TC::date4(evt4: EE::evt2(timer2:tc.tr));
e4 = TC::evt4(timer4: tc.timer3(int3:tc.i));
tr4 = TC::timer4(int4:TC::int4(real4:tc.r));
i4 = TC::int4(real4: ::real1(str1:tc.s));
r4 = TC::real4(str4: EE::str2(time2:tc.t));
s4 = TC::str4(time4:tc.time3(id3:tc.ID));
t4 = TC::time4(id4:TC::id4(enum4:tc.en));
id4 = TC::id4(enum4: ::enum1(udt1:tc.u));
en4 = TC::enum4(udt4:EE::udt2(bool2:tc.b));
u4 = TC::udt4(bool4: tc.bool3(date3:tc.d));

////////////////////////////
// Results
////////////////////////////
if ( b and b2 and b3 and b4 )
  LOG::LogSuccess( message:"Multiple Invocation - Boolean" );
else
  LOG::LogFailure( message:"Multiple Invocation - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:b2 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b3 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b4 );
end if;

if ( ( d == d2 ) and ( d3 == d4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Date" );
else
  LOG::LogFailure( message:"Multiple Invocation - Date");
  LOG::LogDate( message:"Function Invocation", date:d );
  LOG::LogDate( message:"Bridge Invocation", date:d2 );
  LOG::LogDate( message:"Instance Operation Invocation", date:d3 );
  LOG::LogDate( message:"Class Operation Invocation", date:d4 );
end if;

if ( ( e == e2 ) and ( e3 == e4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Event" );
else
  LOG::LogFailure( message:"Multiple Invocation - Event");
end if;

if ( ( tr == tr2 ) and ( tr3 == tr4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Timer" );
else
  LOG::LogFailure( message:"Multiple Invocation - Timer");
end if;

if ( ( i == i2 ) and ( i3 == i4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Integer" );
else
  LOG::LogFailure( message:"Multiple Invocation - Integer");
  LOG::LogInt( message:"Function Invocation", int:i );
  LOG::LogInt( message:"Bridge Invocation", int:i2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i3 );
  LOG::LogInt( message:"Class Operation Invocation", int:i4 );
end if;

if ( ( r == r2 ) and ( r3 == r4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Real" );
else
  LOG::LogFailure( message:"Multiple Invocation - Real");
  LOG::LogReal( message:"Function Invocation", real:r );
  LOG::LogReal( message:"Bridge Invocation", real:r2 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r3 );
  LOG::LogReal( message:"Class Operation Invocation", real:r4 );
end if;

if ( ( s == s2 ) and ( s3 == s4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - String" );
else
  LOG::LogFailure( message:"Multiple Invocation - String");
  LOG::LogString( message:"Function Invocation", str:s );
  LOG::LogString( message:"Bridge Invocation", str:s2 );
  LOG::LogString( message:"Instance Operation Invocation", str:s3 );
  LOG::LogString( message:"Class Operation Invocation", str:s4 );
end if;

if ( ( t== t2 ) and ( t3 == t4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Timestamp" );
else
  LOG::LogFailure( message:"Multiple Invocation - Timestamp");
  LOG::LogTime( message:"Function Invocation", time:t );
  LOG::LogTime( message:"Bridge Invocation", time:t2 );
  LOG::LogTime( message:"Instance Operation Invocation", time:t3 );
  LOG::LogTime( message:"Class Operation Invocation", time:t4 );
end if;

if ( ( id == id2 ) and ( id3 == id4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Unique ID" );
else
  LOG::LogFailure( message:"Multiple Invocation - Unique ID");
  LOG::LogUniqueId( message:"Function Invocation", uid:id );
  LOG::LogUniqueId( message:"Bridge Invocation", uid:id2 );
  LOG::LogUniqueId( message:"Instance Operation Invocation", uid:id3 );
  LOG::LogUniqueId( message:"Class Operation Invocation", uid:id4 );
end if;

if ( ( en == en2 ) and ( en3 == en4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - Enumeration" );
else
  LOG::LogFailure( message:"Multiple Invocation - Enumeration");
end if;

if ( ( u == u2 ) and ( u3 == u4 ) )
  LOG::LogSuccess( message:"Multiple Invocation - User Data Type" );
else
  LOG::LogFailure( message:"Multiple Invocation - User Data Type");
  LOG::LogInt( message:"Function Invocation", int:u );
  LOG::LogInt( message:"Bridge Invocation", int:u2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u3 );
  LOG::LogInt( message:"Class Operation Invocation", int:u4 );
end if;',
	1,
	'');
INSERT INTO S_BRG
	VALUES ("6b86bada-70dc-4e90-80a0-bfd44ae36807",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'multiple_invoke_w_expressions',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'select any tc from instances of TC;


select any tc4 from instances of TC4;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Functions
////////////////////////////
b = ::bool1( date1: ::date1( evt1:tc.e ) ) and REE::bool5(date5: tc.date3( evt3:tc.e ) );
tr = ::timer1( int1:TC::int4( real4:tc.r )      +    ::int1( real1: tc.real3( str3:tc.s ) ) );
i = ::int1(real1: ::real1(str1:tc.s)               +   EE::real2( str2: tc.str3( time3:tc.t ) ) );
r = ::real1(str1: EE::str2(time2:tc.t)          +    tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s = ::str1( time1: EE::time2( id2: tc.ID ) )  +    tc.str3( time3: TC::time4( id4: tc.ID ) );
en = ::enum1(udt1:EE::udt2(bool2:tc.b)   +    tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
u = ::udt1(bool1: tc.bool3(date3:tc.d)    and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Bridges
////////////////////////////
b2 = EE::bool2(date2: ::date1(evt1:tc.e))  and EE::bool2(date2: tc.date3( evt3:tc.e ) );
tr2 =  EE::timer2(int2: TC::int4(real4:tc.r)     +   ::int1( real1: tc.real3( str3:tc.s ) ) );
i2 =  EE::int2(real2: ::real1(str1:tc.s)            +  REE::real5( str5: tc.str3( time3:tc.t ) ) );
r2 =  EE::real2(str2:  EE::str2(time2:tc.t)      +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s2 =  EE::str2(time2: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
en2 = EE::enum2(udt2: EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
u2 = EE::udt2(bool2: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Instance Operations
////////////////////////////
b3 = tc.bool3(date3: ::date1(evt1:tc.e))   and EE::bool2(date2: tc.date3( evt3:tc.e ) );
tr3 =  tc.timer3(int3:TC4::int7(real7:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
i3 =  tc.int3(real3: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
r3 =  tc.real3(str3: EE::str2(time2:tc.t)        +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s3 =  tc.str3(time3: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
en3 = tc.enum3(udt3: EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
u3 = tc.udt3(bool3: tc.bool3(date3:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Class Operations
////////////////////////////
b4 = TC::bool4(date4: ::date1(evt1:tc.e))   and EE::bool2(date2: tc.date3( evt3:tc.e ) );
tr4 = TC::timer4(int4:TC::int4(real4:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
i4 = TC::int4(real4: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
r4 = TC::real4(str4: REE::str5(time5:tc.t)        +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
s4 = TC::str4(time4:tc.time3(id3:tc.ID))       +  tc4.str6( time6: TC::time4( id4: tc.ID ) );
en4 = TC::enum4(udt4:EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
u4 = TC::udt4(bool4: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Results
////////////////////////////
if ( b and b2 and b3 and b4 )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Boolean" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:b2 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b3 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b4 );
end if;

if ( ( tr == tr2 ) and ( tr3 == tr4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Timer" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Timer");
end if;

if ( ( i == i2 ) and ( i3 == i4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Integer" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Integer");
  LOG::LogInt( message:"Function Invocation", int:i );
  LOG::LogInt( message:"Bridge Invocation", int:i2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i3 );
  LOG::LogInt( message:"Class Operation Invocation", int:i4 );
end if;

if ( ( r == r2 ) and ( r3 == r4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Real" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Real");
  LOG::LogReal( message:"Function Invocation", real:r );
  LOG::LogReal( message:"Bridge Invocation", real:r2 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r3 );
  LOG::LogReal( message:"Class Operation Invocation", real:r4 );
end if;

if ( ( s == s2 ) and ( s3 == s4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - String" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - String");
  LOG::LogString( message:"Function Invocation", str:s );
  LOG::LogString( message:"Bridge Invocation", str:s2 );
  LOG::LogString( message:"Instance Operation Invocation", str:s3 );
  LOG::LogString( message:"Class Operation Invocation", str:s4 );
end if;

if ( ( en == en2 ) and ( en3 == en4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Enumeration" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Enumeration");
end if;

if ( ( u == u2 ) and ( u3 == u4 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - User Data Type" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - User Data Type");
  LOG::LogInt( message:"Function Invocation", int:u );
  LOG::LogInt( message:"Bridge Invocation", int:u2 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u3 );
  LOG::LogInt( message:"Class Operation Invocation", int:u4 );
end if;',
	1,
	'');
INSERT INTO S_BRG
	VALUES ("fc050047-361a-4853-996f-0951350a9502",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'ret2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'select any tc from instances of TC;

return ::bool1( date1: EE::date2( evt2: tc.evt3( timer3: TC::timer4( int4: ::int1( real1: tc.r + EE::real2( str2: tc.s ) ) + tc.int3( real3: TC::real4( str4: tc.s ) ) ) ) ) ) and ( ( EE::bool2( date2:tc.d ) or ( tc.bool3( date3:tc.d ) ) and TC::bool4( date4:tc.d ) ) );',
	1,
	'');
INSERT INTO S_BRG
	VALUES ("8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'mod_params2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'//////////////////////////////
// Param Assign
//////////////////////////////

select any tc from instances of TC;
select any tc_4 from instances of TC4;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Functions
////////////////////////////
param.b = ::bool1( date1: ::date1( evt1:tc.e ) ) and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr = ::timer1( int1:TC::int4( real4:tc.r )      +    ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i = ::int1(real1: ::real1(str1:tc.s)               +   EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r = ::real1(str1: EE::str2(time2:tc.t)          +    tc.str3( time3: TC::time4( id4:tc.ID ) ) );
param.s = ::str1( time1: EE::time2( id2: tc.ID ) )  +    tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en = ::enum1(udt1:EE::udt2(bool2:tc.b)   +    tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u = ::udt1(bool1: tc.bool3(date3:tc.d)    and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Bridges
////////////////////////////
param.b2 = EE::bool2(date2: ::date1(evt1:tc.e))  and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr2 =  EE::timer2(int2: TC::int4(real4:tc.r)     +   ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i2 =  EE::int2(real2: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r2 =  REE::real5(str5:  EE::str2(time2:tc.t)      +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
param.s2 =  REE::str5(time5: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en2 = EE::enum2(udt2: EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u2 = EE::udt2(bool2: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Instance Operations
////////////////////////////
param.b3 = tc.bool3(date3: ::date1(evt1:tc.e))   and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr3 =  tc.timer3(int3:TC::int4(real4:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i3 =  tc_4.int6(real6: ::real1(str1:tc.s)            +  EE::real2( str2: tc_4.str6( time6:tc.t ) ) );
param.r3 =  tc_4.real6(str6: EE::str2(time2:tc.t)        +   tc_4.str6( time6: TC::time4( id4:tc.ID ) ) );
param.s3 =  tc.str3(time3: tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en3 = tc.enum3(udt3: EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u3 = tc.udt3(bool3: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Class Operations
////////////////////////////
param.b4 = TC::bool4(date4: ::date1(evt1:tc.e))   and EE::bool2(date2: tc.date3( evt3:tc.e ) );
param.tr4 = TC::timer4(int4:TC::int4(real4:tc.r)       +   ::int1( real1: tc.real3( str3:tc.s ) ) );
param.i4 = TC4::int7(real7: ::real1(str1:tc.s)            +  EE::real2( str2: tc.str3( time3:tc.t ) ) );
param.r4 = TC::real4(str4: EE::str2(time2:tc.t)        +   tc.str3( time3: TC::time4( id4:tc.ID ) ) );
param.s4 = TC4::str7(time7:tc.time3(id3:tc.ID))       +  tc.str3( time3: TC::time4( id4: tc.ID ) );
param.en4 = TC::enum4(udt4:EE::udt2(bool2:tc.b) +  tc.udt3( bool3: TC::bool4( date4:tc.d ) ) );
param.u4 = TC::udt4(bool4: tc.bool3(date3:tc.d)   and  TC::bool4( date4: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Results
////////////////////////////
if ( param.b and param.b2 and param.b3 and param.b4 )
  LOG::LogSuccess( message:"Assign Param - Boolean" );
else
  LOG::LogFailure( message:"Assign Param - Boolean");
  LOG::LogBoolean( message:"Function Invocation", bool:param.b );
  LOG::LogBoolean( message:"Bridge Invocation", bool:param.b );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:param.b );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:param.b );
end if;

if ( ( param.tr ==  param.tr2 ) and (  param.tr3 ==  param.tr4 ) )
  LOG::LogSuccess( message:"Assign Param - Timer" );
else
  LOG::LogFailure( message:"Assign Param - Timer");
end if;

if ( ( param.i ==  param.i2 ) and (  param.i3 ==  param.i4 ) )
  LOG::LogSuccess( message:"Assign Param - Integer" );
else
  LOG::LogFailure( message:"Assign Param - Integer");
  LOG::LogInt( message:"Function Invocation", int: param.i );
  LOG::LogInt( message:"Bridge Invocation", int: param.i );
  LOG::LogInt( message:"Instance Operation Invocation", int: param.i );
  LOG::LogInt( message:"Class Operation Invocation", int: param.i );
end if;

if ( (  param.r ==  param.r2 ) and (  param.r3 ==  param.r4 ) )
  LOG::LogSuccess( message:"Assign Param - Real" );
else
  LOG::LogFailure( message:"Assign Param - Real");
  LOG::LogReal( message:"Function Invocation", real: param.r );
  LOG::LogReal( message:"Bridge Invocation", real: param.r );
  LOG::LogReal( message:"Instance Operation Invocation", real: param.r );
  LOG::LogReal( message:"Class Operation Invocation", real: param.r );
end if;

if ( (  param.s ==  param.s2 ) and (  param.s3 ==  param.s4 ) )
  LOG::LogSuccess( message:"Assign Param - String" );
else
  LOG::LogFailure( message:"Assign Param - String");
  LOG::LogString( message:"Function Invocation", str: param.s );
  LOG::LogString( message:"Bridge Invocation", str: param.s );
  LOG::LogString( message:"Instance Operation Invocation", str: param.s );
  LOG::LogString( message:"Class Operation Invocation", str: param.s );
end if;

if ( (  param.en ==  param.en2 ) and (  param.en3 ==  param.en4 ) )
  LOG::LogSuccess( message:"Assign Param - Enumeration" );
else
  LOG::LogFailure( message:"Assign Param - Enumeration");
end if;

if ( (  param.u ==  param.u2 ) and (  param.u3 ==  param.u4 ) )
  LOG::LogSuccess( message:"Assign Param - User Data Type" );
else
  LOG::LogFailure( message:"Assign Param - User Data Type");
  LOG::LogInt( message:"Function Invocation", int: param.u );
  LOG::LogInt( message:"Bridge Invocation", int: param.u );
  LOG::LogInt( message:"Instance Operation Invocation", int: param.u );
  LOG::LogInt( message:"Class Operation Invocation", int: param.u );
end if;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("6c9be5a4-cf23-42ce-8bb0-83dd77c82483",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("a72ae8fc-b1a2-4ca0-a710-4e2bd19e5920",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'tr',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"94721430-dbb5-45a0-9219-516a677fbd1f",
	'');
INSERT INTO S_BPARM
	VALUES ("3d6c51b0-0830-49ac-8b10-5489cea12c15",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"8414d721-47e5-4db7-b210-7c1c3d154c6e",
	'');
INSERT INTO S_BPARM
	VALUES ("fc80dec3-2adf-48f3-a0dd-3bec9e937115",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"a8bd5019-35f0-419f-beea-fceed6bccb1d",
	'');
INSERT INTO S_BPARM
	VALUES ("888ff182-843c-49bd-a1a4-d4a01fb3b202",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"e6a54811-eb56-4df1-a4b3-f1ec477f1e5f",
	'');
INSERT INTO S_BPARM
	VALUES ("02bba8da-596e-4bef-bb9b-9bf23ca81810",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'en',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"5adf52c6-56ae-427a-9161-55da84949ada",
	'');
INSERT INTO S_BPARM
	VALUES ("39057d6b-fc48-48cb-a3a0-a9382b084a59",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'u',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"bba4e7d4-d57b-44e1-935d-353a0a7ae0b4",
	'');
INSERT INTO S_BPARM
	VALUES ("689fc4fc-c67e-4e8e-83cb-59b91a2eae2a",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'b2',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"6c9be5a4-cf23-42ce-8bb0-83dd77c82483",
	'');
INSERT INTO S_BPARM
	VALUES ("b730a34c-0641-46a1-9bd5-bf01538ed34b",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'tr2',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"a72ae8fc-b1a2-4ca0-a710-4e2bd19e5920",
	'');
INSERT INTO S_BPARM
	VALUES ("b705ff49-6182-4287-a2ca-09740e26f212",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'i2',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"3d6c51b0-0830-49ac-8b10-5489cea12c15",
	'');
INSERT INTO S_BPARM
	VALUES ("697d95f6-4801-4fd8-b7d0-bafe0cd486df",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'r2',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"fc80dec3-2adf-48f3-a0dd-3bec9e937115",
	'');
INSERT INTO S_BPARM
	VALUES ("9a8143b7-9539-4e6a-aca6-7f7021ac967c",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	's2',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"888ff182-843c-49bd-a1a4-d4a01fb3b202",
	'');
INSERT INTO S_BPARM
	VALUES ("10f5e94c-c08d-4a02-ad97-2387a3c4d1bc",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'en2',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"02bba8da-596e-4bef-bb9b-9bf23ca81810",
	'');
INSERT INTO S_BPARM
	VALUES ("5245a368-43ef-482c-a08c-ace7c348ad9f",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'u2',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"39057d6b-fc48-48cb-a3a0-a9382b084a59",
	'');
INSERT INTO S_BPARM
	VALUES ("d5cbe920-a027-4f43-b13d-04b4998d653b",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'b3',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"689fc4fc-c67e-4e8e-83cb-59b91a2eae2a",
	'');
INSERT INTO S_BPARM
	VALUES ("046ee5aa-0619-458f-9f4d-2f53d8076e9d",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'tr3',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"b730a34c-0641-46a1-9bd5-bf01538ed34b",
	'');
INSERT INTO S_BPARM
	VALUES ("c8365b15-e130-4b6a-9abf-739340ba4f9c",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'i3',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"b705ff49-6182-4287-a2ca-09740e26f212",
	'');
INSERT INTO S_BPARM
	VALUES ("474a0173-8e7a-4868-9d29-42119ed597ce",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'r3',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"697d95f6-4801-4fd8-b7d0-bafe0cd486df",
	'');
INSERT INTO S_BPARM
	VALUES ("640f03c9-7b0b-4c83-ba70-1ea93c90a0eb",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	's3',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"9a8143b7-9539-4e6a-aca6-7f7021ac967c",
	'');
INSERT INTO S_BPARM
	VALUES ("6a5aa519-0587-4359-9d81-9ed56c94ab15",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'en3',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"10f5e94c-c08d-4a02-ad97-2387a3c4d1bc",
	'');
INSERT INTO S_BPARM
	VALUES ("33987a42-8202-40a4-a6f1-94a25d731d05",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'u3',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"5245a368-43ef-482c-a08c-ace7c348ad9f",
	'');
INSERT INTO S_BPARM
	VALUES ("5adf52c6-56ae-427a-9161-55da84949ada",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'b4',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	"d5cbe920-a027-4f43-b13d-04b4998d653b",
	'');
INSERT INTO S_BPARM
	VALUES ("bba4e7d4-d57b-44e1-935d-353a0a7ae0b4",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'tr4',
	"ba5eda7a-def5-0000-0000-00000000000f",
	1,
	'',
	"046ee5aa-0619-458f-9f4d-2f53d8076e9d",
	'');
INSERT INTO S_BPARM
	VALUES ("a8bd5019-35f0-419f-beea-fceed6bccb1d",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'i4',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"c8365b15-e130-4b6a-9abf-739340ba4f9c",
	'');
INSERT INTO S_BPARM
	VALUES ("e6a54811-eb56-4df1-a4b3-f1ec477f1e5f",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'r4',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	"474a0173-8e7a-4868-9d29-42119ed597ce",
	'');
INSERT INTO S_BPARM
	VALUES ("94721430-dbb5-45a0-9219-516a677fbd1f",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	's4',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	"640f03c9-7b0b-4c83-ba70-1ea93c90a0eb",
	'');
INSERT INTO S_BPARM
	VALUES ("8414d721-47e5-4db7-b210-7c1c3d154c6e",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'en4',
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	1,
	'',
	"6a5aa519-0587-4359-9d81-9ed56c94ab15",
	'');
INSERT INTO S_BPARM
	VALUES ("1d76cff3-e4c7-478c-a18e-cfb6ef8d42e2",
	"8fd0fd0f-1a61-46b2-86f6-d2e4ccf23445",
	'u4',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	1,
	'',
	"33987a42-8202-40a4-a6f1-94a25d731d05",
	'');
INSERT INTO S_BRG
	VALUES ("f8e0e963-5993-46f9-b3b6-657adc35096e",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'real_invoke2',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	'select any tc from instances of TC;

select any tc7 from instances of TC4;

// Order is Function, Bridge, Instance Operation, Class Operation

////////////////////////////
// Bridges
////////////////////////////
b5 = REE::bool5(date5: ::date1(evt1:tc.e))  and REE::bool5(date5: tc.date3( evt3:tc.e ) );
i5 =  REE::int5(real5: ::real1(str1:tc.s)            +  EE::real2( str2: REE::str5( time5:tc.t ) ) );
r5 =  REE::real5(str5:  REE::str5(time5:tc.t)      +   tc7.str6( time6: TC::time4( id4:tc.ID ) ) );
s5 =  REE::str5(time5: tc.time3(id3:tc.ID))       +  tc7.str6( time6: TC::time4( id4: tc.ID ) );
en5 = REE::enum5(udt5: REE::udt5(bool5:tc.b) +  tc7.udt6( bool6: TC4::bool7( date7:tc.d ) ) );
u5 = REE::udt5(bool5: tc7.bool6(date6:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Instance Operations
////////////////////////////
b6 = tc7.bool6(date6: ::date1(evt1:tc.e))   and REE::bool5(date5: TC::date4( evt4:tc.e ) );
i6 =  tc7.int6(real6: ::real1(str1:tc.s)            +  REE::real5( str5: tc7.str6( time6:tc.t ) ) );
r6 =  tc7.real6(str6: REE::str5(time5:tc.t)        +   tc7.str6( time6: TC::time4( id4:tc.ID ) ) );
s6 =  tc7.str6(time6: TC::time4(id4:tc.ID))       +  tc7.str6( time6: TC::time4( id4: tc.ID ) );
en6 = tc7.enum6(udt6: REE::udt5(bool5:tc.b) +  tc7.udt6( bool6: REE::bool5( date5:tc.d ) ) );
u6 = tc7.udt6(bool6: tc7.bool6(date6:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Class Operations
////////////////////////////
b7 = TC4::bool7(date7: ::date1(evt1:tc.e))   and REE::bool5(date5: tc.date3( evt3:tc.e ) );
i7 = TC4::int7(real7: ::real1(str1:tc.s)            +  REE::real5( str5: tc7.str6( time6:tc.t ) ) );
r7 = TC4::real7(str7: REE::str5(time5:tc.t)        +   tc7.str6( time6: TC::time4( id4:tc.ID ) ) );
s7 = TC4::str7(time7:tc.time3(id3:tc.ID))       +  TC::str4( time4: TC::time4( id4: tc.ID ) );
en7 = TC4::enum7(udt7:REE::udt5(bool5:tc.b) +  tc7.udt6( bool6: TC4::bool7( date7:tc.d ) ) );
u7 = TC4::udt7(bool7: tc7.bool6(date6:tc.d)   and  TC4::bool7( date7: ::date1( evt1:tc.e ) ) );

////////////////////////////
// Results
////////////////////////////
if ( b5 and b6 and b7 )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Boolean" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Boolean");
  LOG::LogBoolean( message:"Bridge Invocation", bool:b5 );
  LOG::LogBoolean( message:"Instance Operation Invocation", bool:b6 );
  LOG::LogBoolean( message:"Class Operation Invocation", bool:b7 );
end if;

if ( ( i5 == i6 ) and ( i6 == i7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Integer" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Integer");
  LOG::LogInt( message:"Bridge Invocation", int:i5 );
  LOG::LogInt( message:"Instance Operation Invocation", int:i6 );
  LOG::LogInt( message:"Class Operation Invocation", int:i7 );
end if;

if ( ( r5 == r6 ) and ( r6 == r7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Real" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Real");
  LOG::LogReal( message:"Bridge Invocation", real:r5 );
  LOG::LogReal( message:"Instance Operation Invocation", real:r6 );
  LOG::LogReal( message:"Class Operation Invocation", real:r7 );
end if;

if ( ( s5 == s6 ) and ( s6 == s7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - String" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - String");
  LOG::LogString( message:"Bridge Invocation", str:s5 );
  LOG::LogString( message:"Instance Operation Invocation", str:s6 );
  LOG::LogString( message:"Class Operation Invocation", str:s7 );
end if;

if ( ( en5 == en6 ) and ( en6 == en7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - Enumeration" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - Enumeration");
end if;

if ( ( u5 == u6 ) and ( u6 == u7 ) )
  LOG::LogSuccess( message:"Multiple Invocation with Expression - User Data Type" );
else
  LOG::LogFailure( message:"Multiple Invocation with Expression - User Data Type");
  LOG::LogInt( message:"Bridge Invocation", int:u5 );
  LOG::LogInt( message:"Instance Operation Invocation", int:u6 );
  LOG::LogInt( message:"Class Operation Invocation", int:u7 );
end if;',
	1,
	'');
INSERT INTO S_BRG
	VALUES ("eb3afd75-7caf-456e-a6d4-0797d8b147e6",
	"cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	'ret5',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'select any tc from instances of TC;

return REE::bool5( date5: EE::date2( evt2: tc.evt3( timer3: TC::timer4( int4: ::int1( real1: tc.r + EE::real2( str2: tc.s ) ) + tc.int3( real3: TC::real4( str4: tc.s ) ) ) ) ) ) and ( ( EE::bool2( date2:tc.d ) or ( tc.bool3( date3:tc.d ) ) and TC::bool4( date4:tc.d ) ) );',
	1,
	'');
INSERT INTO PE_PE
	VALUES ("cd8cd8cc-33c2-4f38-a803-a92d9006b428",
	1,
	"b973d9db-1897-4355-9843-43412096d944",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_EE
	VALUES ("8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'Realized EE',
	'',
	'REE',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_BRG
	VALUES ("5dd5d6c9-6581-4124-a8cc-3add02cb9c66",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'bool5',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'return false;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("b31cfa7e-6013-4e15-8a5e-c70bfefdb38b",
	"5dd5d6c9-6581-4124-a8cc-3add02cb9c66",
	'date5',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("85bc827b-6832-4767-8ff0-8e46e96bec6f",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'int5',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'return -1;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("af536401-5bf2-45a5-b86d-43510c482c4a",
	"85bc827b-6832-4767-8ff0-8e46e96bec6f",
	'real5',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("b2e9b1c2-7288-487c-814a-76377ce7b3c9",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'real5',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'return -1.0;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("ee840b45-ba90-4f82-bc0b-f66daf99be84",
	"b2e9b1c2-7288-487c-814a-76377ce7b3c9",
	'str5',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("a99544a5-aba8-4ad1-919f-a0d9e4ab12b7",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'str5',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'return "Failure";',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("f43c3698-d62c-4236-bf80-1d35801855c1",
	"a99544a5-aba8-4ad1-919f-a0d9e4ab12b7",
	'time5',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("eb6778f9-b93d-44c7-95a0-0bd5a6320aff",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'udt5',
	'',
	0,
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	'return -1;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("ddbfa865-4ad2-43bb-a0c1-ab66a165ae42",
	"eb6778f9-b93d-44c7-95a0-0bd5a6320aff",
	'bool5',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BRG
	VALUES ("dfec5f10-32e2-4dc6-ac87-a3053e90938f",
	"8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	'enum5',
	'',
	0,
	"9254ec0d-976f-4b8c-8fbe-c5047142da3a",
	'return enum::blue;',
	1,
	'');
INSERT INTO S_BPARM
	VALUES ("eb78f279-b2b0-4487-af6b-cb49344ad5b6",
	"dfec5f10-32e2-4dc6-ac87-a3053e90938f",
	'udt5',
	"42a729d2-3361-4a77-8752-dce5f2fd5786",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8b91490a-9cf5-4b48-8a8a-a95c902f1e7c",
	1,
	"b973d9db-1897-4355-9843-43412096d944",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO PE_PE
	VALUES ("b973d9db-1897-4355-9843-43412096d944",
	1,
	"ccb6afe9-aa88-442b-b8ad-fd49a9b35abf",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("ccb6afe9-aa88-442b-b8ad-fd49a9b35abf",
	"0d7f30b4-802c-4448-8609-9f80dc325590",
	"0d7f30b4-802c-4448-8609-9f80dc325590",
	'G_ALL_nested_invoke',
	'This test is designed to exercise the use of invocations of functions, bridges, instance operations, and class operations as rvals.  Specifically as parameters, in assignments, as return values, in where statements, in if, elif, for, and while. Also, multiple invocations, i.e. an invocation as a parameter to another invocation, or two invocations added together with one having an invocation as a parameter, etc.

For test coverage see MC-2020_coverage.xls.',
	0,
	'../G_ALL_nested_invoke.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("0d7f30b4-802c-4448-8609-9f80dc325590",
	'G_ALL_nested_invoke',
	1,
	'../../G_ALL_nested_invoke.xtuml');
